//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :2.0.50727.42
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CHM_SERVER {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("GESTION_COMMERCIALEDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GESTION_COMMERCIALEDataSet : System.Data.DataSet {
        
        private ARTICLEDataTable tableARTICLE;
        
        private BON_DE_LIVRAISONDataTable tableBON_DE_LIVRAISON;
        
        private CATEGORIEDataTable tableCATEGORIE;
        
        private CLIENTDataTable tableCLIENT;
        
        private COMMANDEDataTable tableCOMMANDE;
        
        private EMPLOYEDataTable tableEMPLOYE;
        
        private FACTUREDataTable tableFACTURE;
        
        private FONCTIONALITE_EMPLOYEDataTable tableFONCTIONALITE_EMPLOYE;
        
        private FOURNISSEURDataTable tableFOURNISSEUR;
        
        private LG_BON_LIVRAISONDataTable tableLG_BON_LIVRAISON;
        
        private LIGNE_COMMANDEDataTable tableLIGNE_COMMANDE;
        
        private LIGNE_FACTUREDataTable tableLIGNE_FACTURE;
        
        private LIVRAISONDataTable tableLIVRAISON;
        
        private LIVRAISON_CLIENTDataTable tableLIVRAISON_CLIENT;
        
        private MAGAZINDataTable tableMAGAZIN;
        
        private REGLEMENT_CLIENTDataTable tableREGLEMENT_CLIENT;
        
        private SOCIETEDataTable tableSOCIETE;
        
        private STOCKDataTable tableSTOCK;
        
        private TACHEDataTable tableTACHE;
        
        private UTILISATEURDataTable tableUTILISATEUR;
        
        private System.Data.DataRelation relationFK_ARTICLE_CATEGORIE;
        
        private System.Data.DataRelation relationFK_ARTICLE_FOURNISSEUR;
        
        private System.Data.DataRelation relationFK_BON_DE_LIVRAISON_CLIENT;
        
        private System.Data.DataRelation relationFK_COMMANDE_CLIENT;
        
        private System.Data.DataRelation relationFK_COMMANDE_EMPLOYE;
        
        private System.Data.DataRelation relationFK_EMPLOYE_FONCTIONALITE_EMPLOYE;
        
        private System.Data.DataRelation relationFK_EMPLOYE_MAGAZIN;
        
        private System.Data.DataRelation relationFK_EMPLOYE_SOCIETE;
        
        private System.Data.DataRelation relationFK_FACTURE_CLIENT;
        
        private System.Data.DataRelation relationFK_FACTURE_EMPLOYE;
        
        private System.Data.DataRelation relationFK_FACTURE_REGLEMENT_CLIENT;
        
        private System.Data.DataRelation relationFK_LG_BON_LIVRAISON_ARTICLE;
        
        private System.Data.DataRelation relationFK_LG_BON_LIVRAISON_BON_DE_LIVRAISON;
        
        private System.Data.DataRelation relationFK_LIGNE_COMMANDE_ARTICLE;
        
        private System.Data.DataRelation relationFK_LIGNE_COMMANDE_COMMANDE;
        
        private System.Data.DataRelation relationFK_LIGNE_FACTURE_ARTICLE;
        
        private System.Data.DataRelation relationFK_LIGNE_FACTURE_FACTURE;
        
        private System.Data.DataRelation relationFK_LIVRAISON_CLIENT_BON_DE_LIVRAISON;
        
        private System.Data.DataRelation relationFK_LIVRAISON_CLIENT_COMMANDE;
        
        private System.Data.DataRelation relationFK_LIVRAISON_CLIENT_EMPLOYE;
        
        private System.Data.DataRelation relationFK_MAGAZIN_SOCIETE;
        
        private System.Data.DataRelation relationFK_STOCK_ARTICLE;
        
        private System.Data.DataRelation relationFK_STOCK_MAGAZIN;
        
        private System.Data.DataRelation relationFK_TACHE_FONCTIONALITE_EMPLOYE;
        
        private System.Data.DataRelation relationFK_UTILISATEUR_SOCIETE;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GESTION_COMMERCIALEDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GESTION_COMMERCIALEDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ARTICLE"] != null)) {
                    base.Tables.Add(new ARTICLEDataTable(ds.Tables["ARTICLE"]));
                }
                if ((ds.Tables["BON_DE_LIVRAISON"] != null)) {
                    base.Tables.Add(new BON_DE_LIVRAISONDataTable(ds.Tables["BON_DE_LIVRAISON"]));
                }
                if ((ds.Tables["CATEGORIE"] != null)) {
                    base.Tables.Add(new CATEGORIEDataTable(ds.Tables["CATEGORIE"]));
                }
                if ((ds.Tables["CLIENT"] != null)) {
                    base.Tables.Add(new CLIENTDataTable(ds.Tables["CLIENT"]));
                }
                if ((ds.Tables["COMMANDE"] != null)) {
                    base.Tables.Add(new COMMANDEDataTable(ds.Tables["COMMANDE"]));
                }
                if ((ds.Tables["EMPLOYE"] != null)) {
                    base.Tables.Add(new EMPLOYEDataTable(ds.Tables["EMPLOYE"]));
                }
                if ((ds.Tables["FACTURE"] != null)) {
                    base.Tables.Add(new FACTUREDataTable(ds.Tables["FACTURE"]));
                }
                if ((ds.Tables["FONCTIONALITE_EMPLOYE"] != null)) {
                    base.Tables.Add(new FONCTIONALITE_EMPLOYEDataTable(ds.Tables["FONCTIONALITE_EMPLOYE"]));
                }
                if ((ds.Tables["FOURNISSEUR"] != null)) {
                    base.Tables.Add(new FOURNISSEURDataTable(ds.Tables["FOURNISSEUR"]));
                }
                if ((ds.Tables["LG_BON_LIVRAISON"] != null)) {
                    base.Tables.Add(new LG_BON_LIVRAISONDataTable(ds.Tables["LG_BON_LIVRAISON"]));
                }
                if ((ds.Tables["LIGNE_COMMANDE"] != null)) {
                    base.Tables.Add(new LIGNE_COMMANDEDataTable(ds.Tables["LIGNE_COMMANDE"]));
                }
                if ((ds.Tables["LIGNE_FACTURE"] != null)) {
                    base.Tables.Add(new LIGNE_FACTUREDataTable(ds.Tables["LIGNE_FACTURE"]));
                }
                if ((ds.Tables["LIVRAISON"] != null)) {
                    base.Tables.Add(new LIVRAISONDataTable(ds.Tables["LIVRAISON"]));
                }
                if ((ds.Tables["LIVRAISON_CLIENT"] != null)) {
                    base.Tables.Add(new LIVRAISON_CLIENTDataTable(ds.Tables["LIVRAISON_CLIENT"]));
                }
                if ((ds.Tables["MAGAZIN"] != null)) {
                    base.Tables.Add(new MAGAZINDataTable(ds.Tables["MAGAZIN"]));
                }
                if ((ds.Tables["REGLEMENT_CLIENT"] != null)) {
                    base.Tables.Add(new REGLEMENT_CLIENTDataTable(ds.Tables["REGLEMENT_CLIENT"]));
                }
                if ((ds.Tables["SOCIETE"] != null)) {
                    base.Tables.Add(new SOCIETEDataTable(ds.Tables["SOCIETE"]));
                }
                if ((ds.Tables["STOCK"] != null)) {
                    base.Tables.Add(new STOCKDataTable(ds.Tables["STOCK"]));
                }
                if ((ds.Tables["TACHE"] != null)) {
                    base.Tables.Add(new TACHEDataTable(ds.Tables["TACHE"]));
                }
                if ((ds.Tables["UTILISATEUR"] != null)) {
                    base.Tables.Add(new UTILISATEURDataTable(ds.Tables["UTILISATEUR"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ARTICLEDataTable ARTICLE {
            get {
                return this.tableARTICLE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BON_DE_LIVRAISONDataTable BON_DE_LIVRAISON {
            get {
                return this.tableBON_DE_LIVRAISON;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CATEGORIEDataTable CATEGORIE {
            get {
                return this.tableCATEGORIE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CLIENTDataTable CLIENT {
            get {
                return this.tableCLIENT;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COMMANDEDataTable COMMANDE {
            get {
                return this.tableCOMMANDE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EMPLOYEDataTable EMPLOYE {
            get {
                return this.tableEMPLOYE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FACTUREDataTable FACTURE {
            get {
                return this.tableFACTURE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FONCTIONALITE_EMPLOYEDataTable FONCTIONALITE_EMPLOYE {
            get {
                return this.tableFONCTIONALITE_EMPLOYE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FOURNISSEURDataTable FOURNISSEUR {
            get {
                return this.tableFOURNISSEUR;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LG_BON_LIVRAISONDataTable LG_BON_LIVRAISON {
            get {
                return this.tableLG_BON_LIVRAISON;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LIGNE_COMMANDEDataTable LIGNE_COMMANDE {
            get {
                return this.tableLIGNE_COMMANDE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LIGNE_FACTUREDataTable LIGNE_FACTURE {
            get {
                return this.tableLIGNE_FACTURE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LIVRAISONDataTable LIVRAISON {
            get {
                return this.tableLIVRAISON;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LIVRAISON_CLIENTDataTable LIVRAISON_CLIENT {
            get {
                return this.tableLIVRAISON_CLIENT;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MAGAZINDataTable MAGAZIN {
            get {
                return this.tableMAGAZIN;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public REGLEMENT_CLIENTDataTable REGLEMENT_CLIENT {
            get {
                return this.tableREGLEMENT_CLIENT;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SOCIETEDataTable SOCIETE {
            get {
                return this.tableSOCIETE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public STOCKDataTable STOCK {
            get {
                return this.tableSTOCK;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TACHEDataTable TACHE {
            get {
                return this.tableTACHE;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UTILISATEURDataTable UTILISATEUR {
            get {
                return this.tableUTILISATEUR;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            GESTION_COMMERCIALEDataSet cln = ((GESTION_COMMERCIALEDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ARTICLE"] != null)) {
                    base.Tables.Add(new ARTICLEDataTable(ds.Tables["ARTICLE"]));
                }
                if ((ds.Tables["BON_DE_LIVRAISON"] != null)) {
                    base.Tables.Add(new BON_DE_LIVRAISONDataTable(ds.Tables["BON_DE_LIVRAISON"]));
                }
                if ((ds.Tables["CATEGORIE"] != null)) {
                    base.Tables.Add(new CATEGORIEDataTable(ds.Tables["CATEGORIE"]));
                }
                if ((ds.Tables["CLIENT"] != null)) {
                    base.Tables.Add(new CLIENTDataTable(ds.Tables["CLIENT"]));
                }
                if ((ds.Tables["COMMANDE"] != null)) {
                    base.Tables.Add(new COMMANDEDataTable(ds.Tables["COMMANDE"]));
                }
                if ((ds.Tables["EMPLOYE"] != null)) {
                    base.Tables.Add(new EMPLOYEDataTable(ds.Tables["EMPLOYE"]));
                }
                if ((ds.Tables["FACTURE"] != null)) {
                    base.Tables.Add(new FACTUREDataTable(ds.Tables["FACTURE"]));
                }
                if ((ds.Tables["FONCTIONALITE_EMPLOYE"] != null)) {
                    base.Tables.Add(new FONCTIONALITE_EMPLOYEDataTable(ds.Tables["FONCTIONALITE_EMPLOYE"]));
                }
                if ((ds.Tables["FOURNISSEUR"] != null)) {
                    base.Tables.Add(new FOURNISSEURDataTable(ds.Tables["FOURNISSEUR"]));
                }
                if ((ds.Tables["LG_BON_LIVRAISON"] != null)) {
                    base.Tables.Add(new LG_BON_LIVRAISONDataTable(ds.Tables["LG_BON_LIVRAISON"]));
                }
                if ((ds.Tables["LIGNE_COMMANDE"] != null)) {
                    base.Tables.Add(new LIGNE_COMMANDEDataTable(ds.Tables["LIGNE_COMMANDE"]));
                }
                if ((ds.Tables["LIGNE_FACTURE"] != null)) {
                    base.Tables.Add(new LIGNE_FACTUREDataTable(ds.Tables["LIGNE_FACTURE"]));
                }
                if ((ds.Tables["LIVRAISON"] != null)) {
                    base.Tables.Add(new LIVRAISONDataTable(ds.Tables["LIVRAISON"]));
                }
                if ((ds.Tables["LIVRAISON_CLIENT"] != null)) {
                    base.Tables.Add(new LIVRAISON_CLIENTDataTable(ds.Tables["LIVRAISON_CLIENT"]));
                }
                if ((ds.Tables["MAGAZIN"] != null)) {
                    base.Tables.Add(new MAGAZINDataTable(ds.Tables["MAGAZIN"]));
                }
                if ((ds.Tables["REGLEMENT_CLIENT"] != null)) {
                    base.Tables.Add(new REGLEMENT_CLIENTDataTable(ds.Tables["REGLEMENT_CLIENT"]));
                }
                if ((ds.Tables["SOCIETE"] != null)) {
                    base.Tables.Add(new SOCIETEDataTable(ds.Tables["SOCIETE"]));
                }
                if ((ds.Tables["STOCK"] != null)) {
                    base.Tables.Add(new STOCKDataTable(ds.Tables["STOCK"]));
                }
                if ((ds.Tables["TACHE"] != null)) {
                    base.Tables.Add(new TACHEDataTable(ds.Tables["TACHE"]));
                }
                if ((ds.Tables["UTILISATEUR"] != null)) {
                    base.Tables.Add(new UTILISATEURDataTable(ds.Tables["UTILISATEUR"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableARTICLE = ((ARTICLEDataTable)(base.Tables["ARTICLE"]));
            if ((initTable == true)) {
                if ((this.tableARTICLE != null)) {
                    this.tableARTICLE.InitVars();
                }
            }
            this.tableBON_DE_LIVRAISON = ((BON_DE_LIVRAISONDataTable)(base.Tables["BON_DE_LIVRAISON"]));
            if ((initTable == true)) {
                if ((this.tableBON_DE_LIVRAISON != null)) {
                    this.tableBON_DE_LIVRAISON.InitVars();
                }
            }
            this.tableCATEGORIE = ((CATEGORIEDataTable)(base.Tables["CATEGORIE"]));
            if ((initTable == true)) {
                if ((this.tableCATEGORIE != null)) {
                    this.tableCATEGORIE.InitVars();
                }
            }
            this.tableCLIENT = ((CLIENTDataTable)(base.Tables["CLIENT"]));
            if ((initTable == true)) {
                if ((this.tableCLIENT != null)) {
                    this.tableCLIENT.InitVars();
                }
            }
            this.tableCOMMANDE = ((COMMANDEDataTable)(base.Tables["COMMANDE"]));
            if ((initTable == true)) {
                if ((this.tableCOMMANDE != null)) {
                    this.tableCOMMANDE.InitVars();
                }
            }
            this.tableEMPLOYE = ((EMPLOYEDataTable)(base.Tables["EMPLOYE"]));
            if ((initTable == true)) {
                if ((this.tableEMPLOYE != null)) {
                    this.tableEMPLOYE.InitVars();
                }
            }
            this.tableFACTURE = ((FACTUREDataTable)(base.Tables["FACTURE"]));
            if ((initTable == true)) {
                if ((this.tableFACTURE != null)) {
                    this.tableFACTURE.InitVars();
                }
            }
            this.tableFONCTIONALITE_EMPLOYE = ((FONCTIONALITE_EMPLOYEDataTable)(base.Tables["FONCTIONALITE_EMPLOYE"]));
            if ((initTable == true)) {
                if ((this.tableFONCTIONALITE_EMPLOYE != null)) {
                    this.tableFONCTIONALITE_EMPLOYE.InitVars();
                }
            }
            this.tableFOURNISSEUR = ((FOURNISSEURDataTable)(base.Tables["FOURNISSEUR"]));
            if ((initTable == true)) {
                if ((this.tableFOURNISSEUR != null)) {
                    this.tableFOURNISSEUR.InitVars();
                }
            }
            this.tableLG_BON_LIVRAISON = ((LG_BON_LIVRAISONDataTable)(base.Tables["LG_BON_LIVRAISON"]));
            if ((initTable == true)) {
                if ((this.tableLG_BON_LIVRAISON != null)) {
                    this.tableLG_BON_LIVRAISON.InitVars();
                }
            }
            this.tableLIGNE_COMMANDE = ((LIGNE_COMMANDEDataTable)(base.Tables["LIGNE_COMMANDE"]));
            if ((initTable == true)) {
                if ((this.tableLIGNE_COMMANDE != null)) {
                    this.tableLIGNE_COMMANDE.InitVars();
                }
            }
            this.tableLIGNE_FACTURE = ((LIGNE_FACTUREDataTable)(base.Tables["LIGNE_FACTURE"]));
            if ((initTable == true)) {
                if ((this.tableLIGNE_FACTURE != null)) {
                    this.tableLIGNE_FACTURE.InitVars();
                }
            }
            this.tableLIVRAISON = ((LIVRAISONDataTable)(base.Tables["LIVRAISON"]));
            if ((initTable == true)) {
                if ((this.tableLIVRAISON != null)) {
                    this.tableLIVRAISON.InitVars();
                }
            }
            this.tableLIVRAISON_CLIENT = ((LIVRAISON_CLIENTDataTable)(base.Tables["LIVRAISON_CLIENT"]));
            if ((initTable == true)) {
                if ((this.tableLIVRAISON_CLIENT != null)) {
                    this.tableLIVRAISON_CLIENT.InitVars();
                }
            }
            this.tableMAGAZIN = ((MAGAZINDataTable)(base.Tables["MAGAZIN"]));
            if ((initTable == true)) {
                if ((this.tableMAGAZIN != null)) {
                    this.tableMAGAZIN.InitVars();
                }
            }
            this.tableREGLEMENT_CLIENT = ((REGLEMENT_CLIENTDataTable)(base.Tables["REGLEMENT_CLIENT"]));
            if ((initTable == true)) {
                if ((this.tableREGLEMENT_CLIENT != null)) {
                    this.tableREGLEMENT_CLIENT.InitVars();
                }
            }
            this.tableSOCIETE = ((SOCIETEDataTable)(base.Tables["SOCIETE"]));
            if ((initTable == true)) {
                if ((this.tableSOCIETE != null)) {
                    this.tableSOCIETE.InitVars();
                }
            }
            this.tableSTOCK = ((STOCKDataTable)(base.Tables["STOCK"]));
            if ((initTable == true)) {
                if ((this.tableSTOCK != null)) {
                    this.tableSTOCK.InitVars();
                }
            }
            this.tableTACHE = ((TACHEDataTable)(base.Tables["TACHE"]));
            if ((initTable == true)) {
                if ((this.tableTACHE != null)) {
                    this.tableTACHE.InitVars();
                }
            }
            this.tableUTILISATEUR = ((UTILISATEURDataTable)(base.Tables["UTILISATEUR"]));
            if ((initTable == true)) {
                if ((this.tableUTILISATEUR != null)) {
                    this.tableUTILISATEUR.InitVars();
                }
            }
            this.relationFK_ARTICLE_CATEGORIE = this.Relations["FK_ARTICLE_CATEGORIE"];
            this.relationFK_ARTICLE_FOURNISSEUR = this.Relations["FK_ARTICLE_FOURNISSEUR"];
            this.relationFK_BON_DE_LIVRAISON_CLIENT = this.Relations["FK_BON_DE_LIVRAISON_CLIENT"];
            this.relationFK_COMMANDE_CLIENT = this.Relations["FK_COMMANDE_CLIENT"];
            this.relationFK_COMMANDE_EMPLOYE = this.Relations["FK_COMMANDE_EMPLOYE"];
            this.relationFK_EMPLOYE_FONCTIONALITE_EMPLOYE = this.Relations["FK_EMPLOYE_FONCTIONALITE_EMPLOYE"];
            this.relationFK_EMPLOYE_MAGAZIN = this.Relations["FK_EMPLOYE_MAGAZIN"];
            this.relationFK_EMPLOYE_SOCIETE = this.Relations["FK_EMPLOYE_SOCIETE"];
            this.relationFK_FACTURE_CLIENT = this.Relations["FK_FACTURE_CLIENT"];
            this.relationFK_FACTURE_EMPLOYE = this.Relations["FK_FACTURE_EMPLOYE"];
            this.relationFK_FACTURE_REGLEMENT_CLIENT = this.Relations["FK_FACTURE_REGLEMENT_CLIENT"];
            this.relationFK_LG_BON_LIVRAISON_ARTICLE = this.Relations["FK_LG_BON_LIVRAISON_ARTICLE"];
            this.relationFK_LG_BON_LIVRAISON_BON_DE_LIVRAISON = this.Relations["FK_LG_BON_LIVRAISON_BON_DE_LIVRAISON"];
            this.relationFK_LIGNE_COMMANDE_ARTICLE = this.Relations["FK_LIGNE_COMMANDE_ARTICLE"];
            this.relationFK_LIGNE_COMMANDE_COMMANDE = this.Relations["FK_LIGNE_COMMANDE_COMMANDE"];
            this.relationFK_LIGNE_FACTURE_ARTICLE = this.Relations["FK_LIGNE_FACTURE_ARTICLE"];
            this.relationFK_LIGNE_FACTURE_FACTURE = this.Relations["FK_LIGNE_FACTURE_FACTURE"];
            this.relationFK_LIVRAISON_CLIENT_BON_DE_LIVRAISON = this.Relations["FK_LIVRAISON_CLIENT_BON_DE_LIVRAISON"];
            this.relationFK_LIVRAISON_CLIENT_COMMANDE = this.Relations["FK_LIVRAISON_CLIENT_COMMANDE"];
            this.relationFK_LIVRAISON_CLIENT_EMPLOYE = this.Relations["FK_LIVRAISON_CLIENT_EMPLOYE"];
            this.relationFK_MAGAZIN_SOCIETE = this.Relations["FK_MAGAZIN_SOCIETE"];
            this.relationFK_STOCK_ARTICLE = this.Relations["FK_STOCK_ARTICLE"];
            this.relationFK_STOCK_MAGAZIN = this.Relations["FK_STOCK_MAGAZIN"];
            this.relationFK_TACHE_FONCTIONALITE_EMPLOYE = this.Relations["FK_TACHE_FONCTIONALITE_EMPLOYE"];
            this.relationFK_UTILISATEUR_SOCIETE = this.Relations["FK_UTILISATEUR_SOCIETE"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GESTION_COMMERCIALEDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GESTION_COMMERCIALEDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableARTICLE = new ARTICLEDataTable();
            base.Tables.Add(this.tableARTICLE);
            this.tableBON_DE_LIVRAISON = new BON_DE_LIVRAISONDataTable();
            base.Tables.Add(this.tableBON_DE_LIVRAISON);
            this.tableCATEGORIE = new CATEGORIEDataTable();
            base.Tables.Add(this.tableCATEGORIE);
            this.tableCLIENT = new CLIENTDataTable();
            base.Tables.Add(this.tableCLIENT);
            this.tableCOMMANDE = new COMMANDEDataTable();
            base.Tables.Add(this.tableCOMMANDE);
            this.tableEMPLOYE = new EMPLOYEDataTable();
            base.Tables.Add(this.tableEMPLOYE);
            this.tableFACTURE = new FACTUREDataTable();
            base.Tables.Add(this.tableFACTURE);
            this.tableFONCTIONALITE_EMPLOYE = new FONCTIONALITE_EMPLOYEDataTable();
            base.Tables.Add(this.tableFONCTIONALITE_EMPLOYE);
            this.tableFOURNISSEUR = new FOURNISSEURDataTable();
            base.Tables.Add(this.tableFOURNISSEUR);
            this.tableLG_BON_LIVRAISON = new LG_BON_LIVRAISONDataTable();
            base.Tables.Add(this.tableLG_BON_LIVRAISON);
            this.tableLIGNE_COMMANDE = new LIGNE_COMMANDEDataTable();
            base.Tables.Add(this.tableLIGNE_COMMANDE);
            this.tableLIGNE_FACTURE = new LIGNE_FACTUREDataTable();
            base.Tables.Add(this.tableLIGNE_FACTURE);
            this.tableLIVRAISON = new LIVRAISONDataTable();
            base.Tables.Add(this.tableLIVRAISON);
            this.tableLIVRAISON_CLIENT = new LIVRAISON_CLIENTDataTable();
            base.Tables.Add(this.tableLIVRAISON_CLIENT);
            this.tableMAGAZIN = new MAGAZINDataTable();
            base.Tables.Add(this.tableMAGAZIN);
            this.tableREGLEMENT_CLIENT = new REGLEMENT_CLIENTDataTable();
            base.Tables.Add(this.tableREGLEMENT_CLIENT);
            this.tableSOCIETE = new SOCIETEDataTable();
            base.Tables.Add(this.tableSOCIETE);
            this.tableSTOCK = new STOCKDataTable();
            base.Tables.Add(this.tableSTOCK);
            this.tableTACHE = new TACHEDataTable();
            base.Tables.Add(this.tableTACHE);
            this.tableUTILISATEUR = new UTILISATEURDataTable();
            base.Tables.Add(this.tableUTILISATEUR);
            this.relationFK_ARTICLE_CATEGORIE = new System.Data.DataRelation("FK_ARTICLE_CATEGORIE", new System.Data.DataColumn[] {
                        this.tableCATEGORIE.CODE_CATEGColumn}, new System.Data.DataColumn[] {
                        this.tableARTICLE.CODE_CATEGColumn}, false);
            this.Relations.Add(this.relationFK_ARTICLE_CATEGORIE);
            this.relationFK_ARTICLE_FOURNISSEUR = new System.Data.DataRelation("FK_ARTICLE_FOURNISSEUR", new System.Data.DataColumn[] {
                        this.tableFOURNISSEUR.CODE_FOURNISSEURColumn}, new System.Data.DataColumn[] {
                        this.tableARTICLE.CODE_FOURNISSEURColumn}, false);
            this.Relations.Add(this.relationFK_ARTICLE_FOURNISSEUR);
            this.relationFK_BON_DE_LIVRAISON_CLIENT = new System.Data.DataRelation("FK_BON_DE_LIVRAISON_CLIENT", new System.Data.DataColumn[] {
                        this.tableCLIENT.CODE_CLIENTColumn}, new System.Data.DataColumn[] {
                        this.tableBON_DE_LIVRAISON.CODE_CLIENTColumn}, false);
            this.Relations.Add(this.relationFK_BON_DE_LIVRAISON_CLIENT);
            this.relationFK_COMMANDE_CLIENT = new System.Data.DataRelation("FK_COMMANDE_CLIENT", new System.Data.DataColumn[] {
                        this.tableCLIENT.CODE_CLIENTColumn}, new System.Data.DataColumn[] {
                        this.tableCOMMANDE.CODE_CLIENTColumn}, false);
            this.Relations.Add(this.relationFK_COMMANDE_CLIENT);
            this.relationFK_COMMANDE_EMPLOYE = new System.Data.DataRelation("FK_COMMANDE_EMPLOYE", new System.Data.DataColumn[] {
                        this.tableEMPLOYE.CODE_EMPLOYEColumn}, new System.Data.DataColumn[] {
                        this.tableCOMMANDE.CODE_EMPLOYEColumn}, false);
            this.Relations.Add(this.relationFK_COMMANDE_EMPLOYE);
            this.relationFK_EMPLOYE_FONCTIONALITE_EMPLOYE = new System.Data.DataRelation("FK_EMPLOYE_FONCTIONALITE_EMPLOYE", new System.Data.DataColumn[] {
                        this.tableFONCTIONALITE_EMPLOYE.CODE_FONCTIONColumn}, new System.Data.DataColumn[] {
                        this.tableEMPLOYE.CODE_FONCTIONColumn}, false);
            this.Relations.Add(this.relationFK_EMPLOYE_FONCTIONALITE_EMPLOYE);
            this.relationFK_EMPLOYE_MAGAZIN = new System.Data.DataRelation("FK_EMPLOYE_MAGAZIN", new System.Data.DataColumn[] {
                        this.tableMAGAZIN.CODE_MAGColumn}, new System.Data.DataColumn[] {
                        this.tableEMPLOYE.CODE_MAGColumn}, false);
            this.Relations.Add(this.relationFK_EMPLOYE_MAGAZIN);
            this.relationFK_EMPLOYE_SOCIETE = new System.Data.DataRelation("FK_EMPLOYE_SOCIETE", new System.Data.DataColumn[] {
                        this.tableSOCIETE.CODE_SOCIETEColumn}, new System.Data.DataColumn[] {
                        this.tableEMPLOYE.CODE_SOCIETEColumn}, false);
            this.Relations.Add(this.relationFK_EMPLOYE_SOCIETE);
            this.relationFK_FACTURE_CLIENT = new System.Data.DataRelation("FK_FACTURE_CLIENT", new System.Data.DataColumn[] {
                        this.tableCLIENT.CODE_CLIENTColumn}, new System.Data.DataColumn[] {
                        this.tableFACTURE.CODE_CLIENTColumn}, false);
            this.Relations.Add(this.relationFK_FACTURE_CLIENT);
            this.relationFK_FACTURE_EMPLOYE = new System.Data.DataRelation("FK_FACTURE_EMPLOYE", new System.Data.DataColumn[] {
                        this.tableEMPLOYE.CODE_EMPLOYEColumn}, new System.Data.DataColumn[] {
                        this.tableFACTURE.CODE_EMPLOYEColumn}, false);
            this.Relations.Add(this.relationFK_FACTURE_EMPLOYE);
            this.relationFK_FACTURE_REGLEMENT_CLIENT = new System.Data.DataRelation("FK_FACTURE_REGLEMENT_CLIENT", new System.Data.DataColumn[] {
                        this.tableREGLEMENT_CLIENT.CODE_REGLEMENT_CLIENTColumn}, new System.Data.DataColumn[] {
                        this.tableFACTURE.CODE_REGLEMENT_CLIENTColumn}, false);
            this.Relations.Add(this.relationFK_FACTURE_REGLEMENT_CLIENT);
            this.relationFK_LG_BON_LIVRAISON_ARTICLE = new System.Data.DataRelation("FK_LG_BON_LIVRAISON_ARTICLE", new System.Data.DataColumn[] {
                        this.tableARTICLE.CODE_ARTICLEColumn}, new System.Data.DataColumn[] {
                        this.tableLG_BON_LIVRAISON.CODE_ARTICLEColumn}, false);
            this.Relations.Add(this.relationFK_LG_BON_LIVRAISON_ARTICLE);
            this.relationFK_LG_BON_LIVRAISON_BON_DE_LIVRAISON = new System.Data.DataRelation("FK_LG_BON_LIVRAISON_BON_DE_LIVRAISON", new System.Data.DataColumn[] {
                        this.tableBON_DE_LIVRAISON.CODE_B_LIVColumn}, new System.Data.DataColumn[] {
                        this.tableLG_BON_LIVRAISON.CODE_B_LIVColumn}, false);
            this.Relations.Add(this.relationFK_LG_BON_LIVRAISON_BON_DE_LIVRAISON);
            this.relationFK_LIGNE_COMMANDE_ARTICLE = new System.Data.DataRelation("FK_LIGNE_COMMANDE_ARTICLE", new System.Data.DataColumn[] {
                        this.tableARTICLE.CODE_ARTICLEColumn}, new System.Data.DataColumn[] {
                        this.tableLIGNE_COMMANDE.CODE_ARTICLEColumn}, false);
            this.Relations.Add(this.relationFK_LIGNE_COMMANDE_ARTICLE);
            this.relationFK_LIGNE_COMMANDE_COMMANDE = new System.Data.DataRelation("FK_LIGNE_COMMANDE_COMMANDE", new System.Data.DataColumn[] {
                        this.tableCOMMANDE.CODE_COMMANDEColumn}, new System.Data.DataColumn[] {
                        this.tableLIGNE_COMMANDE.CODE_COMMANDEColumn}, false);
            this.Relations.Add(this.relationFK_LIGNE_COMMANDE_COMMANDE);
            this.relationFK_LIGNE_FACTURE_ARTICLE = new System.Data.DataRelation("FK_LIGNE_FACTURE_ARTICLE", new System.Data.DataColumn[] {
                        this.tableARTICLE.CODE_ARTICLEColumn}, new System.Data.DataColumn[] {
                        this.tableLIGNE_FACTURE.CODE_ARTICLEColumn}, false);
            this.Relations.Add(this.relationFK_LIGNE_FACTURE_ARTICLE);
            this.relationFK_LIGNE_FACTURE_FACTURE = new System.Data.DataRelation("FK_LIGNE_FACTURE_FACTURE", new System.Data.DataColumn[] {
                        this.tableFACTURE.CODE_FACTUREColumn}, new System.Data.DataColumn[] {
                        this.tableLIGNE_FACTURE.CODE_FACTUREColumn}, false);
            this.Relations.Add(this.relationFK_LIGNE_FACTURE_FACTURE);
            this.relationFK_LIVRAISON_CLIENT_BON_DE_LIVRAISON = new System.Data.DataRelation("FK_LIVRAISON_CLIENT_BON_DE_LIVRAISON", new System.Data.DataColumn[] {
                        this.tableBON_DE_LIVRAISON.CODE_B_LIVColumn}, new System.Data.DataColumn[] {
                        this.tableLIVRAISON_CLIENT.CODE_B_LIVColumn}, false);
            this.Relations.Add(this.relationFK_LIVRAISON_CLIENT_BON_DE_LIVRAISON);
            this.relationFK_LIVRAISON_CLIENT_COMMANDE = new System.Data.DataRelation("FK_LIVRAISON_CLIENT_COMMANDE", new System.Data.DataColumn[] {
                        this.tableCOMMANDE.CODE_COMMANDEColumn}, new System.Data.DataColumn[] {
                        this.tableLIVRAISON_CLIENT.CODE_COMMANDEColumn}, false);
            this.Relations.Add(this.relationFK_LIVRAISON_CLIENT_COMMANDE);
            this.relationFK_LIVRAISON_CLIENT_EMPLOYE = new System.Data.DataRelation("FK_LIVRAISON_CLIENT_EMPLOYE", new System.Data.DataColumn[] {
                        this.tableEMPLOYE.CODE_EMPLOYEColumn}, new System.Data.DataColumn[] {
                        this.tableLIVRAISON_CLIENT.CODE_EMPLOYEColumn}, false);
            this.Relations.Add(this.relationFK_LIVRAISON_CLIENT_EMPLOYE);
            this.relationFK_MAGAZIN_SOCIETE = new System.Data.DataRelation("FK_MAGAZIN_SOCIETE", new System.Data.DataColumn[] {
                        this.tableSOCIETE.CODE_SOCIETEColumn}, new System.Data.DataColumn[] {
                        this.tableMAGAZIN.CODE_MAGColumn}, false);
            this.Relations.Add(this.relationFK_MAGAZIN_SOCIETE);
            this.relationFK_STOCK_ARTICLE = new System.Data.DataRelation("FK_STOCK_ARTICLE", new System.Data.DataColumn[] {
                        this.tableARTICLE.CODE_ARTICLEColumn}, new System.Data.DataColumn[] {
                        this.tableSTOCK.CODE_ARTICLEColumn}, false);
            this.Relations.Add(this.relationFK_STOCK_ARTICLE);
            this.relationFK_STOCK_MAGAZIN = new System.Data.DataRelation("FK_STOCK_MAGAZIN", new System.Data.DataColumn[] {
                        this.tableMAGAZIN.CODE_MAGColumn}, new System.Data.DataColumn[] {
                        this.tableSTOCK.CODE_MAGColumn}, false);
            this.Relations.Add(this.relationFK_STOCK_MAGAZIN);
            this.relationFK_TACHE_FONCTIONALITE_EMPLOYE = new System.Data.DataRelation("FK_TACHE_FONCTIONALITE_EMPLOYE", new System.Data.DataColumn[] {
                        this.tableFONCTIONALITE_EMPLOYE.CODE_FONCTIONColumn}, new System.Data.DataColumn[] {
                        this.tableTACHE.CODE_FONCTIONColumn}, false);
            this.Relations.Add(this.relationFK_TACHE_FONCTIONALITE_EMPLOYE);
            this.relationFK_UTILISATEUR_SOCIETE = new System.Data.DataRelation("FK_UTILISATEUR_SOCIETE", new System.Data.DataColumn[] {
                        this.tableSOCIETE.CODE_SOCIETEColumn}, new System.Data.DataColumn[] {
                        this.tableUTILISATEUR.CODE_SOCIETEColumn}, false);
            this.Relations.Add(this.relationFK_UTILISATEUR_SOCIETE);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeARTICLE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBON_DE_LIVRAISON() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCATEGORIE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCLIENT() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOMMANDE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEMPLOYE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFACTURE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFONCTIONALITE_EMPLOYE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFOURNISSEUR() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLG_BON_LIVRAISON() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLIGNE_COMMANDE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLIGNE_FACTURE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLIVRAISON() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLIVRAISON_CLIENT() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMAGAZIN() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeREGLEMENT_CLIENT() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSOCIETE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSTOCK() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTACHE() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUTILISATEUR() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ARTICLERowChangeEventHandler(object sender, ARTICLERowChangeEvent e);
        
        public delegate void BON_DE_LIVRAISONRowChangeEventHandler(object sender, BON_DE_LIVRAISONRowChangeEvent e);
        
        public delegate void CATEGORIERowChangeEventHandler(object sender, CATEGORIERowChangeEvent e);
        
        public delegate void CLIENTRowChangeEventHandler(object sender, CLIENTRowChangeEvent e);
        
        public delegate void COMMANDERowChangeEventHandler(object sender, COMMANDERowChangeEvent e);
        
        public delegate void EMPLOYERowChangeEventHandler(object sender, EMPLOYERowChangeEvent e);
        
        public delegate void FACTURERowChangeEventHandler(object sender, FACTURERowChangeEvent e);
        
        public delegate void FONCTIONALITE_EMPLOYERowChangeEventHandler(object sender, FONCTIONALITE_EMPLOYERowChangeEvent e);
        
        public delegate void FOURNISSEURRowChangeEventHandler(object sender, FOURNISSEURRowChangeEvent e);
        
        public delegate void LG_BON_LIVRAISONRowChangeEventHandler(object sender, LG_BON_LIVRAISONRowChangeEvent e);
        
        public delegate void LIGNE_COMMANDERowChangeEventHandler(object sender, LIGNE_COMMANDERowChangeEvent e);
        
        public delegate void LIGNE_FACTURERowChangeEventHandler(object sender, LIGNE_FACTURERowChangeEvent e);
        
        public delegate void LIVRAISONRowChangeEventHandler(object sender, LIVRAISONRowChangeEvent e);
        
        public delegate void LIVRAISON_CLIENTRowChangeEventHandler(object sender, LIVRAISON_CLIENTRowChangeEvent e);
        
        public delegate void MAGAZINRowChangeEventHandler(object sender, MAGAZINRowChangeEvent e);
        
        public delegate void REGLEMENT_CLIENTRowChangeEventHandler(object sender, REGLEMENT_CLIENTRowChangeEvent e);
        
        public delegate void SOCIETERowChangeEventHandler(object sender, SOCIETERowChangeEvent e);
        
        public delegate void STOCKRowChangeEventHandler(object sender, STOCKRowChangeEvent e);
        
        public delegate void TACHERowChangeEventHandler(object sender, TACHERowChangeEvent e);
        
        public delegate void UTILISATEURRowChangeEventHandler(object sender, UTILISATEURRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ARTICLEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_ARTICLE;
            
            private System.Data.DataColumn columnREF_ARTICLE;
            
            private System.Data.DataColumn columnDESIGNATION;
            
            private System.Data.DataColumn columnFAMILLE_ARTICLE;
            
            private System.Data.DataColumn columnDESCRIPTION;
            
            private System.Data.DataColumn columnCODE_BARRE_ARTICLE;
            
            private System.Data.DataColumn columnQTE_ARTICLE;
            
            private System.Data.DataColumn columnQTE_MIN_ARTICLE;
            
            private System.Data.DataColumn columnPHOTO_ARTICLE;
            
            private System.Data.DataColumn columnPRIX_HT_ARTICLE;
            
            private System.Data.DataColumn columnTVA_ARTICLE;
            
            private System.Data.DataColumn columnETAT_ARTICLE;
            
            private System.Data.DataColumn columnCODE_CATEG;
            
            private System.Data.DataColumn columnCODE_MAG;
            
            private System.Data.DataColumn columnCODE_FOURNISSEUR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLEDataTable() {
                this.TableName = "ARTICLE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ARTICLEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ARTICLEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_ARTICLEColumn {
                get {
                    return this.columnCODE_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn REF_ARTICLEColumn {
                get {
                    return this.columnREF_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESIGNATIONColumn {
                get {
                    return this.columnDESIGNATION;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FAMILLE_ARTICLEColumn {
                get {
                    return this.columnFAMILLE_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_BARRE_ARTICLEColumn {
                get {
                    return this.columnCODE_BARRE_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QTE_ARTICLEColumn {
                get {
                    return this.columnQTE_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QTE_MIN_ARTICLEColumn {
                get {
                    return this.columnQTE_MIN_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PHOTO_ARTICLEColumn {
                get {
                    return this.columnPHOTO_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRIX_HT_ARTICLEColumn {
                get {
                    return this.columnPRIX_HT_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TVA_ARTICLEColumn {
                get {
                    return this.columnTVA_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ETAT_ARTICLEColumn {
                get {
                    return this.columnETAT_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_CATEGColumn {
                get {
                    return this.columnCODE_CATEG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_MAGColumn {
                get {
                    return this.columnCODE_MAG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_FOURNISSEURColumn {
                get {
                    return this.columnCODE_FOURNISSEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERow this[int index] {
                get {
                    return ((ARTICLERow)(this.Rows[index]));
                }
            }
            
            public event ARTICLERowChangeEventHandler ARTICLERowChanging;
            
            public event ARTICLERowChangeEventHandler ARTICLERowChanged;
            
            public event ARTICLERowChangeEventHandler ARTICLERowDeleting;
            
            public event ARTICLERowChangeEventHandler ARTICLERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddARTICLERow(ARTICLERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERow AddARTICLERow(decimal CODE_ARTICLE, string REF_ARTICLE, string DESIGNATION, string FAMILLE_ARTICLE, string DESCRIPTION, string CODE_BARRE_ARTICLE, decimal QTE_ARTICLE, decimal QTE_MIN_ARTICLE, byte[] PHOTO_ARTICLE, decimal PRIX_HT_ARTICLE, decimal TVA_ARTICLE, bool ETAT_ARTICLE, CATEGORIERow parentCATEGORIERowByFK_ARTICLE_CATEGORIE, decimal CODE_MAG, FOURNISSEURRow parentFOURNISSEURRowByFK_ARTICLE_FOURNISSEUR) {
                ARTICLERow rowARTICLERow = ((ARTICLERow)(this.NewRow()));
                rowARTICLERow.ItemArray = new object[] {
                        CODE_ARTICLE,
                        REF_ARTICLE,
                        DESIGNATION,
                        FAMILLE_ARTICLE,
                        DESCRIPTION,
                        CODE_BARRE_ARTICLE,
                        QTE_ARTICLE,
                        QTE_MIN_ARTICLE,
                        PHOTO_ARTICLE,
                        PRIX_HT_ARTICLE,
                        TVA_ARTICLE,
                        ETAT_ARTICLE,
                        parentCATEGORIERowByFK_ARTICLE_CATEGORIE[0],
                        CODE_MAG,
                        parentFOURNISSEURRowByFK_ARTICLE_FOURNISSEUR[0]};
                this.Rows.Add(rowARTICLERow);
                return rowARTICLERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERow FindByCODE_ARTICLE(decimal CODE_ARTICLE) {
                return ((ARTICLERow)(this.Rows.Find(new object[] {
                            CODE_ARTICLE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ARTICLEDataTable cln = ((ARTICLEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ARTICLEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_ARTICLE = base.Columns["CODE_ARTICLE"];
                this.columnREF_ARTICLE = base.Columns["REF_ARTICLE"];
                this.columnDESIGNATION = base.Columns["DESIGNATION"];
                this.columnFAMILLE_ARTICLE = base.Columns["FAMILLE_ARTICLE"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnCODE_BARRE_ARTICLE = base.Columns["CODE_BARRE_ARTICLE"];
                this.columnQTE_ARTICLE = base.Columns["QTE_ARTICLE"];
                this.columnQTE_MIN_ARTICLE = base.Columns["QTE_MIN_ARTICLE"];
                this.columnPHOTO_ARTICLE = base.Columns["PHOTO_ARTICLE"];
                this.columnPRIX_HT_ARTICLE = base.Columns["PRIX_HT_ARTICLE"];
                this.columnTVA_ARTICLE = base.Columns["TVA_ARTICLE"];
                this.columnETAT_ARTICLE = base.Columns["ETAT_ARTICLE"];
                this.columnCODE_CATEG = base.Columns["CODE_CATEG"];
                this.columnCODE_MAG = base.Columns["CODE_MAG"];
                this.columnCODE_FOURNISSEUR = base.Columns["CODE_FOURNISSEUR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_ARTICLE = new System.Data.DataColumn("CODE_ARTICLE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_ARTICLE);
                this.columnREF_ARTICLE = new System.Data.DataColumn("REF_ARTICLE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnREF_ARTICLE);
                this.columnDESIGNATION = new System.Data.DataColumn("DESIGNATION", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESIGNATION);
                this.columnFAMILLE_ARTICLE = new System.Data.DataColumn("FAMILLE_ARTICLE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFAMILLE_ARTICLE);
                this.columnDESCRIPTION = new System.Data.DataColumn("DESCRIPTION", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnCODE_BARRE_ARTICLE = new System.Data.DataColumn("CODE_BARRE_ARTICLE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_BARRE_ARTICLE);
                this.columnQTE_ARTICLE = new System.Data.DataColumn("QTE_ARTICLE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTE_ARTICLE);
                this.columnQTE_MIN_ARTICLE = new System.Data.DataColumn("QTE_MIN_ARTICLE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTE_MIN_ARTICLE);
                this.columnPHOTO_ARTICLE = new System.Data.DataColumn("PHOTO_ARTICLE", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHOTO_ARTICLE);
                this.columnPRIX_HT_ARTICLE = new System.Data.DataColumn("PRIX_HT_ARTICLE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIX_HT_ARTICLE);
                this.columnTVA_ARTICLE = new System.Data.DataColumn("TVA_ARTICLE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTVA_ARTICLE);
                this.columnETAT_ARTICLE = new System.Data.DataColumn("ETAT_ARTICLE", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnETAT_ARTICLE);
                this.columnCODE_CATEG = new System.Data.DataColumn("CODE_CATEG", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_CATEG);
                this.columnCODE_MAG = new System.Data.DataColumn("CODE_MAG", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_MAG);
                this.columnCODE_FOURNISSEUR = new System.Data.DataColumn("CODE_FOURNISSEUR", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_FOURNISSEUR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_ARTICLE}, true));
                this.columnCODE_ARTICLE.AllowDBNull = false;
                this.columnCODE_ARTICLE.Unique = true;
                this.columnREF_ARTICLE.AllowDBNull = false;
                this.columnREF_ARTICLE.MaxLength = 2147483647;
                this.columnDESIGNATION.AllowDBNull = false;
                this.columnDESIGNATION.MaxLength = 2147483647;
                this.columnFAMILLE_ARTICLE.MaxLength = 2147483647;
                this.columnDESCRIPTION.MaxLength = 2147483647;
                this.columnCODE_BARRE_ARTICLE.MaxLength = 2147483647;
                this.columnQTE_ARTICLE.AllowDBNull = false;
                this.columnPRIX_HT_ARTICLE.AllowDBNull = false;
                this.columnTVA_ARTICLE.AllowDBNull = false;
                this.columnETAT_ARTICLE.AllowDBNull = false;
                this.columnCODE_CATEG.AllowDBNull = false;
                this.columnCODE_MAG.AllowDBNull = false;
                this.columnCODE_FOURNISSEUR.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERow NewARTICLERow() {
                return ((ARTICLERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ARTICLERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ARTICLERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ARTICLERowChanged != null)) {
                    this.ARTICLERowChanged(this, new ARTICLERowChangeEvent(((ARTICLERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ARTICLERowChanging != null)) {
                    this.ARTICLERowChanging(this, new ARTICLERowChangeEvent(((ARTICLERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ARTICLERowDeleted != null)) {
                    this.ARTICLERowDeleted(this, new ARTICLERowChangeEvent(((ARTICLERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ARTICLERowDeleting != null)) {
                    this.ARTICLERowDeleting(this, new ARTICLERowChangeEvent(((ARTICLERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveARTICLERow(ARTICLERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ARTICLEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BON_DE_LIVRAISONDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_B_LIV;
            
            private System.Data.DataColumn columnDATE_B_LIV;
            
            private System.Data.DataColumn columnCODE_CLIENT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BON_DE_LIVRAISONDataTable() {
                this.TableName = "BON_DE_LIVRAISON";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BON_DE_LIVRAISONDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BON_DE_LIVRAISONDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_B_LIVColumn {
                get {
                    return this.columnCODE_B_LIV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_B_LIVColumn {
                get {
                    return this.columnDATE_B_LIV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_CLIENTColumn {
                get {
                    return this.columnCODE_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BON_DE_LIVRAISONRow this[int index] {
                get {
                    return ((BON_DE_LIVRAISONRow)(this.Rows[index]));
                }
            }
            
            public event BON_DE_LIVRAISONRowChangeEventHandler BON_DE_LIVRAISONRowChanging;
            
            public event BON_DE_LIVRAISONRowChangeEventHandler BON_DE_LIVRAISONRowChanged;
            
            public event BON_DE_LIVRAISONRowChangeEventHandler BON_DE_LIVRAISONRowDeleting;
            
            public event BON_DE_LIVRAISONRowChangeEventHandler BON_DE_LIVRAISONRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBON_DE_LIVRAISONRow(BON_DE_LIVRAISONRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BON_DE_LIVRAISONRow AddBON_DE_LIVRAISONRow(string CODE_B_LIV, string DATE_B_LIV, CLIENTRow parentCLIENTRowByFK_BON_DE_LIVRAISON_CLIENT) {
                BON_DE_LIVRAISONRow rowBON_DE_LIVRAISONRow = ((BON_DE_LIVRAISONRow)(this.NewRow()));
                rowBON_DE_LIVRAISONRow.ItemArray = new object[] {
                        CODE_B_LIV,
                        DATE_B_LIV,
                        parentCLIENTRowByFK_BON_DE_LIVRAISON_CLIENT[0]};
                this.Rows.Add(rowBON_DE_LIVRAISONRow);
                return rowBON_DE_LIVRAISONRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BON_DE_LIVRAISONRow FindByCODE_B_LIV(string CODE_B_LIV) {
                return ((BON_DE_LIVRAISONRow)(this.Rows.Find(new object[] {
                            CODE_B_LIV})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                BON_DE_LIVRAISONDataTable cln = ((BON_DE_LIVRAISONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new BON_DE_LIVRAISONDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_B_LIV = base.Columns["CODE_B_LIV"];
                this.columnDATE_B_LIV = base.Columns["DATE_B_LIV"];
                this.columnCODE_CLIENT = base.Columns["CODE_CLIENT"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_B_LIV = new System.Data.DataColumn("CODE_B_LIV", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_B_LIV);
                this.columnDATE_B_LIV = new System.Data.DataColumn("DATE_B_LIV", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_B_LIV);
                this.columnCODE_CLIENT = new System.Data.DataColumn("CODE_CLIENT", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_CLIENT);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_B_LIV}, true));
                this.columnCODE_B_LIV.AllowDBNull = false;
                this.columnCODE_B_LIV.Unique = true;
                this.columnCODE_B_LIV.MaxLength = 450;
                this.columnDATE_B_LIV.AllowDBNull = false;
                this.columnDATE_B_LIV.MaxLength = 10;
                this.columnCODE_CLIENT.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BON_DE_LIVRAISONRow NewBON_DE_LIVRAISONRow() {
                return ((BON_DE_LIVRAISONRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BON_DE_LIVRAISONRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(BON_DE_LIVRAISONRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BON_DE_LIVRAISONRowChanged != null)) {
                    this.BON_DE_LIVRAISONRowChanged(this, new BON_DE_LIVRAISONRowChangeEvent(((BON_DE_LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BON_DE_LIVRAISONRowChanging != null)) {
                    this.BON_DE_LIVRAISONRowChanging(this, new BON_DE_LIVRAISONRowChangeEvent(((BON_DE_LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BON_DE_LIVRAISONRowDeleted != null)) {
                    this.BON_DE_LIVRAISONRowDeleted(this, new BON_DE_LIVRAISONRowChangeEvent(((BON_DE_LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BON_DE_LIVRAISONRowDeleting != null)) {
                    this.BON_DE_LIVRAISONRowDeleting(this, new BON_DE_LIVRAISONRowChangeEvent(((BON_DE_LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBON_DE_LIVRAISONRow(BON_DE_LIVRAISONRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BON_DE_LIVRAISONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CATEGORIEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_CATEG;
            
            private System.Data.DataColumn columnLIB_CATEG;
            
            private System.Data.DataColumn columnDESCRIPTION_CATEG;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIEDataTable() {
                this.TableName = "CATEGORIE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CATEGORIEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CATEGORIEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_CATEGColumn {
                get {
                    return this.columnCODE_CATEG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LIB_CATEGColumn {
                get {
                    return this.columnLIB_CATEG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTION_CATEGColumn {
                get {
                    return this.columnDESCRIPTION_CATEG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIERow this[int index] {
                get {
                    return ((CATEGORIERow)(this.Rows[index]));
                }
            }
            
            public event CATEGORIERowChangeEventHandler CATEGORIERowChanging;
            
            public event CATEGORIERowChangeEventHandler CATEGORIERowChanged;
            
            public event CATEGORIERowChangeEventHandler CATEGORIERowDeleting;
            
            public event CATEGORIERowChangeEventHandler CATEGORIERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCATEGORIERow(CATEGORIERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIERow AddCATEGORIERow(decimal CODE_CATEG, string LIB_CATEG, string DESCRIPTION_CATEG) {
                CATEGORIERow rowCATEGORIERow = ((CATEGORIERow)(this.NewRow()));
                rowCATEGORIERow.ItemArray = new object[] {
                        CODE_CATEG,
                        LIB_CATEG,
                        DESCRIPTION_CATEG};
                this.Rows.Add(rowCATEGORIERow);
                return rowCATEGORIERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIERow FindByCODE_CATEG(decimal CODE_CATEG) {
                return ((CATEGORIERow)(this.Rows.Find(new object[] {
                            CODE_CATEG})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CATEGORIEDataTable cln = ((CATEGORIEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CATEGORIEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_CATEG = base.Columns["CODE_CATEG"];
                this.columnLIB_CATEG = base.Columns["LIB_CATEG"];
                this.columnDESCRIPTION_CATEG = base.Columns["DESCRIPTION_CATEG"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_CATEG = new System.Data.DataColumn("CODE_CATEG", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_CATEG);
                this.columnLIB_CATEG = new System.Data.DataColumn("LIB_CATEG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIB_CATEG);
                this.columnDESCRIPTION_CATEG = new System.Data.DataColumn("DESCRIPTION_CATEG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION_CATEG);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_CATEG}, true));
                this.columnCODE_CATEG.AllowDBNull = false;
                this.columnCODE_CATEG.Unique = true;
                this.columnLIB_CATEG.AllowDBNull = false;
                this.columnLIB_CATEG.MaxLength = 10;
                this.columnDESCRIPTION_CATEG.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIERow NewCATEGORIERow() {
                return ((CATEGORIERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CATEGORIERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CATEGORIERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CATEGORIERowChanged != null)) {
                    this.CATEGORIERowChanged(this, new CATEGORIERowChangeEvent(((CATEGORIERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CATEGORIERowChanging != null)) {
                    this.CATEGORIERowChanging(this, new CATEGORIERowChangeEvent(((CATEGORIERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CATEGORIERowDeleted != null)) {
                    this.CATEGORIERowDeleted(this, new CATEGORIERowChangeEvent(((CATEGORIERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CATEGORIERowDeleting != null)) {
                    this.CATEGORIERowDeleting(this, new CATEGORIERowChangeEvent(((CATEGORIERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCATEGORIERow(CATEGORIERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CATEGORIEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CLIENTDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_CLIENT;
            
            private System.Data.DataColumn columnRS_CLIENT;
            
            private System.Data.DataColumn columnADRESSE_CLIENT;
            
            private System.Data.DataColumn columnCP_CLIENT;
            
            private System.Data.DataColumn columnTEL_CLIENT;
            
            private System.Data.DataColumn columnFAX_CLIENT;
            
            private System.Data.DataColumn columnEMAIL_CLIENT;
            
            private System.Data.DataColumn columnEXO_CLIENT;
            
            private System.Data.DataColumn columnATTEST_EXO_CLIENT;
            
            private System.Data.DataColumn columnCODE_DOUANE_CLIENT;
            
            private System.Data.DataColumn columnCODE_TVA_CLIENT;
            
            private System.Data.DataColumn columnETAT_CLIENT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTDataTable() {
                this.TableName = "CLIENT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CLIENTDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CLIENTDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_CLIENTColumn {
                get {
                    return this.columnCODE_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RS_CLIENTColumn {
                get {
                    return this.columnRS_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ADRESSE_CLIENTColumn {
                get {
                    return this.columnADRESSE_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CP_CLIENTColumn {
                get {
                    return this.columnCP_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TEL_CLIENTColumn {
                get {
                    return this.columnTEL_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FAX_CLIENTColumn {
                get {
                    return this.columnFAX_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EMAIL_CLIENTColumn {
                get {
                    return this.columnEMAIL_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EXO_CLIENTColumn {
                get {
                    return this.columnEXO_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ATTEST_EXO_CLIENTColumn {
                get {
                    return this.columnATTEST_EXO_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_DOUANE_CLIENTColumn {
                get {
                    return this.columnCODE_DOUANE_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_TVA_CLIENTColumn {
                get {
                    return this.columnCODE_TVA_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ETAT_CLIENTColumn {
                get {
                    return this.columnETAT_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTRow this[int index] {
                get {
                    return ((CLIENTRow)(this.Rows[index]));
                }
            }
            
            public event CLIENTRowChangeEventHandler CLIENTRowChanging;
            
            public event CLIENTRowChangeEventHandler CLIENTRowChanged;
            
            public event CLIENTRowChangeEventHandler CLIENTRowDeleting;
            
            public event CLIENTRowChangeEventHandler CLIENTRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCLIENTRow(CLIENTRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTRow AddCLIENTRow(decimal CODE_CLIENT, string RS_CLIENT, string ADRESSE_CLIENT, string CP_CLIENT, string TEL_CLIENT, string FAX_CLIENT, string EMAIL_CLIENT, bool EXO_CLIENT, string ATTEST_EXO_CLIENT, string CODE_DOUANE_CLIENT, string CODE_TVA_CLIENT, bool ETAT_CLIENT) {
                CLIENTRow rowCLIENTRow = ((CLIENTRow)(this.NewRow()));
                rowCLIENTRow.ItemArray = new object[] {
                        CODE_CLIENT,
                        RS_CLIENT,
                        ADRESSE_CLIENT,
                        CP_CLIENT,
                        TEL_CLIENT,
                        FAX_CLIENT,
                        EMAIL_CLIENT,
                        EXO_CLIENT,
                        ATTEST_EXO_CLIENT,
                        CODE_DOUANE_CLIENT,
                        CODE_TVA_CLIENT,
                        ETAT_CLIENT};
                this.Rows.Add(rowCLIENTRow);
                return rowCLIENTRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTRow FindByCODE_CLIENT(decimal CODE_CLIENT) {
                return ((CLIENTRow)(this.Rows.Find(new object[] {
                            CODE_CLIENT})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CLIENTDataTable cln = ((CLIENTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CLIENTDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_CLIENT = base.Columns["CODE_CLIENT"];
                this.columnRS_CLIENT = base.Columns["RS_CLIENT"];
                this.columnADRESSE_CLIENT = base.Columns["ADRESSE_CLIENT"];
                this.columnCP_CLIENT = base.Columns["CP_CLIENT"];
                this.columnTEL_CLIENT = base.Columns["TEL_CLIENT"];
                this.columnFAX_CLIENT = base.Columns["FAX_CLIENT"];
                this.columnEMAIL_CLIENT = base.Columns["EMAIL_CLIENT"];
                this.columnEXO_CLIENT = base.Columns["EXO_CLIENT"];
                this.columnATTEST_EXO_CLIENT = base.Columns["ATTEST_EXO_CLIENT"];
                this.columnCODE_DOUANE_CLIENT = base.Columns["CODE_DOUANE_CLIENT"];
                this.columnCODE_TVA_CLIENT = base.Columns["CODE_TVA_CLIENT"];
                this.columnETAT_CLIENT = base.Columns["ETAT_CLIENT"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_CLIENT = new System.Data.DataColumn("CODE_CLIENT", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_CLIENT);
                this.columnRS_CLIENT = new System.Data.DataColumn("RS_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRS_CLIENT);
                this.columnADRESSE_CLIENT = new System.Data.DataColumn("ADRESSE_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnADRESSE_CLIENT);
                this.columnCP_CLIENT = new System.Data.DataColumn("CP_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCP_CLIENT);
                this.columnTEL_CLIENT = new System.Data.DataColumn("TEL_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL_CLIENT);
                this.columnFAX_CLIENT = new System.Data.DataColumn("FAX_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFAX_CLIENT);
                this.columnEMAIL_CLIENT = new System.Data.DataColumn("EMAIL_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL_CLIENT);
                this.columnEXO_CLIENT = new System.Data.DataColumn("EXO_CLIENT", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXO_CLIENT);
                this.columnATTEST_EXO_CLIENT = new System.Data.DataColumn("ATTEST_EXO_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnATTEST_EXO_CLIENT);
                this.columnCODE_DOUANE_CLIENT = new System.Data.DataColumn("CODE_DOUANE_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_DOUANE_CLIENT);
                this.columnCODE_TVA_CLIENT = new System.Data.DataColumn("CODE_TVA_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_TVA_CLIENT);
                this.columnETAT_CLIENT = new System.Data.DataColumn("ETAT_CLIENT", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnETAT_CLIENT);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_CLIENT}, true));
                this.columnCODE_CLIENT.AllowDBNull = false;
                this.columnCODE_CLIENT.Unique = true;
                this.columnRS_CLIENT.AllowDBNull = false;
                this.columnRS_CLIENT.MaxLength = 2147483647;
                this.columnADRESSE_CLIENT.AllowDBNull = false;
                this.columnADRESSE_CLIENT.MaxLength = 2147483647;
                this.columnCP_CLIENT.MaxLength = 2147483647;
                this.columnTEL_CLIENT.MaxLength = 2147483647;
                this.columnFAX_CLIENT.MaxLength = 2147483647;
                this.columnEMAIL_CLIENT.MaxLength = 2147483647;
                this.columnATTEST_EXO_CLIENT.AllowDBNull = false;
                this.columnATTEST_EXO_CLIENT.MaxLength = 2147483647;
                this.columnCODE_DOUANE_CLIENT.AllowDBNull = false;
                this.columnCODE_DOUANE_CLIENT.MaxLength = 10;
                this.columnCODE_TVA_CLIENT.AllowDBNull = false;
                this.columnCODE_TVA_CLIENT.MaxLength = 10;
                this.columnETAT_CLIENT.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTRow NewCLIENTRow() {
                return ((CLIENTRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CLIENTRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CLIENTRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CLIENTRowChanged != null)) {
                    this.CLIENTRowChanged(this, new CLIENTRowChangeEvent(((CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CLIENTRowChanging != null)) {
                    this.CLIENTRowChanging(this, new CLIENTRowChangeEvent(((CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CLIENTRowDeleted != null)) {
                    this.CLIENTRowDeleted(this, new CLIENTRowChangeEvent(((CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CLIENTRowDeleting != null)) {
                    this.CLIENTRowDeleting(this, new CLIENTRowChangeEvent(((CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCLIENTRow(CLIENTRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CLIENTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COMMANDEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_COMMANDE;
            
            private System.Data.DataColumn columnCODE_CLIENT;
            
            private System.Data.DataColumn columnDATE_COMMANDE;
            
            private System.Data.DataColumn columnPRIORITE_COMMANDE;
            
            private System.Data.DataColumn columnDATE_EXPIRATION_COMMANDE;
            
            private System.Data.DataColumn columnCODE_EMPLOYE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMMANDEDataTable() {
                this.TableName = "COMMANDE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMMANDEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COMMANDEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_COMMANDEColumn {
                get {
                    return this.columnCODE_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_CLIENTColumn {
                get {
                    return this.columnCODE_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_COMMANDEColumn {
                get {
                    return this.columnDATE_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRIORITE_COMMANDEColumn {
                get {
                    return this.columnPRIORITE_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_EXPIRATION_COMMANDEColumn {
                get {
                    return this.columnDATE_EXPIRATION_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_EMPLOYEColumn {
                get {
                    return this.columnCODE_EMPLOYE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMMANDERow this[int index] {
                get {
                    return ((COMMANDERow)(this.Rows[index]));
                }
            }
            
            public event COMMANDERowChangeEventHandler COMMANDERowChanging;
            
            public event COMMANDERowChangeEventHandler COMMANDERowChanged;
            
            public event COMMANDERowChangeEventHandler COMMANDERowDeleting;
            
            public event COMMANDERowChangeEventHandler COMMANDERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOMMANDERow(COMMANDERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMMANDERow AddCOMMANDERow(string CODE_COMMANDE, CLIENTRow parentCLIENTRowByFK_COMMANDE_CLIENT, System.DateTime DATE_COMMANDE, bool PRIORITE_COMMANDE, System.DateTime DATE_EXPIRATION_COMMANDE, EMPLOYERow parentEMPLOYERowByFK_COMMANDE_EMPLOYE) {
                COMMANDERow rowCOMMANDERow = ((COMMANDERow)(this.NewRow()));
                rowCOMMANDERow.ItemArray = new object[] {
                        CODE_COMMANDE,
                        parentCLIENTRowByFK_COMMANDE_CLIENT[0],
                        DATE_COMMANDE,
                        PRIORITE_COMMANDE,
                        DATE_EXPIRATION_COMMANDE,
                        parentEMPLOYERowByFK_COMMANDE_EMPLOYE[0]};
                this.Rows.Add(rowCOMMANDERow);
                return rowCOMMANDERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMMANDERow FindByCODE_COMMANDE(string CODE_COMMANDE) {
                return ((COMMANDERow)(this.Rows.Find(new object[] {
                            CODE_COMMANDE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                COMMANDEDataTable cln = ((COMMANDEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new COMMANDEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_COMMANDE = base.Columns["CODE_COMMANDE"];
                this.columnCODE_CLIENT = base.Columns["CODE_CLIENT"];
                this.columnDATE_COMMANDE = base.Columns["DATE_COMMANDE"];
                this.columnPRIORITE_COMMANDE = base.Columns["PRIORITE_COMMANDE"];
                this.columnDATE_EXPIRATION_COMMANDE = base.Columns["DATE_EXPIRATION_COMMANDE"];
                this.columnCODE_EMPLOYE = base.Columns["CODE_EMPLOYE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_COMMANDE = new System.Data.DataColumn("CODE_COMMANDE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_COMMANDE);
                this.columnCODE_CLIENT = new System.Data.DataColumn("CODE_CLIENT", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_CLIENT);
                this.columnDATE_COMMANDE = new System.Data.DataColumn("DATE_COMMANDE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_COMMANDE);
                this.columnPRIORITE_COMMANDE = new System.Data.DataColumn("PRIORITE_COMMANDE", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIORITE_COMMANDE);
                this.columnDATE_EXPIRATION_COMMANDE = new System.Data.DataColumn("DATE_EXPIRATION_COMMANDE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_EXPIRATION_COMMANDE);
                this.columnCODE_EMPLOYE = new System.Data.DataColumn("CODE_EMPLOYE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_EMPLOYE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_COMMANDE}, true));
                this.columnCODE_COMMANDE.AllowDBNull = false;
                this.columnCODE_COMMANDE.Unique = true;
                this.columnCODE_COMMANDE.MaxLength = 450;
                this.columnCODE_CLIENT.AllowDBNull = false;
                this.columnDATE_COMMANDE.AllowDBNull = false;
                this.columnPRIORITE_COMMANDE.AllowDBNull = false;
                this.columnCODE_EMPLOYE.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMMANDERow NewCOMMANDERow() {
                return ((COMMANDERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new COMMANDERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(COMMANDERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COMMANDERowChanged != null)) {
                    this.COMMANDERowChanged(this, new COMMANDERowChangeEvent(((COMMANDERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COMMANDERowChanging != null)) {
                    this.COMMANDERowChanging(this, new COMMANDERowChangeEvent(((COMMANDERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COMMANDERowDeleted != null)) {
                    this.COMMANDERowDeleted(this, new COMMANDERowChangeEvent(((COMMANDERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COMMANDERowDeleting != null)) {
                    this.COMMANDERowDeleting(this, new COMMANDERowChangeEvent(((COMMANDERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOMMANDERow(COMMANDERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COMMANDEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EMPLOYEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_EMPLOYE;
            
            private System.Data.DataColumn columnNOM_EMPLOYE;
            
            private System.Data.DataColumn columnPRENOM_EMPLOYE;
            
            private System.Data.DataColumn columnDATE_NAIS_EMPLOYE;
            
            private System.Data.DataColumn columnADRESSE_EMPLOYE;
            
            private System.Data.DataColumn columnTEL_EMPLOYE;
            
            private System.Data.DataColumn columnEMAIL_EMPLOYE;
            
            private System.Data.DataColumn columnDATE_EMBAUCHE_EMPLOYE;
            
            private System.Data.DataColumn columnLOGIN_USER;
            
            private System.Data.DataColumn columnPASSWORD_USER;
            
            private System.Data.DataColumn columnETAT_USER;
            
            private System.Data.DataColumn columnCODE_SOCIETE;
            
            private System.Data.DataColumn columnCODE_MAG;
            
            private System.Data.DataColumn columnCODE_FONCTION;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYEDataTable() {
                this.TableName = "EMPLOYE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EMPLOYEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EMPLOYEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_EMPLOYEColumn {
                get {
                    return this.columnCODE_EMPLOYE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NOM_EMPLOYEColumn {
                get {
                    return this.columnNOM_EMPLOYE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRENOM_EMPLOYEColumn {
                get {
                    return this.columnPRENOM_EMPLOYE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_NAIS_EMPLOYEColumn {
                get {
                    return this.columnDATE_NAIS_EMPLOYE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ADRESSE_EMPLOYEColumn {
                get {
                    return this.columnADRESSE_EMPLOYE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TEL_EMPLOYEColumn {
                get {
                    return this.columnTEL_EMPLOYE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EMAIL_EMPLOYEColumn {
                get {
                    return this.columnEMAIL_EMPLOYE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_EMBAUCHE_EMPLOYEColumn {
                get {
                    return this.columnDATE_EMBAUCHE_EMPLOYE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LOGIN_USERColumn {
                get {
                    return this.columnLOGIN_USER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PASSWORD_USERColumn {
                get {
                    return this.columnPASSWORD_USER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ETAT_USERColumn {
                get {
                    return this.columnETAT_USER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_SOCIETEColumn {
                get {
                    return this.columnCODE_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_MAGColumn {
                get {
                    return this.columnCODE_MAG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_FONCTIONColumn {
                get {
                    return this.columnCODE_FONCTION;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERow this[int index] {
                get {
                    return ((EMPLOYERow)(this.Rows[index]));
                }
            }
            
            public event EMPLOYERowChangeEventHandler EMPLOYERowChanging;
            
            public event EMPLOYERowChangeEventHandler EMPLOYERowChanged;
            
            public event EMPLOYERowChangeEventHandler EMPLOYERowDeleting;
            
            public event EMPLOYERowChangeEventHandler EMPLOYERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEMPLOYERow(EMPLOYERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERow AddEMPLOYERow(decimal CODE_EMPLOYE, string NOM_EMPLOYE, string PRENOM_EMPLOYE, System.DateTime DATE_NAIS_EMPLOYE, string ADRESSE_EMPLOYE, string TEL_EMPLOYE, string EMAIL_EMPLOYE, System.DateTime DATE_EMBAUCHE_EMPLOYE, string LOGIN_USER, string PASSWORD_USER, bool ETAT_USER, SOCIETERow parentSOCIETERowByFK_EMPLOYE_SOCIETE, MAGAZINRow parentMAGAZINRowByFK_EMPLOYE_MAGAZIN, FONCTIONALITE_EMPLOYERow parentFONCTIONALITE_EMPLOYERowByFK_EMPLOYE_FONCTIONALITE_EMPLOYE) {
                EMPLOYERow rowEMPLOYERow = ((EMPLOYERow)(this.NewRow()));
                rowEMPLOYERow.ItemArray = new object[] {
                        CODE_EMPLOYE,
                        NOM_EMPLOYE,
                        PRENOM_EMPLOYE,
                        DATE_NAIS_EMPLOYE,
                        ADRESSE_EMPLOYE,
                        TEL_EMPLOYE,
                        EMAIL_EMPLOYE,
                        DATE_EMBAUCHE_EMPLOYE,
                        LOGIN_USER,
                        PASSWORD_USER,
                        ETAT_USER,
                        parentSOCIETERowByFK_EMPLOYE_SOCIETE[0],
                        parentMAGAZINRowByFK_EMPLOYE_MAGAZIN[0],
                        parentFONCTIONALITE_EMPLOYERowByFK_EMPLOYE_FONCTIONALITE_EMPLOYE[0]};
                this.Rows.Add(rowEMPLOYERow);
                return rowEMPLOYERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERow FindByCODE_EMPLOYE(decimal CODE_EMPLOYE) {
                return ((EMPLOYERow)(this.Rows.Find(new object[] {
                            CODE_EMPLOYE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EMPLOYEDataTable cln = ((EMPLOYEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EMPLOYEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_EMPLOYE = base.Columns["CODE_EMPLOYE"];
                this.columnNOM_EMPLOYE = base.Columns["NOM_EMPLOYE"];
                this.columnPRENOM_EMPLOYE = base.Columns["PRENOM_EMPLOYE"];
                this.columnDATE_NAIS_EMPLOYE = base.Columns["DATE_NAIS_EMPLOYE"];
                this.columnADRESSE_EMPLOYE = base.Columns["ADRESSE_EMPLOYE"];
                this.columnTEL_EMPLOYE = base.Columns["TEL_EMPLOYE"];
                this.columnEMAIL_EMPLOYE = base.Columns["EMAIL_EMPLOYE"];
                this.columnDATE_EMBAUCHE_EMPLOYE = base.Columns["DATE_EMBAUCHE_EMPLOYE"];
                this.columnLOGIN_USER = base.Columns["LOGIN_USER"];
                this.columnPASSWORD_USER = base.Columns["PASSWORD_USER"];
                this.columnETAT_USER = base.Columns["ETAT_USER"];
                this.columnCODE_SOCIETE = base.Columns["CODE_SOCIETE"];
                this.columnCODE_MAG = base.Columns["CODE_MAG"];
                this.columnCODE_FONCTION = base.Columns["CODE_FONCTION"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_EMPLOYE = new System.Data.DataColumn("CODE_EMPLOYE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_EMPLOYE);
                this.columnNOM_EMPLOYE = new System.Data.DataColumn("NOM_EMPLOYE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOM_EMPLOYE);
                this.columnPRENOM_EMPLOYE = new System.Data.DataColumn("PRENOM_EMPLOYE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRENOM_EMPLOYE);
                this.columnDATE_NAIS_EMPLOYE = new System.Data.DataColumn("DATE_NAIS_EMPLOYE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_NAIS_EMPLOYE);
                this.columnADRESSE_EMPLOYE = new System.Data.DataColumn("ADRESSE_EMPLOYE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnADRESSE_EMPLOYE);
                this.columnTEL_EMPLOYE = new System.Data.DataColumn("TEL_EMPLOYE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL_EMPLOYE);
                this.columnEMAIL_EMPLOYE = new System.Data.DataColumn("EMAIL_EMPLOYE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL_EMPLOYE);
                this.columnDATE_EMBAUCHE_EMPLOYE = new System.Data.DataColumn("DATE_EMBAUCHE_EMPLOYE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_EMBAUCHE_EMPLOYE);
                this.columnLOGIN_USER = new System.Data.DataColumn("LOGIN_USER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGIN_USER);
                this.columnPASSWORD_USER = new System.Data.DataColumn("PASSWORD_USER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPASSWORD_USER);
                this.columnETAT_USER = new System.Data.DataColumn("ETAT_USER", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnETAT_USER);
                this.columnCODE_SOCIETE = new System.Data.DataColumn("CODE_SOCIETE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_SOCIETE);
                this.columnCODE_MAG = new System.Data.DataColumn("CODE_MAG", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_MAG);
                this.columnCODE_FONCTION = new System.Data.DataColumn("CODE_FONCTION", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_FONCTION);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_EMPLOYE}, true));
                this.columnCODE_EMPLOYE.AllowDBNull = false;
                this.columnCODE_EMPLOYE.Unique = true;
                this.columnNOM_EMPLOYE.AllowDBNull = false;
                this.columnNOM_EMPLOYE.MaxLength = 2147483647;
                this.columnPRENOM_EMPLOYE.AllowDBNull = false;
                this.columnPRENOM_EMPLOYE.MaxLength = 2147483647;
                this.columnDATE_NAIS_EMPLOYE.AllowDBNull = false;
                this.columnADRESSE_EMPLOYE.AllowDBNull = false;
                this.columnADRESSE_EMPLOYE.MaxLength = 2147483647;
                this.columnTEL_EMPLOYE.MaxLength = 2147483647;
                this.columnEMAIL_EMPLOYE.MaxLength = 2147483647;
                this.columnDATE_EMBAUCHE_EMPLOYE.AllowDBNull = false;
                this.columnLOGIN_USER.MaxLength = 2147483647;
                this.columnPASSWORD_USER.MaxLength = 2147483647;
                this.columnETAT_USER.AllowDBNull = false;
                this.columnCODE_SOCIETE.AllowDBNull = false;
                this.columnCODE_MAG.AllowDBNull = false;
                this.columnCODE_FONCTION.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERow NewEMPLOYERow() {
                return ((EMPLOYERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EMPLOYERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EMPLOYERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EMPLOYERowChanged != null)) {
                    this.EMPLOYERowChanged(this, new EMPLOYERowChangeEvent(((EMPLOYERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EMPLOYERowChanging != null)) {
                    this.EMPLOYERowChanging(this, new EMPLOYERowChangeEvent(((EMPLOYERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EMPLOYERowDeleted != null)) {
                    this.EMPLOYERowDeleted(this, new EMPLOYERowChangeEvent(((EMPLOYERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EMPLOYERowDeleting != null)) {
                    this.EMPLOYERowDeleting(this, new EMPLOYERowChangeEvent(((EMPLOYERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEMPLOYERow(EMPLOYERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EMPLOYEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FACTUREDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_FACTURE;
            
            private System.Data.DataColumn columnDATE_FACTURE;
            
            private System.Data.DataColumn columnCODE_CLIENT;
            
            private System.Data.DataColumn columnMONTANT_HT_FACTURE;
            
            private System.Data.DataColumn columnMONTANT_TVA;
            
            private System.Data.DataColumn columnMONTANT_TTC;
            
            private System.Data.DataColumn columnTAUX_REMISE;
            
            private System.Data.DataColumn columnMONTANT_BASE;
            
            private System.Data.DataColumn columnTIMBRE_FACTURE;
            
            private System.Data.DataColumn columnMONTANT_TOTAL_FACTURE;
            
            private System.Data.DataColumn columnMONTANT_LETTRE;
            
            private System.Data.DataColumn columnANNULATION_FACTURE;
            
            private System.Data.DataColumn columnREGLER;
            
            private System.Data.DataColumn columnCREDIT;
            
            private System.Data.DataColumn columnMAGASIN;
            
            private System.Data.DataColumn columnCODE_EMPLOYE;
            
            private System.Data.DataColumn columnCODE_REGLEMENT_CLIENT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACTUREDataTable() {
                this.TableName = "FACTURE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FACTUREDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FACTUREDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_FACTUREColumn {
                get {
                    return this.columnCODE_FACTURE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_FACTUREColumn {
                get {
                    return this.columnDATE_FACTURE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_CLIENTColumn {
                get {
                    return this.columnCODE_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MONTANT_HT_FACTUREColumn {
                get {
                    return this.columnMONTANT_HT_FACTURE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MONTANT_TVAColumn {
                get {
                    return this.columnMONTANT_TVA;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MONTANT_TTCColumn {
                get {
                    return this.columnMONTANT_TTC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TAUX_REMISEColumn {
                get {
                    return this.columnTAUX_REMISE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MONTANT_BASEColumn {
                get {
                    return this.columnMONTANT_BASE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TIMBRE_FACTUREColumn {
                get {
                    return this.columnTIMBRE_FACTURE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MONTANT_TOTAL_FACTUREColumn {
                get {
                    return this.columnMONTANT_TOTAL_FACTURE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MONTANT_LETTREColumn {
                get {
                    return this.columnMONTANT_LETTRE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ANNULATION_FACTUREColumn {
                get {
                    return this.columnANNULATION_FACTURE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn REGLERColumn {
                get {
                    return this.columnREGLER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CREDITColumn {
                get {
                    return this.columnCREDIT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MAGASINColumn {
                get {
                    return this.columnMAGASIN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_EMPLOYEColumn {
                get {
                    return this.columnCODE_EMPLOYE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_REGLEMENT_CLIENTColumn {
                get {
                    return this.columnCODE_REGLEMENT_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACTURERow this[int index] {
                get {
                    return ((FACTURERow)(this.Rows[index]));
                }
            }
            
            public event FACTURERowChangeEventHandler FACTURERowChanging;
            
            public event FACTURERowChangeEventHandler FACTURERowChanged;
            
            public event FACTURERowChangeEventHandler FACTURERowDeleting;
            
            public event FACTURERowChangeEventHandler FACTURERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFACTURERow(FACTURERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACTURERow AddFACTURERow(
                        string CODE_FACTURE, 
                        System.DateTime DATE_FACTURE, 
                        CLIENTRow parentCLIENTRowByFK_FACTURE_CLIENT, 
                        decimal MONTANT_HT_FACTURE, 
                        decimal MONTANT_TVA, 
                        decimal MONTANT_TTC, 
                        decimal TAUX_REMISE, 
                        decimal MONTANT_BASE, 
                        decimal TIMBRE_FACTURE, 
                        decimal MONTANT_TOTAL_FACTURE, 
                        string MONTANT_LETTRE, 
                        bool ANNULATION_FACTURE, 
                        string REGLER, 
                        decimal CREDIT, 
                        string MAGASIN, 
                        EMPLOYERow parentEMPLOYERowByFK_FACTURE_EMPLOYE, 
                        REGLEMENT_CLIENTRow parentREGLEMENT_CLIENTRowByFK_FACTURE_REGLEMENT_CLIENT) {
                FACTURERow rowFACTURERow = ((FACTURERow)(this.NewRow()));
                rowFACTURERow.ItemArray = new object[] {
                        CODE_FACTURE,
                        DATE_FACTURE,
                        parentCLIENTRowByFK_FACTURE_CLIENT[0],
                        MONTANT_HT_FACTURE,
                        MONTANT_TVA,
                        MONTANT_TTC,
                        TAUX_REMISE,
                        MONTANT_BASE,
                        TIMBRE_FACTURE,
                        MONTANT_TOTAL_FACTURE,
                        MONTANT_LETTRE,
                        ANNULATION_FACTURE,
                        REGLER,
                        CREDIT,
                        MAGASIN,
                        parentEMPLOYERowByFK_FACTURE_EMPLOYE[0],
                        parentREGLEMENT_CLIENTRowByFK_FACTURE_REGLEMENT_CLIENT[0]};
                this.Rows.Add(rowFACTURERow);
                return rowFACTURERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACTURERow FindByCODE_FACTURE(string CODE_FACTURE) {
                return ((FACTURERow)(this.Rows.Find(new object[] {
                            CODE_FACTURE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FACTUREDataTable cln = ((FACTUREDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FACTUREDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_FACTURE = base.Columns["CODE_FACTURE"];
                this.columnDATE_FACTURE = base.Columns["DATE_FACTURE"];
                this.columnCODE_CLIENT = base.Columns["CODE_CLIENT"];
                this.columnMONTANT_HT_FACTURE = base.Columns["MONTANT_HT_FACTURE"];
                this.columnMONTANT_TVA = base.Columns["MONTANT_TVA"];
                this.columnMONTANT_TTC = base.Columns["MONTANT_TTC"];
                this.columnTAUX_REMISE = base.Columns["TAUX_REMISE"];
                this.columnMONTANT_BASE = base.Columns["MONTANT_BASE"];
                this.columnTIMBRE_FACTURE = base.Columns["TIMBRE_FACTURE"];
                this.columnMONTANT_TOTAL_FACTURE = base.Columns["MONTANT_TOTAL_FACTURE"];
                this.columnMONTANT_LETTRE = base.Columns["MONTANT_LETTRE"];
                this.columnANNULATION_FACTURE = base.Columns["ANNULATION_FACTURE"];
                this.columnREGLER = base.Columns["REGLER"];
                this.columnCREDIT = base.Columns["CREDIT"];
                this.columnMAGASIN = base.Columns["MAGASIN"];
                this.columnCODE_EMPLOYE = base.Columns["CODE_EMPLOYE"];
                this.columnCODE_REGLEMENT_CLIENT = base.Columns["CODE_REGLEMENT_CLIENT"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_FACTURE = new System.Data.DataColumn("CODE_FACTURE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_FACTURE);
                this.columnDATE_FACTURE = new System.Data.DataColumn("DATE_FACTURE", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_FACTURE);
                this.columnCODE_CLIENT = new System.Data.DataColumn("CODE_CLIENT", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_CLIENT);
                this.columnMONTANT_HT_FACTURE = new System.Data.DataColumn("MONTANT_HT_FACTURE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONTANT_HT_FACTURE);
                this.columnMONTANT_TVA = new System.Data.DataColumn("MONTANT_TVA", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONTANT_TVA);
                this.columnMONTANT_TTC = new System.Data.DataColumn("MONTANT_TTC", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONTANT_TTC);
                this.columnTAUX_REMISE = new System.Data.DataColumn("TAUX_REMISE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAUX_REMISE);
                this.columnMONTANT_BASE = new System.Data.DataColumn("MONTANT_BASE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONTANT_BASE);
                this.columnTIMBRE_FACTURE = new System.Data.DataColumn("TIMBRE_FACTURE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIMBRE_FACTURE);
                this.columnMONTANT_TOTAL_FACTURE = new System.Data.DataColumn("MONTANT_TOTAL_FACTURE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONTANT_TOTAL_FACTURE);
                this.columnMONTANT_LETTRE = new System.Data.DataColumn("MONTANT_LETTRE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONTANT_LETTRE);
                this.columnANNULATION_FACTURE = new System.Data.DataColumn("ANNULATION_FACTURE", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnANNULATION_FACTURE);
                this.columnREGLER = new System.Data.DataColumn("REGLER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGLER);
                this.columnCREDIT = new System.Data.DataColumn("CREDIT", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREDIT);
                this.columnMAGASIN = new System.Data.DataColumn("MAGASIN", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAGASIN);
                this.columnCODE_EMPLOYE = new System.Data.DataColumn("CODE_EMPLOYE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_EMPLOYE);
                this.columnCODE_REGLEMENT_CLIENT = new System.Data.DataColumn("CODE_REGLEMENT_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_REGLEMENT_CLIENT);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_FACTURE}, true));
                this.columnCODE_FACTURE.AllowDBNull = false;
                this.columnCODE_FACTURE.Unique = true;
                this.columnCODE_FACTURE.MaxLength = 450;
                this.columnDATE_FACTURE.AllowDBNull = false;
                this.columnCODE_CLIENT.AllowDBNull = false;
                this.columnMONTANT_HT_FACTURE.AllowDBNull = false;
                this.columnMONTANT_TVA.AllowDBNull = false;
                this.columnMONTANT_TTC.AllowDBNull = false;
                this.columnTAUX_REMISE.AllowDBNull = false;
                this.columnMONTANT_BASE.AllowDBNull = false;
                this.columnTIMBRE_FACTURE.AllowDBNull = false;
                this.columnMONTANT_TOTAL_FACTURE.AllowDBNull = false;
                this.columnMONTANT_LETTRE.AllowDBNull = false;
                this.columnMONTANT_LETTRE.MaxLength = 2147483647;
                this.columnANNULATION_FACTURE.AllowDBNull = false;
                this.columnREGLER.AllowDBNull = false;
                this.columnREGLER.MaxLength = 2147483647;
                this.columnMAGASIN.MaxLength = 2147483647;
                this.columnCODE_EMPLOYE.AllowDBNull = false;
                this.columnCODE_REGLEMENT_CLIENT.AllowDBNull = false;
                this.columnCODE_REGLEMENT_CLIENT.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACTURERow NewFACTURERow() {
                return ((FACTURERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FACTURERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FACTURERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FACTURERowChanged != null)) {
                    this.FACTURERowChanged(this, new FACTURERowChangeEvent(((FACTURERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FACTURERowChanging != null)) {
                    this.FACTURERowChanging(this, new FACTURERowChangeEvent(((FACTURERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FACTURERowDeleted != null)) {
                    this.FACTURERowDeleted(this, new FACTURERowChangeEvent(((FACTURERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FACTURERowDeleting != null)) {
                    this.FACTURERowDeleting(this, new FACTURERowChangeEvent(((FACTURERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFACTURERow(FACTURERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FACTUREDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FONCTIONALITE_EMPLOYEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_FONCTION;
            
            private System.Data.DataColumn columnLIB_FONCTION;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FONCTIONALITE_EMPLOYEDataTable() {
                this.TableName = "FONCTIONALITE_EMPLOYE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FONCTIONALITE_EMPLOYEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FONCTIONALITE_EMPLOYEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_FONCTIONColumn {
                get {
                    return this.columnCODE_FONCTION;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LIB_FONCTIONColumn {
                get {
                    return this.columnLIB_FONCTION;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FONCTIONALITE_EMPLOYERow this[int index] {
                get {
                    return ((FONCTIONALITE_EMPLOYERow)(this.Rows[index]));
                }
            }
            
            public event FONCTIONALITE_EMPLOYERowChangeEventHandler FONCTIONALITE_EMPLOYERowChanging;
            
            public event FONCTIONALITE_EMPLOYERowChangeEventHandler FONCTIONALITE_EMPLOYERowChanged;
            
            public event FONCTIONALITE_EMPLOYERowChangeEventHandler FONCTIONALITE_EMPLOYERowDeleting;
            
            public event FONCTIONALITE_EMPLOYERowChangeEventHandler FONCTIONALITE_EMPLOYERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFONCTIONALITE_EMPLOYERow(FONCTIONALITE_EMPLOYERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FONCTIONALITE_EMPLOYERow AddFONCTIONALITE_EMPLOYERow(decimal CODE_FONCTION, string LIB_FONCTION) {
                FONCTIONALITE_EMPLOYERow rowFONCTIONALITE_EMPLOYERow = ((FONCTIONALITE_EMPLOYERow)(this.NewRow()));
                rowFONCTIONALITE_EMPLOYERow.ItemArray = new object[] {
                        CODE_FONCTION,
                        LIB_FONCTION};
                this.Rows.Add(rowFONCTIONALITE_EMPLOYERow);
                return rowFONCTIONALITE_EMPLOYERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FONCTIONALITE_EMPLOYERow FindByCODE_FONCTION(decimal CODE_FONCTION) {
                return ((FONCTIONALITE_EMPLOYERow)(this.Rows.Find(new object[] {
                            CODE_FONCTION})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FONCTIONALITE_EMPLOYEDataTable cln = ((FONCTIONALITE_EMPLOYEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FONCTIONALITE_EMPLOYEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_FONCTION = base.Columns["CODE_FONCTION"];
                this.columnLIB_FONCTION = base.Columns["LIB_FONCTION"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_FONCTION = new System.Data.DataColumn("CODE_FONCTION", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_FONCTION);
                this.columnLIB_FONCTION = new System.Data.DataColumn("LIB_FONCTION", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIB_FONCTION);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_FONCTION}, true));
                this.columnCODE_FONCTION.AllowDBNull = false;
                this.columnCODE_FONCTION.Unique = true;
                this.columnLIB_FONCTION.AllowDBNull = false;
                this.columnLIB_FONCTION.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FONCTIONALITE_EMPLOYERow NewFONCTIONALITE_EMPLOYERow() {
                return ((FONCTIONALITE_EMPLOYERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FONCTIONALITE_EMPLOYERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FONCTIONALITE_EMPLOYERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FONCTIONALITE_EMPLOYERowChanged != null)) {
                    this.FONCTIONALITE_EMPLOYERowChanged(this, new FONCTIONALITE_EMPLOYERowChangeEvent(((FONCTIONALITE_EMPLOYERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FONCTIONALITE_EMPLOYERowChanging != null)) {
                    this.FONCTIONALITE_EMPLOYERowChanging(this, new FONCTIONALITE_EMPLOYERowChangeEvent(((FONCTIONALITE_EMPLOYERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FONCTIONALITE_EMPLOYERowDeleted != null)) {
                    this.FONCTIONALITE_EMPLOYERowDeleted(this, new FONCTIONALITE_EMPLOYERowChangeEvent(((FONCTIONALITE_EMPLOYERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FONCTIONALITE_EMPLOYERowDeleting != null)) {
                    this.FONCTIONALITE_EMPLOYERowDeleting(this, new FONCTIONALITE_EMPLOYERowChangeEvent(((FONCTIONALITE_EMPLOYERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFONCTIONALITE_EMPLOYERow(FONCTIONALITE_EMPLOYERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FONCTIONALITE_EMPLOYEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FOURNISSEURDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_FOURNISSEUR;
            
            private System.Data.DataColumn columnRS_FOURNISEEUR;
            
            private System.Data.DataColumn columnADRESSE_FOURNISSEUR;
            
            private System.Data.DataColumn columnTEL_FOURNISSEUR;
            
            private System.Data.DataColumn columnFAX_FOURNISSEUR;
            
            private System.Data.DataColumn columnEMAIL_FOURNISSEUR;
            
            private System.Data.DataColumn columnSITE_WEB_FOURNISSEUR;
            
            private System.Data.DataColumn columnRIB_FOURNISSEUR;
            
            private System.Data.DataColumn columnCODE_TVA_FOURNISSEUR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FOURNISSEURDataTable() {
                this.TableName = "FOURNISSEUR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FOURNISSEURDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FOURNISSEURDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_FOURNISSEURColumn {
                get {
                    return this.columnCODE_FOURNISSEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RS_FOURNISEEURColumn {
                get {
                    return this.columnRS_FOURNISEEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ADRESSE_FOURNISSEURColumn {
                get {
                    return this.columnADRESSE_FOURNISSEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TEL_FOURNISSEURColumn {
                get {
                    return this.columnTEL_FOURNISSEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FAX_FOURNISSEURColumn {
                get {
                    return this.columnFAX_FOURNISSEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EMAIL_FOURNISSEURColumn {
                get {
                    return this.columnEMAIL_FOURNISSEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SITE_WEB_FOURNISSEURColumn {
                get {
                    return this.columnSITE_WEB_FOURNISSEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RIB_FOURNISSEURColumn {
                get {
                    return this.columnRIB_FOURNISSEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_TVA_FOURNISSEURColumn {
                get {
                    return this.columnCODE_TVA_FOURNISSEUR;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FOURNISSEURRow this[int index] {
                get {
                    return ((FOURNISSEURRow)(this.Rows[index]));
                }
            }
            
            public event FOURNISSEURRowChangeEventHandler FOURNISSEURRowChanging;
            
            public event FOURNISSEURRowChangeEventHandler FOURNISSEURRowChanged;
            
            public event FOURNISSEURRowChangeEventHandler FOURNISSEURRowDeleting;
            
            public event FOURNISSEURRowChangeEventHandler FOURNISSEURRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFOURNISSEURRow(FOURNISSEURRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FOURNISSEURRow AddFOURNISSEURRow(decimal CODE_FOURNISSEUR, string RS_FOURNISEEUR, string ADRESSE_FOURNISSEUR, string TEL_FOURNISSEUR, string FAX_FOURNISSEUR, string EMAIL_FOURNISSEUR, string SITE_WEB_FOURNISSEUR, string RIB_FOURNISSEUR, string CODE_TVA_FOURNISSEUR) {
                FOURNISSEURRow rowFOURNISSEURRow = ((FOURNISSEURRow)(this.NewRow()));
                rowFOURNISSEURRow.ItemArray = new object[] {
                        CODE_FOURNISSEUR,
                        RS_FOURNISEEUR,
                        ADRESSE_FOURNISSEUR,
                        TEL_FOURNISSEUR,
                        FAX_FOURNISSEUR,
                        EMAIL_FOURNISSEUR,
                        SITE_WEB_FOURNISSEUR,
                        RIB_FOURNISSEUR,
                        CODE_TVA_FOURNISSEUR};
                this.Rows.Add(rowFOURNISSEURRow);
                return rowFOURNISSEURRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FOURNISSEURRow FindByCODE_FOURNISSEUR(decimal CODE_FOURNISSEUR) {
                return ((FOURNISSEURRow)(this.Rows.Find(new object[] {
                            CODE_FOURNISSEUR})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FOURNISSEURDataTable cln = ((FOURNISSEURDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FOURNISSEURDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_FOURNISSEUR = base.Columns["CODE_FOURNISSEUR"];
                this.columnRS_FOURNISEEUR = base.Columns["RS_FOURNISEEUR"];
                this.columnADRESSE_FOURNISSEUR = base.Columns["ADRESSE_FOURNISSEUR"];
                this.columnTEL_FOURNISSEUR = base.Columns["TEL_FOURNISSEUR"];
                this.columnFAX_FOURNISSEUR = base.Columns["FAX_FOURNISSEUR"];
                this.columnEMAIL_FOURNISSEUR = base.Columns["EMAIL_FOURNISSEUR"];
                this.columnSITE_WEB_FOURNISSEUR = base.Columns["SITE_WEB_FOURNISSEUR"];
                this.columnRIB_FOURNISSEUR = base.Columns["RIB_FOURNISSEUR"];
                this.columnCODE_TVA_FOURNISSEUR = base.Columns["CODE_TVA_FOURNISSEUR"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_FOURNISSEUR = new System.Data.DataColumn("CODE_FOURNISSEUR", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_FOURNISSEUR);
                this.columnRS_FOURNISEEUR = new System.Data.DataColumn("RS_FOURNISEEUR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRS_FOURNISEEUR);
                this.columnADRESSE_FOURNISSEUR = new System.Data.DataColumn("ADRESSE_FOURNISSEUR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnADRESSE_FOURNISSEUR);
                this.columnTEL_FOURNISSEUR = new System.Data.DataColumn("TEL_FOURNISSEUR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL_FOURNISSEUR);
                this.columnFAX_FOURNISSEUR = new System.Data.DataColumn("FAX_FOURNISSEUR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFAX_FOURNISSEUR);
                this.columnEMAIL_FOURNISSEUR = new System.Data.DataColumn("EMAIL_FOURNISSEUR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL_FOURNISSEUR);
                this.columnSITE_WEB_FOURNISSEUR = new System.Data.DataColumn("SITE_WEB_FOURNISSEUR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSITE_WEB_FOURNISSEUR);
                this.columnRIB_FOURNISSEUR = new System.Data.DataColumn("RIB_FOURNISSEUR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRIB_FOURNISSEUR);
                this.columnCODE_TVA_FOURNISSEUR = new System.Data.DataColumn("CODE_TVA_FOURNISSEUR", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_TVA_FOURNISSEUR);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_FOURNISSEUR}, true));
                this.columnCODE_FOURNISSEUR.AllowDBNull = false;
                this.columnCODE_FOURNISSEUR.Unique = true;
                this.columnRS_FOURNISEEUR.AllowDBNull = false;
                this.columnRS_FOURNISEEUR.MaxLength = 2147483647;
                this.columnADRESSE_FOURNISSEUR.AllowDBNull = false;
                this.columnADRESSE_FOURNISSEUR.MaxLength = 2147483647;
                this.columnTEL_FOURNISSEUR.AllowDBNull = false;
                this.columnTEL_FOURNISSEUR.MaxLength = 2147483647;
                this.columnFAX_FOURNISSEUR.AllowDBNull = false;
                this.columnFAX_FOURNISSEUR.MaxLength = 2147483647;
                this.columnEMAIL_FOURNISSEUR.AllowDBNull = false;
                this.columnEMAIL_FOURNISSEUR.MaxLength = 2147483647;
                this.columnSITE_WEB_FOURNISSEUR.MaxLength = 2147483647;
                this.columnRIB_FOURNISSEUR.AllowDBNull = false;
                this.columnRIB_FOURNISSEUR.MaxLength = 10;
                this.columnCODE_TVA_FOURNISSEUR.AllowDBNull = false;
                this.columnCODE_TVA_FOURNISSEUR.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FOURNISSEURRow NewFOURNISSEURRow() {
                return ((FOURNISSEURRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FOURNISSEURRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FOURNISSEURRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FOURNISSEURRowChanged != null)) {
                    this.FOURNISSEURRowChanged(this, new FOURNISSEURRowChangeEvent(((FOURNISSEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FOURNISSEURRowChanging != null)) {
                    this.FOURNISSEURRowChanging(this, new FOURNISSEURRowChangeEvent(((FOURNISSEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FOURNISSEURRowDeleted != null)) {
                    this.FOURNISSEURRowDeleted(this, new FOURNISSEURRowChangeEvent(((FOURNISSEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FOURNISSEURRowDeleting != null)) {
                    this.FOURNISSEURRowDeleting(this, new FOURNISSEURRowChangeEvent(((FOURNISSEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFOURNISSEURRow(FOURNISSEURRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FOURNISSEURDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LG_BON_LIVRAISONDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_B_LIV;
            
            private System.Data.DataColumn columnCODE_ARTICLE;
            
            private System.Data.DataColumn columnQTE_LIGNE_B_LIV;
            
            private System.Data.DataColumn columnPRIX_HT_B_LIV;
            
            private System.Data.DataColumn columnTVA_B_LIV;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LG_BON_LIVRAISONDataTable() {
                this.TableName = "LG_BON_LIVRAISON";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LG_BON_LIVRAISONDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LG_BON_LIVRAISONDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_B_LIVColumn {
                get {
                    return this.columnCODE_B_LIV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_ARTICLEColumn {
                get {
                    return this.columnCODE_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QTE_LIGNE_B_LIVColumn {
                get {
                    return this.columnQTE_LIGNE_B_LIV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRIX_HT_B_LIVColumn {
                get {
                    return this.columnPRIX_HT_B_LIV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TVA_B_LIVColumn {
                get {
                    return this.columnTVA_B_LIV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LG_BON_LIVRAISONRow this[int index] {
                get {
                    return ((LG_BON_LIVRAISONRow)(this.Rows[index]));
                }
            }
            
            public event LG_BON_LIVRAISONRowChangeEventHandler LG_BON_LIVRAISONRowChanging;
            
            public event LG_BON_LIVRAISONRowChangeEventHandler LG_BON_LIVRAISONRowChanged;
            
            public event LG_BON_LIVRAISONRowChangeEventHandler LG_BON_LIVRAISONRowDeleting;
            
            public event LG_BON_LIVRAISONRowChangeEventHandler LG_BON_LIVRAISONRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLG_BON_LIVRAISONRow(LG_BON_LIVRAISONRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LG_BON_LIVRAISONRow AddLG_BON_LIVRAISONRow(BON_DE_LIVRAISONRow parentBON_DE_LIVRAISONRowByFK_LG_BON_LIVRAISON_BON_DE_LIVRAISON, ARTICLERow parentARTICLERowByFK_LG_BON_LIVRAISON_ARTICLE, decimal QTE_LIGNE_B_LIV, decimal PRIX_HT_B_LIV, decimal TVA_B_LIV) {
                LG_BON_LIVRAISONRow rowLG_BON_LIVRAISONRow = ((LG_BON_LIVRAISONRow)(this.NewRow()));
                rowLG_BON_LIVRAISONRow.ItemArray = new object[] {
                        parentBON_DE_LIVRAISONRowByFK_LG_BON_LIVRAISON_BON_DE_LIVRAISON[0],
                        parentARTICLERowByFK_LG_BON_LIVRAISON_ARTICLE[0],
                        QTE_LIGNE_B_LIV,
                        PRIX_HT_B_LIV,
                        TVA_B_LIV};
                this.Rows.Add(rowLG_BON_LIVRAISONRow);
                return rowLG_BON_LIVRAISONRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LG_BON_LIVRAISONDataTable cln = ((LG_BON_LIVRAISONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LG_BON_LIVRAISONDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_B_LIV = base.Columns["CODE_B_LIV"];
                this.columnCODE_ARTICLE = base.Columns["CODE_ARTICLE"];
                this.columnQTE_LIGNE_B_LIV = base.Columns["QTE_LIGNE_B_LIV"];
                this.columnPRIX_HT_B_LIV = base.Columns["PRIX_HT_B_LIV"];
                this.columnTVA_B_LIV = base.Columns["TVA_B_LIV"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_B_LIV = new System.Data.DataColumn("CODE_B_LIV", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_B_LIV);
                this.columnCODE_ARTICLE = new System.Data.DataColumn("CODE_ARTICLE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_ARTICLE);
                this.columnQTE_LIGNE_B_LIV = new System.Data.DataColumn("QTE_LIGNE_B_LIV", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTE_LIGNE_B_LIV);
                this.columnPRIX_HT_B_LIV = new System.Data.DataColumn("PRIX_HT_B_LIV", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIX_HT_B_LIV);
                this.columnTVA_B_LIV = new System.Data.DataColumn("TVA_B_LIV", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTVA_B_LIV);
                this.columnCODE_B_LIV.AllowDBNull = false;
                this.columnCODE_B_LIV.MaxLength = 450;
                this.columnCODE_ARTICLE.AllowDBNull = false;
                this.columnQTE_LIGNE_B_LIV.AllowDBNull = false;
                this.columnPRIX_HT_B_LIV.AllowDBNull = false;
                this.columnTVA_B_LIV.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LG_BON_LIVRAISONRow NewLG_BON_LIVRAISONRow() {
                return ((LG_BON_LIVRAISONRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LG_BON_LIVRAISONRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LG_BON_LIVRAISONRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LG_BON_LIVRAISONRowChanged != null)) {
                    this.LG_BON_LIVRAISONRowChanged(this, new LG_BON_LIVRAISONRowChangeEvent(((LG_BON_LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LG_BON_LIVRAISONRowChanging != null)) {
                    this.LG_BON_LIVRAISONRowChanging(this, new LG_BON_LIVRAISONRowChangeEvent(((LG_BON_LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LG_BON_LIVRAISONRowDeleted != null)) {
                    this.LG_BON_LIVRAISONRowDeleted(this, new LG_BON_LIVRAISONRowChangeEvent(((LG_BON_LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LG_BON_LIVRAISONRowDeleting != null)) {
                    this.LG_BON_LIVRAISONRowDeleting(this, new LG_BON_LIVRAISONRowChangeEvent(((LG_BON_LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLG_BON_LIVRAISONRow(LG_BON_LIVRAISONRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LG_BON_LIVRAISONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LIGNE_COMMANDEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_ARTICLE;
            
            private System.Data.DataColumn columnCODE_COMMANDE;
            
            private System.Data.DataColumn columnQTE_LIGNE_COMMANDE;
            
            private System.Data.DataColumn columnPRIX_HT_COMMANDE;
            
            private System.Data.DataColumn columnTVA_COMMANDE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_COMMANDEDataTable() {
                this.TableName = "LIGNE_COMMANDE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIGNE_COMMANDEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LIGNE_COMMANDEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_ARTICLEColumn {
                get {
                    return this.columnCODE_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_COMMANDEColumn {
                get {
                    return this.columnCODE_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QTE_LIGNE_COMMANDEColumn {
                get {
                    return this.columnQTE_LIGNE_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRIX_HT_COMMANDEColumn {
                get {
                    return this.columnPRIX_HT_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TVA_COMMANDEColumn {
                get {
                    return this.columnTVA_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_COMMANDERow this[int index] {
                get {
                    return ((LIGNE_COMMANDERow)(this.Rows[index]));
                }
            }
            
            public event LIGNE_COMMANDERowChangeEventHandler LIGNE_COMMANDERowChanging;
            
            public event LIGNE_COMMANDERowChangeEventHandler LIGNE_COMMANDERowChanged;
            
            public event LIGNE_COMMANDERowChangeEventHandler LIGNE_COMMANDERowDeleting;
            
            public event LIGNE_COMMANDERowChangeEventHandler LIGNE_COMMANDERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLIGNE_COMMANDERow(LIGNE_COMMANDERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_COMMANDERow AddLIGNE_COMMANDERow(ARTICLERow parentARTICLERowByFK_LIGNE_COMMANDE_ARTICLE, COMMANDERow parentCOMMANDERowByFK_LIGNE_COMMANDE_COMMANDE, decimal QTE_LIGNE_COMMANDE, decimal PRIX_HT_COMMANDE, decimal TVA_COMMANDE) {
                LIGNE_COMMANDERow rowLIGNE_COMMANDERow = ((LIGNE_COMMANDERow)(this.NewRow()));
                rowLIGNE_COMMANDERow.ItemArray = new object[] {
                        parentARTICLERowByFK_LIGNE_COMMANDE_ARTICLE[0],
                        parentCOMMANDERowByFK_LIGNE_COMMANDE_COMMANDE[0],
                        QTE_LIGNE_COMMANDE,
                        PRIX_HT_COMMANDE,
                        TVA_COMMANDE};
                this.Rows.Add(rowLIGNE_COMMANDERow);
                return rowLIGNE_COMMANDERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LIGNE_COMMANDEDataTable cln = ((LIGNE_COMMANDEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LIGNE_COMMANDEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_ARTICLE = base.Columns["CODE_ARTICLE"];
                this.columnCODE_COMMANDE = base.Columns["CODE_COMMANDE"];
                this.columnQTE_LIGNE_COMMANDE = base.Columns["QTE_LIGNE_COMMANDE"];
                this.columnPRIX_HT_COMMANDE = base.Columns["PRIX_HT_COMMANDE"];
                this.columnTVA_COMMANDE = base.Columns["TVA_COMMANDE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_ARTICLE = new System.Data.DataColumn("CODE_ARTICLE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_ARTICLE);
                this.columnCODE_COMMANDE = new System.Data.DataColumn("CODE_COMMANDE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_COMMANDE);
                this.columnQTE_LIGNE_COMMANDE = new System.Data.DataColumn("QTE_LIGNE_COMMANDE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTE_LIGNE_COMMANDE);
                this.columnPRIX_HT_COMMANDE = new System.Data.DataColumn("PRIX_HT_COMMANDE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIX_HT_COMMANDE);
                this.columnTVA_COMMANDE = new System.Data.DataColumn("TVA_COMMANDE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTVA_COMMANDE);
                this.columnCODE_ARTICLE.AllowDBNull = false;
                this.columnCODE_COMMANDE.AllowDBNull = false;
                this.columnCODE_COMMANDE.MaxLength = 450;
                this.columnQTE_LIGNE_COMMANDE.AllowDBNull = false;
                this.columnPRIX_HT_COMMANDE.AllowDBNull = false;
                this.columnTVA_COMMANDE.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_COMMANDERow NewLIGNE_COMMANDERow() {
                return ((LIGNE_COMMANDERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LIGNE_COMMANDERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LIGNE_COMMANDERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LIGNE_COMMANDERowChanged != null)) {
                    this.LIGNE_COMMANDERowChanged(this, new LIGNE_COMMANDERowChangeEvent(((LIGNE_COMMANDERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LIGNE_COMMANDERowChanging != null)) {
                    this.LIGNE_COMMANDERowChanging(this, new LIGNE_COMMANDERowChangeEvent(((LIGNE_COMMANDERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LIGNE_COMMANDERowDeleted != null)) {
                    this.LIGNE_COMMANDERowDeleted(this, new LIGNE_COMMANDERowChangeEvent(((LIGNE_COMMANDERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LIGNE_COMMANDERowDeleting != null)) {
                    this.LIGNE_COMMANDERowDeleting(this, new LIGNE_COMMANDERowChangeEvent(((LIGNE_COMMANDERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLIGNE_COMMANDERow(LIGNE_COMMANDERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LIGNE_COMMANDEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LIGNE_FACTUREDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_FACTURE;
            
            private System.Data.DataColumn columnCODE_COMMANDE;
            
            private System.Data.DataColumn columnCODE_ARTICLE;
            
            private System.Data.DataColumn columnQTE;
            
            private System.Data.DataColumn columnTVA_ARTICLE;
            
            private System.Data.DataColumn columnPRIX_HT_ARTICLE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_FACTUREDataTable() {
                this.TableName = "LIGNE_FACTURE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIGNE_FACTUREDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LIGNE_FACTUREDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_FACTUREColumn {
                get {
                    return this.columnCODE_FACTURE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_COMMANDEColumn {
                get {
                    return this.columnCODE_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_ARTICLEColumn {
                get {
                    return this.columnCODE_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QTEColumn {
                get {
                    return this.columnQTE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TVA_ARTICLEColumn {
                get {
                    return this.columnTVA_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PRIX_HT_ARTICLEColumn {
                get {
                    return this.columnPRIX_HT_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_FACTURERow this[int index] {
                get {
                    return ((LIGNE_FACTURERow)(this.Rows[index]));
                }
            }
            
            public event LIGNE_FACTURERowChangeEventHandler LIGNE_FACTURERowChanging;
            
            public event LIGNE_FACTURERowChangeEventHandler LIGNE_FACTURERowChanged;
            
            public event LIGNE_FACTURERowChangeEventHandler LIGNE_FACTURERowDeleting;
            
            public event LIGNE_FACTURERowChangeEventHandler LIGNE_FACTURERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLIGNE_FACTURERow(LIGNE_FACTURERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_FACTURERow AddLIGNE_FACTURERow(FACTURERow parentFACTURERowByFK_LIGNE_FACTURE_FACTURE, string CODE_COMMANDE, ARTICLERow parentARTICLERowByFK_LIGNE_FACTURE_ARTICLE, string QTE, decimal TVA_ARTICLE, decimal PRIX_HT_ARTICLE) {
                LIGNE_FACTURERow rowLIGNE_FACTURERow = ((LIGNE_FACTURERow)(this.NewRow()));
                rowLIGNE_FACTURERow.ItemArray = new object[] {
                        parentFACTURERowByFK_LIGNE_FACTURE_FACTURE[0],
                        CODE_COMMANDE,
                        parentARTICLERowByFK_LIGNE_FACTURE_ARTICLE[0],
                        QTE,
                        TVA_ARTICLE,
                        PRIX_HT_ARTICLE};
                this.Rows.Add(rowLIGNE_FACTURERow);
                return rowLIGNE_FACTURERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LIGNE_FACTUREDataTable cln = ((LIGNE_FACTUREDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LIGNE_FACTUREDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_FACTURE = base.Columns["CODE_FACTURE"];
                this.columnCODE_COMMANDE = base.Columns["CODE_COMMANDE"];
                this.columnCODE_ARTICLE = base.Columns["CODE_ARTICLE"];
                this.columnQTE = base.Columns["QTE"];
                this.columnTVA_ARTICLE = base.Columns["TVA_ARTICLE"];
                this.columnPRIX_HT_ARTICLE = base.Columns["PRIX_HT_ARTICLE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_FACTURE = new System.Data.DataColumn("CODE_FACTURE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_FACTURE);
                this.columnCODE_COMMANDE = new System.Data.DataColumn("CODE_COMMANDE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_COMMANDE);
                this.columnCODE_ARTICLE = new System.Data.DataColumn("CODE_ARTICLE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_ARTICLE);
                this.columnQTE = new System.Data.DataColumn("QTE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTE);
                this.columnTVA_ARTICLE = new System.Data.DataColumn("TVA_ARTICLE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTVA_ARTICLE);
                this.columnPRIX_HT_ARTICLE = new System.Data.DataColumn("PRIX_HT_ARTICLE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRIX_HT_ARTICLE);
                this.columnCODE_FACTURE.AllowDBNull = false;
                this.columnCODE_FACTURE.MaxLength = 450;
                this.columnCODE_COMMANDE.MaxLength = 450;
                this.columnCODE_ARTICLE.AllowDBNull = false;
                this.columnQTE.AllowDBNull = false;
                this.columnQTE.MaxLength = 10;
                this.columnTVA_ARTICLE.AllowDBNull = false;
                this.columnPRIX_HT_ARTICLE.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_FACTURERow NewLIGNE_FACTURERow() {
                return ((LIGNE_FACTURERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LIGNE_FACTURERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LIGNE_FACTURERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LIGNE_FACTURERowChanged != null)) {
                    this.LIGNE_FACTURERowChanged(this, new LIGNE_FACTURERowChangeEvent(((LIGNE_FACTURERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LIGNE_FACTURERowChanging != null)) {
                    this.LIGNE_FACTURERowChanging(this, new LIGNE_FACTURERowChangeEvent(((LIGNE_FACTURERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LIGNE_FACTURERowDeleted != null)) {
                    this.LIGNE_FACTURERowDeleted(this, new LIGNE_FACTURERowChangeEvent(((LIGNE_FACTURERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LIGNE_FACTURERowDeleting != null)) {
                    this.LIGNE_FACTURERowDeleting(this, new LIGNE_FACTURERowChangeEvent(((LIGNE_FACTURERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLIGNE_FACTURERow(LIGNE_FACTURERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LIGNE_FACTUREDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LIVRAISONDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_B_LIV;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISONDataTable() {
                this.TableName = "LIVRAISON";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIVRAISONDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LIVRAISONDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_B_LIVColumn {
                get {
                    return this.columnCODE_B_LIV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISONRow this[int index] {
                get {
                    return ((LIVRAISONRow)(this.Rows[index]));
                }
            }
            
            public event LIVRAISONRowChangeEventHandler LIVRAISONRowChanging;
            
            public event LIVRAISONRowChangeEventHandler LIVRAISONRowChanged;
            
            public event LIVRAISONRowChangeEventHandler LIVRAISONRowDeleting;
            
            public event LIVRAISONRowChangeEventHandler LIVRAISONRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLIVRAISONRow(LIVRAISONRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISONRow AddLIVRAISONRow(string CODE_B_LIV) {
                LIVRAISONRow rowLIVRAISONRow = ((LIVRAISONRow)(this.NewRow()));
                rowLIVRAISONRow.ItemArray = new object[] {
                        CODE_B_LIV};
                this.Rows.Add(rowLIVRAISONRow);
                return rowLIVRAISONRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LIVRAISONDataTable cln = ((LIVRAISONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LIVRAISONDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_B_LIV = base.Columns["CODE_B_LIV"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_B_LIV = new System.Data.DataColumn("CODE_B_LIV", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_B_LIV);
                this.columnCODE_B_LIV.AllowDBNull = false;
                this.columnCODE_B_LIV.MaxLength = 450;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISONRow NewLIVRAISONRow() {
                return ((LIVRAISONRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LIVRAISONRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LIVRAISONRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LIVRAISONRowChanged != null)) {
                    this.LIVRAISONRowChanged(this, new LIVRAISONRowChangeEvent(((LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LIVRAISONRowChanging != null)) {
                    this.LIVRAISONRowChanging(this, new LIVRAISONRowChangeEvent(((LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LIVRAISONRowDeleted != null)) {
                    this.LIVRAISONRowDeleted(this, new LIVRAISONRowChangeEvent(((LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LIVRAISONRowDeleting != null)) {
                    this.LIVRAISONRowDeleting(this, new LIVRAISONRowChangeEvent(((LIVRAISONRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLIVRAISONRow(LIVRAISONRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LIVRAISONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LIVRAISON_CLIENTDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_B_LIV;
            
            private System.Data.DataColumn columnCODE_COMMANDE;
            
            private System.Data.DataColumn columnCODE_EMPLOYE;
            
            private System.Data.DataColumn columnDATE_LIV;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISON_CLIENTDataTable() {
                this.TableName = "LIVRAISON_CLIENT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIVRAISON_CLIENTDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LIVRAISON_CLIENTDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_B_LIVColumn {
                get {
                    return this.columnCODE_B_LIV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_COMMANDEColumn {
                get {
                    return this.columnCODE_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_EMPLOYEColumn {
                get {
                    return this.columnCODE_EMPLOYE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DATE_LIVColumn {
                get {
                    return this.columnDATE_LIV;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISON_CLIENTRow this[int index] {
                get {
                    return ((LIVRAISON_CLIENTRow)(this.Rows[index]));
                }
            }
            
            public event LIVRAISON_CLIENTRowChangeEventHandler LIVRAISON_CLIENTRowChanging;
            
            public event LIVRAISON_CLIENTRowChangeEventHandler LIVRAISON_CLIENTRowChanged;
            
            public event LIVRAISON_CLIENTRowChangeEventHandler LIVRAISON_CLIENTRowDeleting;
            
            public event LIVRAISON_CLIENTRowChangeEventHandler LIVRAISON_CLIENTRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLIVRAISON_CLIENTRow(LIVRAISON_CLIENTRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISON_CLIENTRow AddLIVRAISON_CLIENTRow(BON_DE_LIVRAISONRow parentBON_DE_LIVRAISONRowByFK_LIVRAISON_CLIENT_BON_DE_LIVRAISON, COMMANDERow parentCOMMANDERowByFK_LIVRAISON_CLIENT_COMMANDE, EMPLOYERow parentEMPLOYERowByFK_LIVRAISON_CLIENT_EMPLOYE, string DATE_LIV) {
                LIVRAISON_CLIENTRow rowLIVRAISON_CLIENTRow = ((LIVRAISON_CLIENTRow)(this.NewRow()));
                rowLIVRAISON_CLIENTRow.ItemArray = new object[] {
                        parentBON_DE_LIVRAISONRowByFK_LIVRAISON_CLIENT_BON_DE_LIVRAISON[0],
                        parentCOMMANDERowByFK_LIVRAISON_CLIENT_COMMANDE[0],
                        parentEMPLOYERowByFK_LIVRAISON_CLIENT_EMPLOYE[0],
                        DATE_LIV};
                this.Rows.Add(rowLIVRAISON_CLIENTRow);
                return rowLIVRAISON_CLIENTRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LIVRAISON_CLIENTDataTable cln = ((LIVRAISON_CLIENTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LIVRAISON_CLIENTDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_B_LIV = base.Columns["CODE_B_LIV"];
                this.columnCODE_COMMANDE = base.Columns["CODE_COMMANDE"];
                this.columnCODE_EMPLOYE = base.Columns["CODE_EMPLOYE"];
                this.columnDATE_LIV = base.Columns["DATE_LIV"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_B_LIV = new System.Data.DataColumn("CODE_B_LIV", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_B_LIV);
                this.columnCODE_COMMANDE = new System.Data.DataColumn("CODE_COMMANDE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_COMMANDE);
                this.columnCODE_EMPLOYE = new System.Data.DataColumn("CODE_EMPLOYE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_EMPLOYE);
                this.columnDATE_LIV = new System.Data.DataColumn("DATE_LIV", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE_LIV);
                this.columnCODE_B_LIV.AllowDBNull = false;
                this.columnCODE_B_LIV.MaxLength = 450;
                this.columnCODE_COMMANDE.AllowDBNull = false;
                this.columnCODE_COMMANDE.MaxLength = 450;
                this.columnCODE_EMPLOYE.AllowDBNull = false;
                this.columnDATE_LIV.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISON_CLIENTRow NewLIVRAISON_CLIENTRow() {
                return ((LIVRAISON_CLIENTRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LIVRAISON_CLIENTRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LIVRAISON_CLIENTRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LIVRAISON_CLIENTRowChanged != null)) {
                    this.LIVRAISON_CLIENTRowChanged(this, new LIVRAISON_CLIENTRowChangeEvent(((LIVRAISON_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LIVRAISON_CLIENTRowChanging != null)) {
                    this.LIVRAISON_CLIENTRowChanging(this, new LIVRAISON_CLIENTRowChangeEvent(((LIVRAISON_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LIVRAISON_CLIENTRowDeleted != null)) {
                    this.LIVRAISON_CLIENTRowDeleted(this, new LIVRAISON_CLIENTRowChangeEvent(((LIVRAISON_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LIVRAISON_CLIENTRowDeleting != null)) {
                    this.LIVRAISON_CLIENTRowDeleting(this, new LIVRAISON_CLIENTRowChangeEvent(((LIVRAISON_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLIVRAISON_CLIENTRow(LIVRAISON_CLIENTRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LIVRAISON_CLIENTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MAGAZINDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_MAG;
            
            private System.Data.DataColumn columnNOM_MAG;
            
            private System.Data.DataColumn columnADRESSE_MAG;
            
            private System.Data.DataColumn columnTEL_MAG;
            
            private System.Data.DataColumn columnCODE_SOCIETE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAGAZINDataTable() {
                this.TableName = "MAGAZIN";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MAGAZINDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MAGAZINDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_MAGColumn {
                get {
                    return this.columnCODE_MAG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NOM_MAGColumn {
                get {
                    return this.columnNOM_MAG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ADRESSE_MAGColumn {
                get {
                    return this.columnADRESSE_MAG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TEL_MAGColumn {
                get {
                    return this.columnTEL_MAG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_SOCIETEColumn {
                get {
                    return this.columnCODE_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAGAZINRow this[int index] {
                get {
                    return ((MAGAZINRow)(this.Rows[index]));
                }
            }
            
            public event MAGAZINRowChangeEventHandler MAGAZINRowChanging;
            
            public event MAGAZINRowChangeEventHandler MAGAZINRowChanged;
            
            public event MAGAZINRowChangeEventHandler MAGAZINRowDeleting;
            
            public event MAGAZINRowChangeEventHandler MAGAZINRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMAGAZINRow(MAGAZINRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAGAZINRow AddMAGAZINRow(SOCIETERow parentSOCIETERowByFK_MAGAZIN_SOCIETE, string NOM_MAG, string ADRESSE_MAG, string TEL_MAG, decimal CODE_SOCIETE) {
                MAGAZINRow rowMAGAZINRow = ((MAGAZINRow)(this.NewRow()));
                rowMAGAZINRow.ItemArray = new object[] {
                        parentSOCIETERowByFK_MAGAZIN_SOCIETE[0],
                        NOM_MAG,
                        ADRESSE_MAG,
                        TEL_MAG,
                        CODE_SOCIETE};
                this.Rows.Add(rowMAGAZINRow);
                return rowMAGAZINRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAGAZINRow FindByCODE_MAG(decimal CODE_MAG) {
                return ((MAGAZINRow)(this.Rows.Find(new object[] {
                            CODE_MAG})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MAGAZINDataTable cln = ((MAGAZINDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MAGAZINDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_MAG = base.Columns["CODE_MAG"];
                this.columnNOM_MAG = base.Columns["NOM_MAG"];
                this.columnADRESSE_MAG = base.Columns["ADRESSE_MAG"];
                this.columnTEL_MAG = base.Columns["TEL_MAG"];
                this.columnCODE_SOCIETE = base.Columns["CODE_SOCIETE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_MAG = new System.Data.DataColumn("CODE_MAG", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_MAG);
                this.columnNOM_MAG = new System.Data.DataColumn("NOM_MAG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOM_MAG);
                this.columnADRESSE_MAG = new System.Data.DataColumn("ADRESSE_MAG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnADRESSE_MAG);
                this.columnTEL_MAG = new System.Data.DataColumn("TEL_MAG", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL_MAG);
                this.columnCODE_SOCIETE = new System.Data.DataColumn("CODE_SOCIETE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_SOCIETE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_MAG}, true));
                this.columnCODE_MAG.AllowDBNull = false;
                this.columnCODE_MAG.Unique = true;
                this.columnNOM_MAG.AllowDBNull = false;
                this.columnNOM_MAG.MaxLength = 10;
                this.columnADRESSE_MAG.AllowDBNull = false;
                this.columnADRESSE_MAG.MaxLength = 10;
                this.columnTEL_MAG.AllowDBNull = false;
                this.columnTEL_MAG.MaxLength = 10;
                this.columnCODE_SOCIETE.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAGAZINRow NewMAGAZINRow() {
                return ((MAGAZINRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MAGAZINRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MAGAZINRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MAGAZINRowChanged != null)) {
                    this.MAGAZINRowChanged(this, new MAGAZINRowChangeEvent(((MAGAZINRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MAGAZINRowChanging != null)) {
                    this.MAGAZINRowChanging(this, new MAGAZINRowChangeEvent(((MAGAZINRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MAGAZINRowDeleted != null)) {
                    this.MAGAZINRowDeleted(this, new MAGAZINRowChangeEvent(((MAGAZINRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MAGAZINRowDeleting != null)) {
                    this.MAGAZINRowDeleting(this, new MAGAZINRowChangeEvent(((MAGAZINRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMAGAZINRow(MAGAZINRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MAGAZINDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class REGLEMENT_CLIENTDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_REGLEMENT_CLIENT;
            
            private System.Data.DataColumn columnCODE_FACTURE;
            
            private System.Data.DataColumn columnMODE_REGLEMENT_CLT;
            
            private System.Data.DataColumn columnMONRANT_CLIENT;
            
            private System.Data.DataColumn columnNUM_PIECE_CLIENT;
            
            private System.Data.DataColumn columnBANQUE_CLIENT;
            
            private System.Data.DataColumn columnOBSERVATION;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGLEMENT_CLIENTDataTable() {
                this.TableName = "REGLEMENT_CLIENT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REGLEMENT_CLIENTDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected REGLEMENT_CLIENTDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_REGLEMENT_CLIENTColumn {
                get {
                    return this.columnCODE_REGLEMENT_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_FACTUREColumn {
                get {
                    return this.columnCODE_FACTURE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MODE_REGLEMENT_CLTColumn {
                get {
                    return this.columnMODE_REGLEMENT_CLT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MONRANT_CLIENTColumn {
                get {
                    return this.columnMONRANT_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NUM_PIECE_CLIENTColumn {
                get {
                    return this.columnNUM_PIECE_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BANQUE_CLIENTColumn {
                get {
                    return this.columnBANQUE_CLIENT;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn OBSERVATIONColumn {
                get {
                    return this.columnOBSERVATION;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGLEMENT_CLIENTRow this[int index] {
                get {
                    return ((REGLEMENT_CLIENTRow)(this.Rows[index]));
                }
            }
            
            public event REGLEMENT_CLIENTRowChangeEventHandler REGLEMENT_CLIENTRowChanging;
            
            public event REGLEMENT_CLIENTRowChangeEventHandler REGLEMENT_CLIENTRowChanged;
            
            public event REGLEMENT_CLIENTRowChangeEventHandler REGLEMENT_CLIENTRowDeleting;
            
            public event REGLEMENT_CLIENTRowChangeEventHandler REGLEMENT_CLIENTRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddREGLEMENT_CLIENTRow(REGLEMENT_CLIENTRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGLEMENT_CLIENTRow AddREGLEMENT_CLIENTRow(string CODE_REGLEMENT_CLIENT, string CODE_FACTURE, string MODE_REGLEMENT_CLT, decimal MONRANT_CLIENT, string NUM_PIECE_CLIENT, string BANQUE_CLIENT, string OBSERVATION) {
                REGLEMENT_CLIENTRow rowREGLEMENT_CLIENTRow = ((REGLEMENT_CLIENTRow)(this.NewRow()));
                rowREGLEMENT_CLIENTRow.ItemArray = new object[] {
                        CODE_REGLEMENT_CLIENT,
                        CODE_FACTURE,
                        MODE_REGLEMENT_CLT,
                        MONRANT_CLIENT,
                        NUM_PIECE_CLIENT,
                        BANQUE_CLIENT,
                        OBSERVATION};
                this.Rows.Add(rowREGLEMENT_CLIENTRow);
                return rowREGLEMENT_CLIENTRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGLEMENT_CLIENTRow FindByCODE_REGLEMENT_CLIENT(string CODE_REGLEMENT_CLIENT) {
                return ((REGLEMENT_CLIENTRow)(this.Rows.Find(new object[] {
                            CODE_REGLEMENT_CLIENT})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                REGLEMENT_CLIENTDataTable cln = ((REGLEMENT_CLIENTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new REGLEMENT_CLIENTDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_REGLEMENT_CLIENT = base.Columns["CODE_REGLEMENT_CLIENT"];
                this.columnCODE_FACTURE = base.Columns["CODE_FACTURE"];
                this.columnMODE_REGLEMENT_CLT = base.Columns["MODE_REGLEMENT_CLT"];
                this.columnMONRANT_CLIENT = base.Columns["MONRANT_CLIENT"];
                this.columnNUM_PIECE_CLIENT = base.Columns["NUM_PIECE_CLIENT"];
                this.columnBANQUE_CLIENT = base.Columns["BANQUE_CLIENT"];
                this.columnOBSERVATION = base.Columns["OBSERVATION"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_REGLEMENT_CLIENT = new System.Data.DataColumn("CODE_REGLEMENT_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_REGLEMENT_CLIENT);
                this.columnCODE_FACTURE = new System.Data.DataColumn("CODE_FACTURE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_FACTURE);
                this.columnMODE_REGLEMENT_CLT = new System.Data.DataColumn("MODE_REGLEMENT_CLT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMODE_REGLEMENT_CLT);
                this.columnMONRANT_CLIENT = new System.Data.DataColumn("MONRANT_CLIENT", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMONRANT_CLIENT);
                this.columnNUM_PIECE_CLIENT = new System.Data.DataColumn("NUM_PIECE_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUM_PIECE_CLIENT);
                this.columnBANQUE_CLIENT = new System.Data.DataColumn("BANQUE_CLIENT", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBANQUE_CLIENT);
                this.columnOBSERVATION = new System.Data.DataColumn("OBSERVATION", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBSERVATION);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_REGLEMENT_CLIENT}, true));
                this.columnCODE_REGLEMENT_CLIENT.AllowDBNull = false;
                this.columnCODE_REGLEMENT_CLIENT.Unique = true;
                this.columnCODE_REGLEMENT_CLIENT.MaxLength = 10;
                this.columnCODE_FACTURE.AllowDBNull = false;
                this.columnCODE_FACTURE.MaxLength = 450;
                this.columnMODE_REGLEMENT_CLT.MaxLength = 2147483647;
                this.columnNUM_PIECE_CLIENT.MaxLength = 2147483647;
                this.columnBANQUE_CLIENT.MaxLength = 2147483647;
                this.columnOBSERVATION.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGLEMENT_CLIENTRow NewREGLEMENT_CLIENTRow() {
                return ((REGLEMENT_CLIENTRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new REGLEMENT_CLIENTRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(REGLEMENT_CLIENTRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.REGLEMENT_CLIENTRowChanged != null)) {
                    this.REGLEMENT_CLIENTRowChanged(this, new REGLEMENT_CLIENTRowChangeEvent(((REGLEMENT_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.REGLEMENT_CLIENTRowChanging != null)) {
                    this.REGLEMENT_CLIENTRowChanging(this, new REGLEMENT_CLIENTRowChangeEvent(((REGLEMENT_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.REGLEMENT_CLIENTRowDeleted != null)) {
                    this.REGLEMENT_CLIENTRowDeleted(this, new REGLEMENT_CLIENTRowChangeEvent(((REGLEMENT_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.REGLEMENT_CLIENTRowDeleting != null)) {
                    this.REGLEMENT_CLIENTRowDeleting(this, new REGLEMENT_CLIENTRowChangeEvent(((REGLEMENT_CLIENTRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveREGLEMENT_CLIENTRow(REGLEMENT_CLIENTRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "REGLEMENT_CLIENTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SOCIETEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_SOCIETE;
            
            private System.Data.DataColumn columnRS_SOCIETE;
            
            private System.Data.DataColumn columnDESCRIPTION_SOCIETE;
            
            private System.Data.DataColumn columnADRESSE_SOCIETE;
            
            private System.Data.DataColumn columnCP_SOCIETE;
            
            private System.Data.DataColumn columnTEL_SOCIETE;
            
            private System.Data.DataColumn columnFAX_SOCIETE;
            
            private System.Data.DataColumn columnEMAIL_SOCIETE;
            
            private System.Data.DataColumn columnSITE_WEB_SOCETE;
            
            private System.Data.DataColumn columnLOGO_SOCIETE;
            
            private System.Data.DataColumn columnCODE_TVA_SOCIETE;
            
            private System.Data.DataColumn columnRIB_SOCIETE;
            
            private System.Data.DataColumn columnNUM_COMMANDE;
            
            private System.Data.DataColumn columnPREFIX1_COMMANDE;
            
            private System.Data.DataColumn columnPREFIX2_COMMANDE;
            
            private System.Data.DataColumn columnNUM_FACTURE;
            
            private System.Data.DataColumn columnPREFIX1_FACTURE;
            
            private System.Data.DataColumn columnPREFIXE2_FACTURE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SOCIETEDataTable() {
                this.TableName = "SOCIETE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SOCIETEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SOCIETEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_SOCIETEColumn {
                get {
                    return this.columnCODE_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RS_SOCIETEColumn {
                get {
                    return this.columnRS_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTION_SOCIETEColumn {
                get {
                    return this.columnDESCRIPTION_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ADRESSE_SOCIETEColumn {
                get {
                    return this.columnADRESSE_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CP_SOCIETEColumn {
                get {
                    return this.columnCP_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TEL_SOCIETEColumn {
                get {
                    return this.columnTEL_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FAX_SOCIETEColumn {
                get {
                    return this.columnFAX_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EMAIL_SOCIETEColumn {
                get {
                    return this.columnEMAIL_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SITE_WEB_SOCETEColumn {
                get {
                    return this.columnSITE_WEB_SOCETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LOGO_SOCIETEColumn {
                get {
                    return this.columnLOGO_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_TVA_SOCIETEColumn {
                get {
                    return this.columnCODE_TVA_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RIB_SOCIETEColumn {
                get {
                    return this.columnRIB_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NUM_COMMANDEColumn {
                get {
                    return this.columnNUM_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PREFIX1_COMMANDEColumn {
                get {
                    return this.columnPREFIX1_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PREFIX2_COMMANDEColumn {
                get {
                    return this.columnPREFIX2_COMMANDE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NUM_FACTUREColumn {
                get {
                    return this.columnNUM_FACTURE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PREFIX1_FACTUREColumn {
                get {
                    return this.columnPREFIX1_FACTURE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PREFIXE2_FACTUREColumn {
                get {
                    return this.columnPREFIXE2_FACTURE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SOCIETERow this[int index] {
                get {
                    return ((SOCIETERow)(this.Rows[index]));
                }
            }
            
            public event SOCIETERowChangeEventHandler SOCIETERowChanging;
            
            public event SOCIETERowChangeEventHandler SOCIETERowChanged;
            
            public event SOCIETERowChangeEventHandler SOCIETERowDeleting;
            
            public event SOCIETERowChangeEventHandler SOCIETERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSOCIETERow(SOCIETERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SOCIETERow AddSOCIETERow(
                        decimal CODE_SOCIETE, 
                        string RS_SOCIETE, 
                        string DESCRIPTION_SOCIETE, 
                        string ADRESSE_SOCIETE, 
                        string CP_SOCIETE, 
                        string TEL_SOCIETE, 
                        string FAX_SOCIETE, 
                        string EMAIL_SOCIETE, 
                        string SITE_WEB_SOCETE, 
                        byte[] LOGO_SOCIETE, 
                        string CODE_TVA_SOCIETE, 
                        string RIB_SOCIETE, 
                        string NUM_COMMANDE, 
                        string PREFIX1_COMMANDE, 
                        string PREFIX2_COMMANDE, 
                        string NUM_FACTURE, 
                        string PREFIX1_FACTURE, 
                        string PREFIXE2_FACTURE) {
                SOCIETERow rowSOCIETERow = ((SOCIETERow)(this.NewRow()));
                rowSOCIETERow.ItemArray = new object[] {
                        CODE_SOCIETE,
                        RS_SOCIETE,
                        DESCRIPTION_SOCIETE,
                        ADRESSE_SOCIETE,
                        CP_SOCIETE,
                        TEL_SOCIETE,
                        FAX_SOCIETE,
                        EMAIL_SOCIETE,
                        SITE_WEB_SOCETE,
                        LOGO_SOCIETE,
                        CODE_TVA_SOCIETE,
                        RIB_SOCIETE,
                        NUM_COMMANDE,
                        PREFIX1_COMMANDE,
                        PREFIX2_COMMANDE,
                        NUM_FACTURE,
                        PREFIX1_FACTURE,
                        PREFIXE2_FACTURE};
                this.Rows.Add(rowSOCIETERow);
                return rowSOCIETERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SOCIETERow FindByCODE_SOCIETE(decimal CODE_SOCIETE) {
                return ((SOCIETERow)(this.Rows.Find(new object[] {
                            CODE_SOCIETE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SOCIETEDataTable cln = ((SOCIETEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SOCIETEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_SOCIETE = base.Columns["CODE_SOCIETE"];
                this.columnRS_SOCIETE = base.Columns["RS_SOCIETE"];
                this.columnDESCRIPTION_SOCIETE = base.Columns["DESCRIPTION_SOCIETE"];
                this.columnADRESSE_SOCIETE = base.Columns["ADRESSE_SOCIETE"];
                this.columnCP_SOCIETE = base.Columns["CP_SOCIETE"];
                this.columnTEL_SOCIETE = base.Columns["TEL_SOCIETE"];
                this.columnFAX_SOCIETE = base.Columns["FAX_SOCIETE"];
                this.columnEMAIL_SOCIETE = base.Columns["EMAIL_SOCIETE"];
                this.columnSITE_WEB_SOCETE = base.Columns["SITE_WEB_SOCETE"];
                this.columnLOGO_SOCIETE = base.Columns["LOGO_SOCIETE"];
                this.columnCODE_TVA_SOCIETE = base.Columns["CODE_TVA_SOCIETE"];
                this.columnRIB_SOCIETE = base.Columns["RIB_SOCIETE"];
                this.columnNUM_COMMANDE = base.Columns["NUM_COMMANDE"];
                this.columnPREFIX1_COMMANDE = base.Columns["PREFIX1_COMMANDE"];
                this.columnPREFIX2_COMMANDE = base.Columns["PREFIX2_COMMANDE"];
                this.columnNUM_FACTURE = base.Columns["NUM_FACTURE"];
                this.columnPREFIX1_FACTURE = base.Columns["PREFIX1_FACTURE"];
                this.columnPREFIXE2_FACTURE = base.Columns["PREFIXE2_FACTURE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_SOCIETE = new System.Data.DataColumn("CODE_SOCIETE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_SOCIETE);
                this.columnRS_SOCIETE = new System.Data.DataColumn("RS_SOCIETE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRS_SOCIETE);
                this.columnDESCRIPTION_SOCIETE = new System.Data.DataColumn("DESCRIPTION_SOCIETE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION_SOCIETE);
                this.columnADRESSE_SOCIETE = new System.Data.DataColumn("ADRESSE_SOCIETE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnADRESSE_SOCIETE);
                this.columnCP_SOCIETE = new System.Data.DataColumn("CP_SOCIETE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCP_SOCIETE);
                this.columnTEL_SOCIETE = new System.Data.DataColumn("TEL_SOCIETE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEL_SOCIETE);
                this.columnFAX_SOCIETE = new System.Data.DataColumn("FAX_SOCIETE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFAX_SOCIETE);
                this.columnEMAIL_SOCIETE = new System.Data.DataColumn("EMAIL_SOCIETE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMAIL_SOCIETE);
                this.columnSITE_WEB_SOCETE = new System.Data.DataColumn("SITE_WEB_SOCETE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSITE_WEB_SOCETE);
                this.columnLOGO_SOCIETE = new System.Data.DataColumn("LOGO_SOCIETE", typeof(byte[]), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGO_SOCIETE);
                this.columnCODE_TVA_SOCIETE = new System.Data.DataColumn("CODE_TVA_SOCIETE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_TVA_SOCIETE);
                this.columnRIB_SOCIETE = new System.Data.DataColumn("RIB_SOCIETE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRIB_SOCIETE);
                this.columnNUM_COMMANDE = new System.Data.DataColumn("NUM_COMMANDE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUM_COMMANDE);
                this.columnPREFIX1_COMMANDE = new System.Data.DataColumn("PREFIX1_COMMANDE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREFIX1_COMMANDE);
                this.columnPREFIX2_COMMANDE = new System.Data.DataColumn("PREFIX2_COMMANDE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREFIX2_COMMANDE);
                this.columnNUM_FACTURE = new System.Data.DataColumn("NUM_FACTURE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUM_FACTURE);
                this.columnPREFIX1_FACTURE = new System.Data.DataColumn("PREFIX1_FACTURE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREFIX1_FACTURE);
                this.columnPREFIXE2_FACTURE = new System.Data.DataColumn("PREFIXE2_FACTURE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREFIXE2_FACTURE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_SOCIETE}, true));
                this.columnCODE_SOCIETE.AllowDBNull = false;
                this.columnCODE_SOCIETE.Unique = true;
                this.columnRS_SOCIETE.AllowDBNull = false;
                this.columnRS_SOCIETE.MaxLength = 2147483647;
                this.columnDESCRIPTION_SOCIETE.AllowDBNull = false;
                this.columnDESCRIPTION_SOCIETE.MaxLength = 2147483647;
                this.columnADRESSE_SOCIETE.AllowDBNull = false;
                this.columnADRESSE_SOCIETE.MaxLength = 2147483647;
                this.columnCP_SOCIETE.AllowDBNull = false;
                this.columnCP_SOCIETE.MaxLength = 2147483647;
                this.columnTEL_SOCIETE.AllowDBNull = false;
                this.columnTEL_SOCIETE.MaxLength = 2147483647;
                this.columnFAX_SOCIETE.AllowDBNull = false;
                this.columnFAX_SOCIETE.MaxLength = 2147483647;
                this.columnEMAIL_SOCIETE.AllowDBNull = false;
                this.columnEMAIL_SOCIETE.MaxLength = 2147483647;
                this.columnSITE_WEB_SOCETE.AllowDBNull = false;
                this.columnSITE_WEB_SOCETE.MaxLength = 2147483647;
                this.columnCODE_TVA_SOCIETE.AllowDBNull = false;
                this.columnCODE_TVA_SOCIETE.MaxLength = 2147483647;
                this.columnRIB_SOCIETE.AllowDBNull = false;
                this.columnRIB_SOCIETE.MaxLength = 2147483647;
                this.columnNUM_COMMANDE.AllowDBNull = false;
                this.columnNUM_COMMANDE.MaxLength = 2147483647;
                this.columnPREFIX1_COMMANDE.AllowDBNull = false;
                this.columnPREFIX1_COMMANDE.MaxLength = 2147483647;
                this.columnPREFIX2_COMMANDE.AllowDBNull = false;
                this.columnPREFIX2_COMMANDE.MaxLength = 2147483647;
                this.columnNUM_FACTURE.AllowDBNull = false;
                this.columnNUM_FACTURE.MaxLength = 2147483647;
                this.columnPREFIX1_FACTURE.AllowDBNull = false;
                this.columnPREFIX1_FACTURE.MaxLength = 2147483647;
                this.columnPREFIXE2_FACTURE.AllowDBNull = false;
                this.columnPREFIXE2_FACTURE.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SOCIETERow NewSOCIETERow() {
                return ((SOCIETERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SOCIETERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SOCIETERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SOCIETERowChanged != null)) {
                    this.SOCIETERowChanged(this, new SOCIETERowChangeEvent(((SOCIETERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SOCIETERowChanging != null)) {
                    this.SOCIETERowChanging(this, new SOCIETERowChangeEvent(((SOCIETERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SOCIETERowDeleted != null)) {
                    this.SOCIETERowDeleted(this, new SOCIETERowChangeEvent(((SOCIETERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SOCIETERowDeleting != null)) {
                    this.SOCIETERowDeleting(this, new SOCIETERowChangeEvent(((SOCIETERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSOCIETERow(SOCIETERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SOCIETEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class STOCKDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_MAG;
            
            private System.Data.DataColumn columnCODE_ARTICLE;
            
            private System.Data.DataColumn columnQTTE_STOCK;
            
            private System.Data.DataColumn columnQTTE_STOCK_MIN;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCKDataTable() {
                this.TableName = "STOCK";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STOCKDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected STOCKDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_MAGColumn {
                get {
                    return this.columnCODE_MAG;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_ARTICLEColumn {
                get {
                    return this.columnCODE_ARTICLE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QTTE_STOCKColumn {
                get {
                    return this.columnQTTE_STOCK;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn QTTE_STOCK_MINColumn {
                get {
                    return this.columnQTTE_STOCK_MIN;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCKRow this[int index] {
                get {
                    return ((STOCKRow)(this.Rows[index]));
                }
            }
            
            public event STOCKRowChangeEventHandler STOCKRowChanging;
            
            public event STOCKRowChangeEventHandler STOCKRowChanged;
            
            public event STOCKRowChangeEventHandler STOCKRowDeleting;
            
            public event STOCKRowChangeEventHandler STOCKRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSTOCKRow(STOCKRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCKRow AddSTOCKRow(MAGAZINRow parentMAGAZINRowByFK_STOCK_MAGAZIN, ARTICLERow parentARTICLERowByFK_STOCK_ARTICLE, string QTTE_STOCK, string QTTE_STOCK_MIN) {
                STOCKRow rowSTOCKRow = ((STOCKRow)(this.NewRow()));
                rowSTOCKRow.ItemArray = new object[] {
                        parentMAGAZINRowByFK_STOCK_MAGAZIN[0],
                        parentARTICLERowByFK_STOCK_ARTICLE[0],
                        QTTE_STOCK,
                        QTTE_STOCK_MIN};
                this.Rows.Add(rowSTOCKRow);
                return rowSTOCKRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                STOCKDataTable cln = ((STOCKDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new STOCKDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_MAG = base.Columns["CODE_MAG"];
                this.columnCODE_ARTICLE = base.Columns["CODE_ARTICLE"];
                this.columnQTTE_STOCK = base.Columns["QTTE_STOCK"];
                this.columnQTTE_STOCK_MIN = base.Columns["QTTE_STOCK_MIN"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_MAG = new System.Data.DataColumn("CODE_MAG", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_MAG);
                this.columnCODE_ARTICLE = new System.Data.DataColumn("CODE_ARTICLE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_ARTICLE);
                this.columnQTTE_STOCK = new System.Data.DataColumn("QTTE_STOCK", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTTE_STOCK);
                this.columnQTTE_STOCK_MIN = new System.Data.DataColumn("QTTE_STOCK_MIN", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTTE_STOCK_MIN);
                this.columnCODE_MAG.AllowDBNull = false;
                this.columnCODE_ARTICLE.AllowDBNull = false;
                this.columnQTTE_STOCK.MaxLength = 10;
                this.columnQTTE_STOCK_MIN.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCKRow NewSTOCKRow() {
                return ((STOCKRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new STOCKRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(STOCKRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.STOCKRowChanged != null)) {
                    this.STOCKRowChanged(this, new STOCKRowChangeEvent(((STOCKRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.STOCKRowChanging != null)) {
                    this.STOCKRowChanging(this, new STOCKRowChangeEvent(((STOCKRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.STOCKRowDeleted != null)) {
                    this.STOCKRowDeleted(this, new STOCKRowChangeEvent(((STOCKRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.STOCKRowDeleting != null)) {
                    this.STOCKRowDeleting(this, new STOCKRowChangeEvent(((STOCKRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSTOCKRow(STOCKRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "STOCKDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TACHEDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_TACHE;
            
            private System.Data.DataColumn columnLIB_TACHE;
            
            private System.Data.DataColumn columnDESCRIPTION_TACHE;
            
            private System.Data.DataColumn columnCODE_FONCTION;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TACHEDataTable() {
                this.TableName = "TACHE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TACHEDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TACHEDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_TACHEColumn {
                get {
                    return this.columnCODE_TACHE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LIB_TACHEColumn {
                get {
                    return this.columnLIB_TACHE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DESCRIPTION_TACHEColumn {
                get {
                    return this.columnDESCRIPTION_TACHE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_FONCTIONColumn {
                get {
                    return this.columnCODE_FONCTION;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TACHERow this[int index] {
                get {
                    return ((TACHERow)(this.Rows[index]));
                }
            }
            
            public event TACHERowChangeEventHandler TACHERowChanging;
            
            public event TACHERowChangeEventHandler TACHERowChanged;
            
            public event TACHERowChangeEventHandler TACHERowDeleting;
            
            public event TACHERowChangeEventHandler TACHERowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTACHERow(TACHERow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TACHERow AddTACHERow(string CODE_TACHE, string LIB_TACHE, string DESCRIPTION_TACHE, FONCTIONALITE_EMPLOYERow parentFONCTIONALITE_EMPLOYERowByFK_TACHE_FONCTIONALITE_EMPLOYE) {
                TACHERow rowTACHERow = ((TACHERow)(this.NewRow()));
                rowTACHERow.ItemArray = new object[] {
                        CODE_TACHE,
                        LIB_TACHE,
                        DESCRIPTION_TACHE,
                        parentFONCTIONALITE_EMPLOYERowByFK_TACHE_FONCTIONALITE_EMPLOYE[0]};
                this.Rows.Add(rowTACHERow);
                return rowTACHERow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TACHERow FindByCODE_TACHE(string CODE_TACHE) {
                return ((TACHERow)(this.Rows.Find(new object[] {
                            CODE_TACHE})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TACHEDataTable cln = ((TACHEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TACHEDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_TACHE = base.Columns["CODE_TACHE"];
                this.columnLIB_TACHE = base.Columns["LIB_TACHE"];
                this.columnDESCRIPTION_TACHE = base.Columns["DESCRIPTION_TACHE"];
                this.columnCODE_FONCTION = base.Columns["CODE_FONCTION"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_TACHE = new System.Data.DataColumn("CODE_TACHE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_TACHE);
                this.columnLIB_TACHE = new System.Data.DataColumn("LIB_TACHE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIB_TACHE);
                this.columnDESCRIPTION_TACHE = new System.Data.DataColumn("DESCRIPTION_TACHE", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION_TACHE);
                this.columnCODE_FONCTION = new System.Data.DataColumn("CODE_FONCTION", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_FONCTION);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_TACHE}, true));
                this.columnCODE_TACHE.AllowDBNull = false;
                this.columnCODE_TACHE.Unique = true;
                this.columnCODE_TACHE.MaxLength = 10;
                this.columnLIB_TACHE.AllowDBNull = false;
                this.columnLIB_TACHE.MaxLength = 2147483647;
                this.columnDESCRIPTION_TACHE.AllowDBNull = false;
                this.columnDESCRIPTION_TACHE.MaxLength = 2147483647;
                this.columnCODE_FONCTION.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TACHERow NewTACHERow() {
                return ((TACHERow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TACHERow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TACHERow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TACHERowChanged != null)) {
                    this.TACHERowChanged(this, new TACHERowChangeEvent(((TACHERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TACHERowChanging != null)) {
                    this.TACHERowChanging(this, new TACHERowChangeEvent(((TACHERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TACHERowDeleted != null)) {
                    this.TACHERowDeleted(this, new TACHERowChangeEvent(((TACHERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TACHERowDeleting != null)) {
                    this.TACHERowDeleting(this, new TACHERowChangeEvent(((TACHERow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTACHERow(TACHERow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TACHEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UTILISATEURDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCODE_USER;
            
            private System.Data.DataColumn columnNOM_USER;
            
            private System.Data.DataColumn columnLOGIN_USER;
            
            private System.Data.DataColumn columnPASSWORD_USER;
            
            private System.Data.DataColumn columnETAT_USER;
            
            private System.Data.DataColumn columnCODE_SOCIETE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UTILISATEURDataTable() {
                this.TableName = "UTILISATEUR";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UTILISATEURDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UTILISATEURDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_USERColumn {
                get {
                    return this.columnCODE_USER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NOM_USERColumn {
                get {
                    return this.columnNOM_USER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LOGIN_USERColumn {
                get {
                    return this.columnLOGIN_USER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PASSWORD_USERColumn {
                get {
                    return this.columnPASSWORD_USER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ETAT_USERColumn {
                get {
                    return this.columnETAT_USER;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CODE_SOCIETEColumn {
                get {
                    return this.columnCODE_SOCIETE;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UTILISATEURRow this[int index] {
                get {
                    return ((UTILISATEURRow)(this.Rows[index]));
                }
            }
            
            public event UTILISATEURRowChangeEventHandler UTILISATEURRowChanging;
            
            public event UTILISATEURRowChangeEventHandler UTILISATEURRowChanged;
            
            public event UTILISATEURRowChangeEventHandler UTILISATEURRowDeleting;
            
            public event UTILISATEURRowChangeEventHandler UTILISATEURRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUTILISATEURRow(UTILISATEURRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UTILISATEURRow AddUTILISATEURRow(decimal CODE_USER, string NOM_USER, string LOGIN_USER, string PASSWORD_USER, bool ETAT_USER, SOCIETERow parentSOCIETERowByFK_UTILISATEUR_SOCIETE) {
                UTILISATEURRow rowUTILISATEURRow = ((UTILISATEURRow)(this.NewRow()));
                rowUTILISATEURRow.ItemArray = new object[] {
                        CODE_USER,
                        NOM_USER,
                        LOGIN_USER,
                        PASSWORD_USER,
                        ETAT_USER,
                        parentSOCIETERowByFK_UTILISATEUR_SOCIETE[0]};
                this.Rows.Add(rowUTILISATEURRow);
                return rowUTILISATEURRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UTILISATEURRow FindByCODE_USER(decimal CODE_USER) {
                return ((UTILISATEURRow)(this.Rows.Find(new object[] {
                            CODE_USER})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UTILISATEURDataTable cln = ((UTILISATEURDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UTILISATEURDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_USER = base.Columns["CODE_USER"];
                this.columnNOM_USER = base.Columns["NOM_USER"];
                this.columnLOGIN_USER = base.Columns["LOGIN_USER"];
                this.columnPASSWORD_USER = base.Columns["PASSWORD_USER"];
                this.columnETAT_USER = base.Columns["ETAT_USER"];
                this.columnCODE_SOCIETE = base.Columns["CODE_SOCIETE"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_USER = new System.Data.DataColumn("CODE_USER", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_USER);
                this.columnNOM_USER = new System.Data.DataColumn("NOM_USER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNOM_USER);
                this.columnLOGIN_USER = new System.Data.DataColumn("LOGIN_USER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOGIN_USER);
                this.columnPASSWORD_USER = new System.Data.DataColumn("PASSWORD_USER", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPASSWORD_USER);
                this.columnETAT_USER = new System.Data.DataColumn("ETAT_USER", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnETAT_USER);
                this.columnCODE_SOCIETE = new System.Data.DataColumn("CODE_SOCIETE", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_SOCIETE);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCODE_USER}, true));
                this.columnCODE_USER.AllowDBNull = false;
                this.columnCODE_USER.Unique = true;
                this.columnNOM_USER.AllowDBNull = false;
                this.columnNOM_USER.MaxLength = 2147483647;
                this.columnLOGIN_USER.AllowDBNull = false;
                this.columnLOGIN_USER.MaxLength = 2147483647;
                this.columnPASSWORD_USER.AllowDBNull = false;
                this.columnPASSWORD_USER.MaxLength = 2147483647;
                this.columnETAT_USER.AllowDBNull = false;
                this.columnCODE_SOCIETE.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UTILISATEURRow NewUTILISATEURRow() {
                return ((UTILISATEURRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UTILISATEURRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UTILISATEURRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UTILISATEURRowChanged != null)) {
                    this.UTILISATEURRowChanged(this, new UTILISATEURRowChangeEvent(((UTILISATEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UTILISATEURRowChanging != null)) {
                    this.UTILISATEURRowChanging(this, new UTILISATEURRowChangeEvent(((UTILISATEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UTILISATEURRowDeleted != null)) {
                    this.UTILISATEURRowDeleted(this, new UTILISATEURRowChangeEvent(((UTILISATEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UTILISATEURRowDeleting != null)) {
                    this.UTILISATEURRowDeleting(this, new UTILISATEURRowChangeEvent(((UTILISATEURRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUTILISATEURRow(UTILISATEURRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                GESTION_COMMERCIALEDataSet ds = new GESTION_COMMERCIALEDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UTILISATEURDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ARTICLERow : System.Data.DataRow {
            
            private ARTICLEDataTable tableARTICLE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ARTICLERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableARTICLE = ((ARTICLEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_ARTICLE {
                get {
                    return ((decimal)(this[this.tableARTICLE.CODE_ARTICLEColumn]));
                }
                set {
                    this[this.tableARTICLE.CODE_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REF_ARTICLE {
                get {
                    return ((string)(this[this.tableARTICLE.REF_ARTICLEColumn]));
                }
                set {
                    this[this.tableARTICLE.REF_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESIGNATION {
                get {
                    return ((string)(this[this.tableARTICLE.DESIGNATIONColumn]));
                }
                set {
                    this[this.tableARTICLE.DESIGNATIONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FAMILLE_ARTICLE {
                get {
                    try {
                        return ((string)(this[this.tableARTICLE.FAMILLE_ARTICLEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'FAMILLE_ARTICLE\' dans la table \'ARTICLE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableARTICLE.FAMILLE_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableARTICLE.DESCRIPTIONColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'DESCRIPTION\' dans la table \'ARTICLE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableARTICLE.DESCRIPTIONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_BARRE_ARTICLE {
                get {
                    try {
                        return ((string)(this[this.tableARTICLE.CODE_BARRE_ARTICLEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'CODE_BARRE_ARTICLE\' dans la table \'ARTICLE\' est DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableARTICLE.CODE_BARRE_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QTE_ARTICLE {
                get {
                    return ((decimal)(this[this.tableARTICLE.QTE_ARTICLEColumn]));
                }
                set {
                    this[this.tableARTICLE.QTE_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QTE_MIN_ARTICLE {
                get {
                    try {
                        return ((decimal)(this[this.tableARTICLE.QTE_MIN_ARTICLEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'QTE_MIN_ARTICLE\' dans la table \'ARTICLE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableARTICLE.QTE_MIN_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] PHOTO_ARTICLE {
                get {
                    try {
                        return ((byte[])(this[this.tableARTICLE.PHOTO_ARTICLEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'PHOTO_ARTICLE\' dans la table \'ARTICLE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableARTICLE.PHOTO_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRIX_HT_ARTICLE {
                get {
                    return ((decimal)(this[this.tableARTICLE.PRIX_HT_ARTICLEColumn]));
                }
                set {
                    this[this.tableARTICLE.PRIX_HT_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TVA_ARTICLE {
                get {
                    return ((decimal)(this[this.tableARTICLE.TVA_ARTICLEColumn]));
                }
                set {
                    this[this.tableARTICLE.TVA_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ETAT_ARTICLE {
                get {
                    return ((bool)(this[this.tableARTICLE.ETAT_ARTICLEColumn]));
                }
                set {
                    this[this.tableARTICLE.ETAT_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_CATEG {
                get {
                    return ((decimal)(this[this.tableARTICLE.CODE_CATEGColumn]));
                }
                set {
                    this[this.tableARTICLE.CODE_CATEGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_MAG {
                get {
                    return ((decimal)(this[this.tableARTICLE.CODE_MAGColumn]));
                }
                set {
                    this[this.tableARTICLE.CODE_MAGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_FOURNISSEUR {
                get {
                    return ((decimal)(this[this.tableARTICLE.CODE_FOURNISSEURColumn]));
                }
                set {
                    this[this.tableARTICLE.CODE_FOURNISSEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIERow CATEGORIERow {
                get {
                    return ((CATEGORIERow)(this.GetParentRow(this.Table.ParentRelations["FK_ARTICLE_CATEGORIE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ARTICLE_CATEGORIE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FOURNISSEURRow FOURNISSEURRow {
                get {
                    return ((FOURNISSEURRow)(this.GetParentRow(this.Table.ParentRelations["FK_ARTICLE_FOURNISSEUR"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ARTICLE_FOURNISSEUR"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFAMILLE_ARTICLENull() {
                return this.IsNull(this.tableARTICLE.FAMILLE_ARTICLEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFAMILLE_ARTICLENull() {
                this[this.tableARTICLE.FAMILLE_ARTICLEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableARTICLE.DESCRIPTIONColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableARTICLE.DESCRIPTIONColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE_BARRE_ARTICLENull() {
                return this.IsNull(this.tableARTICLE.CODE_BARRE_ARTICLEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE_BARRE_ARTICLENull() {
                this[this.tableARTICLE.CODE_BARRE_ARTICLEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQTE_MIN_ARTICLENull() {
                return this.IsNull(this.tableARTICLE.QTE_MIN_ARTICLEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQTE_MIN_ARTICLENull() {
                this[this.tableARTICLE.QTE_MIN_ARTICLEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPHOTO_ARTICLENull() {
                return this.IsNull(this.tableARTICLE.PHOTO_ARTICLEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPHOTO_ARTICLENull() {
                this[this.tableARTICLE.PHOTO_ARTICLEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LG_BON_LIVRAISONRow[] GetLG_BON_LIVRAISONRows() {
                return ((LG_BON_LIVRAISONRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LG_BON_LIVRAISON_ARTICLE"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_COMMANDERow[] GetLIGNE_COMMANDERows() {
                return ((LIGNE_COMMANDERow[])(base.GetChildRows(this.Table.ChildRelations["FK_LIGNE_COMMANDE_ARTICLE"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_FACTURERow[] GetLIGNE_FACTURERows() {
                return ((LIGNE_FACTURERow[])(base.GetChildRows(this.Table.ChildRelations["FK_LIGNE_FACTURE_ARTICLE"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCKRow[] GetSTOCKRows() {
                return ((STOCKRow[])(base.GetChildRows(this.Table.ChildRelations["FK_STOCK_ARTICLE"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BON_DE_LIVRAISONRow : System.Data.DataRow {
            
            private BON_DE_LIVRAISONDataTable tableBON_DE_LIVRAISON;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BON_DE_LIVRAISONRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBON_DE_LIVRAISON = ((BON_DE_LIVRAISONDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_B_LIV {
                get {
                    return ((string)(this[this.tableBON_DE_LIVRAISON.CODE_B_LIVColumn]));
                }
                set {
                    this[this.tableBON_DE_LIVRAISON.CODE_B_LIVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DATE_B_LIV {
                get {
                    return ((string)(this[this.tableBON_DE_LIVRAISON.DATE_B_LIVColumn]));
                }
                set {
                    this[this.tableBON_DE_LIVRAISON.DATE_B_LIVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_CLIENT {
                get {
                    return ((decimal)(this[this.tableBON_DE_LIVRAISON.CODE_CLIENTColumn]));
                }
                set {
                    this[this.tableBON_DE_LIVRAISON.CODE_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTRow CLIENTRow {
                get {
                    return ((CLIENTRow)(this.GetParentRow(this.Table.ParentRelations["FK_BON_DE_LIVRAISON_CLIENT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_BON_DE_LIVRAISON_CLIENT"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LG_BON_LIVRAISONRow[] GetLG_BON_LIVRAISONRows() {
                return ((LG_BON_LIVRAISONRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LG_BON_LIVRAISON_BON_DE_LIVRAISON"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISON_CLIENTRow[] GetLIVRAISON_CLIENTRows() {
                return ((LIVRAISON_CLIENTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LIVRAISON_CLIENT_BON_DE_LIVRAISON"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CATEGORIERow : System.Data.DataRow {
            
            private CATEGORIEDataTable tableCATEGORIE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CATEGORIERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCATEGORIE = ((CATEGORIEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_CATEG {
                get {
                    return ((decimal)(this[this.tableCATEGORIE.CODE_CATEGColumn]));
                }
                set {
                    this[this.tableCATEGORIE.CODE_CATEGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LIB_CATEG {
                get {
                    return ((string)(this[this.tableCATEGORIE.LIB_CATEGColumn]));
                }
                set {
                    this[this.tableCATEGORIE.LIB_CATEGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION_CATEG {
                get {
                    try {
                        return ((string)(this[this.tableCATEGORIE.DESCRIPTION_CATEGColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'DESCRIPTION_CATEG\' dans la table \'CATEGORIE\' est DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableCATEGORIE.DESCRIPTION_CATEGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTION_CATEGNull() {
                return this.IsNull(this.tableCATEGORIE.DESCRIPTION_CATEGColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTION_CATEGNull() {
                this[this.tableCATEGORIE.DESCRIPTION_CATEGColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERow[] GetARTICLERows() {
                return ((ARTICLERow[])(base.GetChildRows(this.Table.ChildRelations["FK_ARTICLE_CATEGORIE"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CLIENTRow : System.Data.DataRow {
            
            private CLIENTDataTable tableCLIENT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CLIENTRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCLIENT = ((CLIENTDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_CLIENT {
                get {
                    return ((decimal)(this[this.tableCLIENT.CODE_CLIENTColumn]));
                }
                set {
                    this[this.tableCLIENT.CODE_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RS_CLIENT {
                get {
                    return ((string)(this[this.tableCLIENT.RS_CLIENTColumn]));
                }
                set {
                    this[this.tableCLIENT.RS_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADRESSE_CLIENT {
                get {
                    return ((string)(this[this.tableCLIENT.ADRESSE_CLIENTColumn]));
                }
                set {
                    this[this.tableCLIENT.ADRESSE_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CP_CLIENT {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.CP_CLIENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'CP_CLIENT\' dans la table \'CLIENT\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.CP_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL_CLIENT {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.TEL_CLIENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'TEL_CLIENT\' dans la table \'CLIENT\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.TEL_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FAX_CLIENT {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.FAX_CLIENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'FAX_CLIENT\' dans la table \'CLIENT\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.FAX_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL_CLIENT {
                get {
                    try {
                        return ((string)(this[this.tableCLIENT.EMAIL_CLIENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'EMAIL_CLIENT\' dans la table \'CLIENT\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.EMAIL_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool EXO_CLIENT {
                get {
                    try {
                        return ((bool)(this[this.tableCLIENT.EXO_CLIENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'EXO_CLIENT\' dans la table \'CLIENT\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableCLIENT.EXO_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ATTEST_EXO_CLIENT {
                get {
                    return ((string)(this[this.tableCLIENT.ATTEST_EXO_CLIENTColumn]));
                }
                set {
                    this[this.tableCLIENT.ATTEST_EXO_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_DOUANE_CLIENT {
                get {
                    return ((string)(this[this.tableCLIENT.CODE_DOUANE_CLIENTColumn]));
                }
                set {
                    this[this.tableCLIENT.CODE_DOUANE_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_TVA_CLIENT {
                get {
                    return ((string)(this[this.tableCLIENT.CODE_TVA_CLIENTColumn]));
                }
                set {
                    this[this.tableCLIENT.CODE_TVA_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ETAT_CLIENT {
                get {
                    return ((bool)(this[this.tableCLIENT.ETAT_CLIENTColumn]));
                }
                set {
                    this[this.tableCLIENT.ETAT_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCP_CLIENTNull() {
                return this.IsNull(this.tableCLIENT.CP_CLIENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCP_CLIENTNull() {
                this[this.tableCLIENT.CP_CLIENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTEL_CLIENTNull() {
                return this.IsNull(this.tableCLIENT.TEL_CLIENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTEL_CLIENTNull() {
                this[this.tableCLIENT.TEL_CLIENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFAX_CLIENTNull() {
                return this.IsNull(this.tableCLIENT.FAX_CLIENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFAX_CLIENTNull() {
                this[this.tableCLIENT.FAX_CLIENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAIL_CLIENTNull() {
                return this.IsNull(this.tableCLIENT.EMAIL_CLIENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAIL_CLIENTNull() {
                this[this.tableCLIENT.EMAIL_CLIENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXO_CLIENTNull() {
                return this.IsNull(this.tableCLIENT.EXO_CLIENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXO_CLIENTNull() {
                this[this.tableCLIENT.EXO_CLIENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BON_DE_LIVRAISONRow[] GetBON_DE_LIVRAISONRows() {
                return ((BON_DE_LIVRAISONRow[])(base.GetChildRows(this.Table.ChildRelations["FK_BON_DE_LIVRAISON_CLIENT"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMMANDERow[] GetCOMMANDERows() {
                return ((COMMANDERow[])(base.GetChildRows(this.Table.ChildRelations["FK_COMMANDE_CLIENT"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACTURERow[] GetFACTURERows() {
                return ((FACTURERow[])(base.GetChildRows(this.Table.ChildRelations["FK_FACTURE_CLIENT"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COMMANDERow : System.Data.DataRow {
            
            private COMMANDEDataTable tableCOMMANDE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMMANDERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOMMANDE = ((COMMANDEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_COMMANDE {
                get {
                    return ((string)(this[this.tableCOMMANDE.CODE_COMMANDEColumn]));
                }
                set {
                    this[this.tableCOMMANDE.CODE_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_CLIENT {
                get {
                    return ((decimal)(this[this.tableCOMMANDE.CODE_CLIENTColumn]));
                }
                set {
                    this[this.tableCOMMANDE.CODE_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE_COMMANDE {
                get {
                    return ((System.DateTime)(this[this.tableCOMMANDE.DATE_COMMANDEColumn]));
                }
                set {
                    this[this.tableCOMMANDE.DATE_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool PRIORITE_COMMANDE {
                get {
                    return ((bool)(this[this.tableCOMMANDE.PRIORITE_COMMANDEColumn]));
                }
                set {
                    this[this.tableCOMMANDE.PRIORITE_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE_EXPIRATION_COMMANDE {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCOMMANDE.DATE_EXPIRATION_COMMANDEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'DATE_EXPIRATION_COMMANDE\' dans la table \'COMMANDE\' est" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMMANDE.DATE_EXPIRATION_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_EMPLOYE {
                get {
                    return ((decimal)(this[this.tableCOMMANDE.CODE_EMPLOYEColumn]));
                }
                set {
                    this[this.tableCOMMANDE.CODE_EMPLOYEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTRow CLIENTRow {
                get {
                    return ((CLIENTRow)(this.GetParentRow(this.Table.ParentRelations["FK_COMMANDE_CLIENT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_COMMANDE_CLIENT"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERow EMPLOYERow {
                get {
                    return ((EMPLOYERow)(this.GetParentRow(this.Table.ParentRelations["FK_COMMANDE_EMPLOYE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_COMMANDE_EMPLOYE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATE_EXPIRATION_COMMANDENull() {
                return this.IsNull(this.tableCOMMANDE.DATE_EXPIRATION_COMMANDEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATE_EXPIRATION_COMMANDENull() {
                this[this.tableCOMMANDE.DATE_EXPIRATION_COMMANDEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_COMMANDERow[] GetLIGNE_COMMANDERows() {
                return ((LIGNE_COMMANDERow[])(base.GetChildRows(this.Table.ChildRelations["FK_LIGNE_COMMANDE_COMMANDE"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISON_CLIENTRow[] GetLIVRAISON_CLIENTRows() {
                return ((LIVRAISON_CLIENTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LIVRAISON_CLIENT_COMMANDE"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EMPLOYERow : System.Data.DataRow {
            
            private EMPLOYEDataTable tableEMPLOYE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EMPLOYERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEMPLOYE = ((EMPLOYEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_EMPLOYE {
                get {
                    return ((decimal)(this[this.tableEMPLOYE.CODE_EMPLOYEColumn]));
                }
                set {
                    this[this.tableEMPLOYE.CODE_EMPLOYEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOM_EMPLOYE {
                get {
                    return ((string)(this[this.tableEMPLOYE.NOM_EMPLOYEColumn]));
                }
                set {
                    this[this.tableEMPLOYE.NOM_EMPLOYEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRENOM_EMPLOYE {
                get {
                    return ((string)(this[this.tableEMPLOYE.PRENOM_EMPLOYEColumn]));
                }
                set {
                    this[this.tableEMPLOYE.PRENOM_EMPLOYEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE_NAIS_EMPLOYE {
                get {
                    return ((System.DateTime)(this[this.tableEMPLOYE.DATE_NAIS_EMPLOYEColumn]));
                }
                set {
                    this[this.tableEMPLOYE.DATE_NAIS_EMPLOYEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADRESSE_EMPLOYE {
                get {
                    return ((string)(this[this.tableEMPLOYE.ADRESSE_EMPLOYEColumn]));
                }
                set {
                    this[this.tableEMPLOYE.ADRESSE_EMPLOYEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL_EMPLOYE {
                get {
                    try {
                        return ((string)(this[this.tableEMPLOYE.TEL_EMPLOYEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'TEL_EMPLOYE\' dans la table \'EMPLOYE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableEMPLOYE.TEL_EMPLOYEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL_EMPLOYE {
                get {
                    try {
                        return ((string)(this[this.tableEMPLOYE.EMAIL_EMPLOYEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'EMAIL_EMPLOYE\' dans la table \'EMPLOYE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableEMPLOYE.EMAIL_EMPLOYEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE_EMBAUCHE_EMPLOYE {
                get {
                    return ((System.DateTime)(this[this.tableEMPLOYE.DATE_EMBAUCHE_EMPLOYEColumn]));
                }
                set {
                    this[this.tableEMPLOYE.DATE_EMBAUCHE_EMPLOYEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOGIN_USER {
                get {
                    try {
                        return ((string)(this[this.tableEMPLOYE.LOGIN_USERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'LOGIN_USER\' dans la table \'EMPLOYE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableEMPLOYE.LOGIN_USERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PASSWORD_USER {
                get {
                    try {
                        return ((string)(this[this.tableEMPLOYE.PASSWORD_USERColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'PASSWORD_USER\' dans la table \'EMPLOYE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableEMPLOYE.PASSWORD_USERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ETAT_USER {
                get {
                    return ((bool)(this[this.tableEMPLOYE.ETAT_USERColumn]));
                }
                set {
                    this[this.tableEMPLOYE.ETAT_USERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_SOCIETE {
                get {
                    return ((decimal)(this[this.tableEMPLOYE.CODE_SOCIETEColumn]));
                }
                set {
                    this[this.tableEMPLOYE.CODE_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_MAG {
                get {
                    return ((decimal)(this[this.tableEMPLOYE.CODE_MAGColumn]));
                }
                set {
                    this[this.tableEMPLOYE.CODE_MAGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_FONCTION {
                get {
                    return ((decimal)(this[this.tableEMPLOYE.CODE_FONCTIONColumn]));
                }
                set {
                    this[this.tableEMPLOYE.CODE_FONCTIONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FONCTIONALITE_EMPLOYERow FONCTIONALITE_EMPLOYERow {
                get {
                    return ((FONCTIONALITE_EMPLOYERow)(this.GetParentRow(this.Table.ParentRelations["FK_EMPLOYE_FONCTIONALITE_EMPLOYE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EMPLOYE_FONCTIONALITE_EMPLOYE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAGAZINRow MAGAZINRow {
                get {
                    return ((MAGAZINRow)(this.GetParentRow(this.Table.ParentRelations["FK_EMPLOYE_MAGAZIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EMPLOYE_MAGAZIN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SOCIETERow SOCIETERow {
                get {
                    return ((SOCIETERow)(this.GetParentRow(this.Table.ParentRelations["FK_EMPLOYE_SOCIETE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EMPLOYE_SOCIETE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTEL_EMPLOYENull() {
                return this.IsNull(this.tableEMPLOYE.TEL_EMPLOYEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTEL_EMPLOYENull() {
                this[this.tableEMPLOYE.TEL_EMPLOYEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMAIL_EMPLOYENull() {
                return this.IsNull(this.tableEMPLOYE.EMAIL_EMPLOYEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMAIL_EMPLOYENull() {
                this[this.tableEMPLOYE.EMAIL_EMPLOYEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOGIN_USERNull() {
                return this.IsNull(this.tableEMPLOYE.LOGIN_USERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOGIN_USERNull() {
                this[this.tableEMPLOYE.LOGIN_USERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPASSWORD_USERNull() {
                return this.IsNull(this.tableEMPLOYE.PASSWORD_USERColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPASSWORD_USERNull() {
                this[this.tableEMPLOYE.PASSWORD_USERColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMMANDERow[] GetCOMMANDERows() {
                return ((COMMANDERow[])(base.GetChildRows(this.Table.ChildRelations["FK_COMMANDE_EMPLOYE"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACTURERow[] GetFACTURERows() {
                return ((FACTURERow[])(base.GetChildRows(this.Table.ChildRelations["FK_FACTURE_EMPLOYE"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISON_CLIENTRow[] GetLIVRAISON_CLIENTRows() {
                return ((LIVRAISON_CLIENTRow[])(base.GetChildRows(this.Table.ChildRelations["FK_LIVRAISON_CLIENT_EMPLOYE"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FACTURERow : System.Data.DataRow {
            
            private FACTUREDataTable tableFACTURE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FACTURERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFACTURE = ((FACTUREDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_FACTURE {
                get {
                    return ((string)(this[this.tableFACTURE.CODE_FACTUREColumn]));
                }
                set {
                    this[this.tableFACTURE.CODE_FACTUREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE_FACTURE {
                get {
                    return ((System.DateTime)(this[this.tableFACTURE.DATE_FACTUREColumn]));
                }
                set {
                    this[this.tableFACTURE.DATE_FACTUREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_CLIENT {
                get {
                    return ((decimal)(this[this.tableFACTURE.CODE_CLIENTColumn]));
                }
                set {
                    this[this.tableFACTURE.CODE_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MONTANT_HT_FACTURE {
                get {
                    return ((decimal)(this[this.tableFACTURE.MONTANT_HT_FACTUREColumn]));
                }
                set {
                    this[this.tableFACTURE.MONTANT_HT_FACTUREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MONTANT_TVA {
                get {
                    return ((decimal)(this[this.tableFACTURE.MONTANT_TVAColumn]));
                }
                set {
                    this[this.tableFACTURE.MONTANT_TVAColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MONTANT_TTC {
                get {
                    return ((decimal)(this[this.tableFACTURE.MONTANT_TTCColumn]));
                }
                set {
                    this[this.tableFACTURE.MONTANT_TTCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TAUX_REMISE {
                get {
                    return ((decimal)(this[this.tableFACTURE.TAUX_REMISEColumn]));
                }
                set {
                    this[this.tableFACTURE.TAUX_REMISEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MONTANT_BASE {
                get {
                    return ((decimal)(this[this.tableFACTURE.MONTANT_BASEColumn]));
                }
                set {
                    this[this.tableFACTURE.MONTANT_BASEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TIMBRE_FACTURE {
                get {
                    return ((decimal)(this[this.tableFACTURE.TIMBRE_FACTUREColumn]));
                }
                set {
                    this[this.tableFACTURE.TIMBRE_FACTUREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MONTANT_TOTAL_FACTURE {
                get {
                    return ((decimal)(this[this.tableFACTURE.MONTANT_TOTAL_FACTUREColumn]));
                }
                set {
                    this[this.tableFACTURE.MONTANT_TOTAL_FACTUREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MONTANT_LETTRE {
                get {
                    return ((string)(this[this.tableFACTURE.MONTANT_LETTREColumn]));
                }
                set {
                    this[this.tableFACTURE.MONTANT_LETTREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ANNULATION_FACTURE {
                get {
                    return ((bool)(this[this.tableFACTURE.ANNULATION_FACTUREColumn]));
                }
                set {
                    this[this.tableFACTURE.ANNULATION_FACTUREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REGLER {
                get {
                    return ((string)(this[this.tableFACTURE.REGLERColumn]));
                }
                set {
                    this[this.tableFACTURE.REGLERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CREDIT {
                get {
                    try {
                        return ((decimal)(this[this.tableFACTURE.CREDITColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'CREDIT\' dans la table \'FACTURE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableFACTURE.CREDITColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAGASIN {
                get {
                    try {
                        return ((string)(this[this.tableFACTURE.MAGASINColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'MAGASIN\' dans la table \'FACTURE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableFACTURE.MAGASINColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_EMPLOYE {
                get {
                    return ((decimal)(this[this.tableFACTURE.CODE_EMPLOYEColumn]));
                }
                set {
                    this[this.tableFACTURE.CODE_EMPLOYEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_REGLEMENT_CLIENT {
                get {
                    return ((string)(this[this.tableFACTURE.CODE_REGLEMENT_CLIENTColumn]));
                }
                set {
                    this[this.tableFACTURE.CODE_REGLEMENT_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTRow CLIENTRow {
                get {
                    return ((CLIENTRow)(this.GetParentRow(this.Table.ParentRelations["FK_FACTURE_CLIENT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FACTURE_CLIENT"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERow EMPLOYERow {
                get {
                    return ((EMPLOYERow)(this.GetParentRow(this.Table.ParentRelations["FK_FACTURE_EMPLOYE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FACTURE_EMPLOYE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGLEMENT_CLIENTRow REGLEMENT_CLIENTRow {
                get {
                    return ((REGLEMENT_CLIENTRow)(this.GetParentRow(this.Table.ParentRelations["FK_FACTURE_REGLEMENT_CLIENT"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FACTURE_REGLEMENT_CLIENT"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREDITNull() {
                return this.IsNull(this.tableFACTURE.CREDITColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREDITNull() {
                this[this.tableFACTURE.CREDITColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAGASINNull() {
                return this.IsNull(this.tableFACTURE.MAGASINColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAGASINNull() {
                this[this.tableFACTURE.MAGASINColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_FACTURERow[] GetLIGNE_FACTURERows() {
                return ((LIGNE_FACTURERow[])(base.GetChildRows(this.Table.ChildRelations["FK_LIGNE_FACTURE_FACTURE"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FONCTIONALITE_EMPLOYERow : System.Data.DataRow {
            
            private FONCTIONALITE_EMPLOYEDataTable tableFONCTIONALITE_EMPLOYE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FONCTIONALITE_EMPLOYERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFONCTIONALITE_EMPLOYE = ((FONCTIONALITE_EMPLOYEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_FONCTION {
                get {
                    return ((decimal)(this[this.tableFONCTIONALITE_EMPLOYE.CODE_FONCTIONColumn]));
                }
                set {
                    this[this.tableFONCTIONALITE_EMPLOYE.CODE_FONCTIONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LIB_FONCTION {
                get {
                    return ((string)(this[this.tableFONCTIONALITE_EMPLOYE.LIB_FONCTIONColumn]));
                }
                set {
                    this[this.tableFONCTIONALITE_EMPLOYE.LIB_FONCTIONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERow[] GetEMPLOYERows() {
                return ((EMPLOYERow[])(base.GetChildRows(this.Table.ChildRelations["FK_EMPLOYE_FONCTIONALITE_EMPLOYE"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TACHERow[] GetTACHERows() {
                return ((TACHERow[])(base.GetChildRows(this.Table.ChildRelations["FK_TACHE_FONCTIONALITE_EMPLOYE"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FOURNISSEURRow : System.Data.DataRow {
            
            private FOURNISSEURDataTable tableFOURNISSEUR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FOURNISSEURRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFOURNISSEUR = ((FOURNISSEURDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_FOURNISSEUR {
                get {
                    return ((decimal)(this[this.tableFOURNISSEUR.CODE_FOURNISSEURColumn]));
                }
                set {
                    this[this.tableFOURNISSEUR.CODE_FOURNISSEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RS_FOURNISEEUR {
                get {
                    return ((string)(this[this.tableFOURNISSEUR.RS_FOURNISEEURColumn]));
                }
                set {
                    this[this.tableFOURNISSEUR.RS_FOURNISEEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADRESSE_FOURNISSEUR {
                get {
                    return ((string)(this[this.tableFOURNISSEUR.ADRESSE_FOURNISSEURColumn]));
                }
                set {
                    this[this.tableFOURNISSEUR.ADRESSE_FOURNISSEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL_FOURNISSEUR {
                get {
                    return ((string)(this[this.tableFOURNISSEUR.TEL_FOURNISSEURColumn]));
                }
                set {
                    this[this.tableFOURNISSEUR.TEL_FOURNISSEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FAX_FOURNISSEUR {
                get {
                    return ((string)(this[this.tableFOURNISSEUR.FAX_FOURNISSEURColumn]));
                }
                set {
                    this[this.tableFOURNISSEUR.FAX_FOURNISSEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL_FOURNISSEUR {
                get {
                    return ((string)(this[this.tableFOURNISSEUR.EMAIL_FOURNISSEURColumn]));
                }
                set {
                    this[this.tableFOURNISSEUR.EMAIL_FOURNISSEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SITE_WEB_FOURNISSEUR {
                get {
                    try {
                        return ((string)(this[this.tableFOURNISSEUR.SITE_WEB_FOURNISSEURColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'SITE_WEB_FOURNISSEUR\' dans la table \'FOURNISSEUR\' est " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableFOURNISSEUR.SITE_WEB_FOURNISSEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RIB_FOURNISSEUR {
                get {
                    return ((string)(this[this.tableFOURNISSEUR.RIB_FOURNISSEURColumn]));
                }
                set {
                    this[this.tableFOURNISSEUR.RIB_FOURNISSEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_TVA_FOURNISSEUR {
                get {
                    return ((string)(this[this.tableFOURNISSEUR.CODE_TVA_FOURNISSEURColumn]));
                }
                set {
                    this[this.tableFOURNISSEUR.CODE_TVA_FOURNISSEURColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSITE_WEB_FOURNISSEURNull() {
                return this.IsNull(this.tableFOURNISSEUR.SITE_WEB_FOURNISSEURColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSITE_WEB_FOURNISSEURNull() {
                this[this.tableFOURNISSEUR.SITE_WEB_FOURNISSEURColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERow[] GetARTICLERows() {
                return ((ARTICLERow[])(base.GetChildRows(this.Table.ChildRelations["FK_ARTICLE_FOURNISSEUR"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LG_BON_LIVRAISONRow : System.Data.DataRow {
            
            private LG_BON_LIVRAISONDataTable tableLG_BON_LIVRAISON;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LG_BON_LIVRAISONRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLG_BON_LIVRAISON = ((LG_BON_LIVRAISONDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_B_LIV {
                get {
                    return ((string)(this[this.tableLG_BON_LIVRAISON.CODE_B_LIVColumn]));
                }
                set {
                    this[this.tableLG_BON_LIVRAISON.CODE_B_LIVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_ARTICLE {
                get {
                    return ((decimal)(this[this.tableLG_BON_LIVRAISON.CODE_ARTICLEColumn]));
                }
                set {
                    this[this.tableLG_BON_LIVRAISON.CODE_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QTE_LIGNE_B_LIV {
                get {
                    return ((decimal)(this[this.tableLG_BON_LIVRAISON.QTE_LIGNE_B_LIVColumn]));
                }
                set {
                    this[this.tableLG_BON_LIVRAISON.QTE_LIGNE_B_LIVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRIX_HT_B_LIV {
                get {
                    return ((decimal)(this[this.tableLG_BON_LIVRAISON.PRIX_HT_B_LIVColumn]));
                }
                set {
                    this[this.tableLG_BON_LIVRAISON.PRIX_HT_B_LIVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TVA_B_LIV {
                get {
                    return ((decimal)(this[this.tableLG_BON_LIVRAISON.TVA_B_LIVColumn]));
                }
                set {
                    this[this.tableLG_BON_LIVRAISON.TVA_B_LIVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERow ARTICLERow {
                get {
                    return ((ARTICLERow)(this.GetParentRow(this.Table.ParentRelations["FK_LG_BON_LIVRAISON_ARTICLE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LG_BON_LIVRAISON_ARTICLE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BON_DE_LIVRAISONRow BON_DE_LIVRAISONRow {
                get {
                    return ((BON_DE_LIVRAISONRow)(this.GetParentRow(this.Table.ParentRelations["FK_LG_BON_LIVRAISON_BON_DE_LIVRAISON"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LG_BON_LIVRAISON_BON_DE_LIVRAISON"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LIGNE_COMMANDERow : System.Data.DataRow {
            
            private LIGNE_COMMANDEDataTable tableLIGNE_COMMANDE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIGNE_COMMANDERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLIGNE_COMMANDE = ((LIGNE_COMMANDEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_ARTICLE {
                get {
                    return ((decimal)(this[this.tableLIGNE_COMMANDE.CODE_ARTICLEColumn]));
                }
                set {
                    this[this.tableLIGNE_COMMANDE.CODE_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_COMMANDE {
                get {
                    return ((string)(this[this.tableLIGNE_COMMANDE.CODE_COMMANDEColumn]));
                }
                set {
                    this[this.tableLIGNE_COMMANDE.CODE_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QTE_LIGNE_COMMANDE {
                get {
                    return ((decimal)(this[this.tableLIGNE_COMMANDE.QTE_LIGNE_COMMANDEColumn]));
                }
                set {
                    this[this.tableLIGNE_COMMANDE.QTE_LIGNE_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRIX_HT_COMMANDE {
                get {
                    return ((decimal)(this[this.tableLIGNE_COMMANDE.PRIX_HT_COMMANDEColumn]));
                }
                set {
                    this[this.tableLIGNE_COMMANDE.PRIX_HT_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TVA_COMMANDE {
                get {
                    return ((decimal)(this[this.tableLIGNE_COMMANDE.TVA_COMMANDEColumn]));
                }
                set {
                    this[this.tableLIGNE_COMMANDE.TVA_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERow ARTICLERow {
                get {
                    return ((ARTICLERow)(this.GetParentRow(this.Table.ParentRelations["FK_LIGNE_COMMANDE_ARTICLE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LIGNE_COMMANDE_ARTICLE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMMANDERow COMMANDERow {
                get {
                    return ((COMMANDERow)(this.GetParentRow(this.Table.ParentRelations["FK_LIGNE_COMMANDE_COMMANDE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LIGNE_COMMANDE_COMMANDE"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LIGNE_FACTURERow : System.Data.DataRow {
            
            private LIGNE_FACTUREDataTable tableLIGNE_FACTURE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIGNE_FACTURERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLIGNE_FACTURE = ((LIGNE_FACTUREDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_FACTURE {
                get {
                    return ((string)(this[this.tableLIGNE_FACTURE.CODE_FACTUREColumn]));
                }
                set {
                    this[this.tableLIGNE_FACTURE.CODE_FACTUREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_COMMANDE {
                get {
                    try {
                        return ((string)(this[this.tableLIGNE_FACTURE.CODE_COMMANDEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'CODE_COMMANDE\' dans la table \'LIGNE_FACTURE\' est DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableLIGNE_FACTURE.CODE_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_ARTICLE {
                get {
                    return ((decimal)(this[this.tableLIGNE_FACTURE.CODE_ARTICLEColumn]));
                }
                set {
                    this[this.tableLIGNE_FACTURE.CODE_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QTE {
                get {
                    return ((string)(this[this.tableLIGNE_FACTURE.QTEColumn]));
                }
                set {
                    this[this.tableLIGNE_FACTURE.QTEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TVA_ARTICLE {
                get {
                    return ((decimal)(this[this.tableLIGNE_FACTURE.TVA_ARTICLEColumn]));
                }
                set {
                    this[this.tableLIGNE_FACTURE.TVA_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRIX_HT_ARTICLE {
                get {
                    return ((decimal)(this[this.tableLIGNE_FACTURE.PRIX_HT_ARTICLEColumn]));
                }
                set {
                    this[this.tableLIGNE_FACTURE.PRIX_HT_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERow ARTICLERow {
                get {
                    return ((ARTICLERow)(this.GetParentRow(this.Table.ParentRelations["FK_LIGNE_FACTURE_ARTICLE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LIGNE_FACTURE_ARTICLE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACTURERow FACTURERow {
                get {
                    return ((FACTURERow)(this.GetParentRow(this.Table.ParentRelations["FK_LIGNE_FACTURE_FACTURE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LIGNE_FACTURE_FACTURE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE_COMMANDENull() {
                return this.IsNull(this.tableLIGNE_FACTURE.CODE_COMMANDEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE_COMMANDENull() {
                this[this.tableLIGNE_FACTURE.CODE_COMMANDEColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LIVRAISONRow : System.Data.DataRow {
            
            private LIVRAISONDataTable tableLIVRAISON;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIVRAISONRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLIVRAISON = ((LIVRAISONDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_B_LIV {
                get {
                    return ((string)(this[this.tableLIVRAISON.CODE_B_LIVColumn]));
                }
                set {
                    this[this.tableLIVRAISON.CODE_B_LIVColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LIVRAISON_CLIENTRow : System.Data.DataRow {
            
            private LIVRAISON_CLIENTDataTable tableLIVRAISON_CLIENT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LIVRAISON_CLIENTRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLIVRAISON_CLIENT = ((LIVRAISON_CLIENTDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_B_LIV {
                get {
                    return ((string)(this[this.tableLIVRAISON_CLIENT.CODE_B_LIVColumn]));
                }
                set {
                    this[this.tableLIVRAISON_CLIENT.CODE_B_LIVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_COMMANDE {
                get {
                    return ((string)(this[this.tableLIVRAISON_CLIENT.CODE_COMMANDEColumn]));
                }
                set {
                    this[this.tableLIVRAISON_CLIENT.CODE_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_EMPLOYE {
                get {
                    return ((decimal)(this[this.tableLIVRAISON_CLIENT.CODE_EMPLOYEColumn]));
                }
                set {
                    this[this.tableLIVRAISON_CLIENT.CODE_EMPLOYEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DATE_LIV {
                get {
                    try {
                        return ((string)(this[this.tableLIVRAISON_CLIENT.DATE_LIVColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'DATE_LIV\' dans la table \'LIVRAISON_CLIENT\' est DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableLIVRAISON_CLIENT.DATE_LIVColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BON_DE_LIVRAISONRow BON_DE_LIVRAISONRow {
                get {
                    return ((BON_DE_LIVRAISONRow)(this.GetParentRow(this.Table.ParentRelations["FK_LIVRAISON_CLIENT_BON_DE_LIVRAISON"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LIVRAISON_CLIENT_BON_DE_LIVRAISON"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMMANDERow COMMANDERow {
                get {
                    return ((COMMANDERow)(this.GetParentRow(this.Table.ParentRelations["FK_LIVRAISON_CLIENT_COMMANDE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LIVRAISON_CLIENT_COMMANDE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERow EMPLOYERow {
                get {
                    return ((EMPLOYERow)(this.GetParentRow(this.Table.ParentRelations["FK_LIVRAISON_CLIENT_EMPLOYE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_LIVRAISON_CLIENT_EMPLOYE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATE_LIVNull() {
                return this.IsNull(this.tableLIVRAISON_CLIENT.DATE_LIVColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATE_LIVNull() {
                this[this.tableLIVRAISON_CLIENT.DATE_LIVColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MAGAZINRow : System.Data.DataRow {
            
            private MAGAZINDataTable tableMAGAZIN;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MAGAZINRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMAGAZIN = ((MAGAZINDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_MAG {
                get {
                    return ((decimal)(this[this.tableMAGAZIN.CODE_MAGColumn]));
                }
                set {
                    this[this.tableMAGAZIN.CODE_MAGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOM_MAG {
                get {
                    return ((string)(this[this.tableMAGAZIN.NOM_MAGColumn]));
                }
                set {
                    this[this.tableMAGAZIN.NOM_MAGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADRESSE_MAG {
                get {
                    return ((string)(this[this.tableMAGAZIN.ADRESSE_MAGColumn]));
                }
                set {
                    this[this.tableMAGAZIN.ADRESSE_MAGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL_MAG {
                get {
                    return ((string)(this[this.tableMAGAZIN.TEL_MAGColumn]));
                }
                set {
                    this[this.tableMAGAZIN.TEL_MAGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_SOCIETE {
                get {
                    return ((decimal)(this[this.tableMAGAZIN.CODE_SOCIETEColumn]));
                }
                set {
                    this[this.tableMAGAZIN.CODE_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SOCIETERow SOCIETERow {
                get {
                    return ((SOCIETERow)(this.GetParentRow(this.Table.ParentRelations["FK_MAGAZIN_SOCIETE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_MAGAZIN_SOCIETE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERow[] GetEMPLOYERows() {
                return ((EMPLOYERow[])(base.GetChildRows(this.Table.ChildRelations["FK_EMPLOYE_MAGAZIN"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCKRow[] GetSTOCKRows() {
                return ((STOCKRow[])(base.GetChildRows(this.Table.ChildRelations["FK_STOCK_MAGAZIN"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class REGLEMENT_CLIENTRow : System.Data.DataRow {
            
            private REGLEMENT_CLIENTDataTable tableREGLEMENT_CLIENT;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal REGLEMENT_CLIENTRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableREGLEMENT_CLIENT = ((REGLEMENT_CLIENTDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_REGLEMENT_CLIENT {
                get {
                    return ((string)(this[this.tableREGLEMENT_CLIENT.CODE_REGLEMENT_CLIENTColumn]));
                }
                set {
                    this[this.tableREGLEMENT_CLIENT.CODE_REGLEMENT_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_FACTURE {
                get {
                    return ((string)(this[this.tableREGLEMENT_CLIENT.CODE_FACTUREColumn]));
                }
                set {
                    this[this.tableREGLEMENT_CLIENT.CODE_FACTUREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MODE_REGLEMENT_CLT {
                get {
                    try {
                        return ((string)(this[this.tableREGLEMENT_CLIENT.MODE_REGLEMENT_CLTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'MODE_REGLEMENT_CLT\' dans la table \'REGLEMENT_CLIENT\' e" +
                                "st DBNull.", e);
                    }
                }
                set {
                    this[this.tableREGLEMENT_CLIENT.MODE_REGLEMENT_CLTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MONRANT_CLIENT {
                get {
                    try {
                        return ((decimal)(this[this.tableREGLEMENT_CLIENT.MONRANT_CLIENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'MONRANT_CLIENT\' dans la table \'REGLEMENT_CLIENT\' est D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableREGLEMENT_CLIENT.MONRANT_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUM_PIECE_CLIENT {
                get {
                    try {
                        return ((string)(this[this.tableREGLEMENT_CLIENT.NUM_PIECE_CLIENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'NUM_PIECE_CLIENT\' dans la table \'REGLEMENT_CLIENT\' est" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableREGLEMENT_CLIENT.NUM_PIECE_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BANQUE_CLIENT {
                get {
                    try {
                        return ((string)(this[this.tableREGLEMENT_CLIENT.BANQUE_CLIENTColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'BANQUE_CLIENT\' dans la table \'REGLEMENT_CLIENT\' est DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableREGLEMENT_CLIENT.BANQUE_CLIENTColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OBSERVATION {
                get {
                    try {
                        return ((string)(this[this.tableREGLEMENT_CLIENT.OBSERVATIONColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'OBSERVATION\' dans la table \'REGLEMENT_CLIENT\' est DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableREGLEMENT_CLIENT.OBSERVATIONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMODE_REGLEMENT_CLTNull() {
                return this.IsNull(this.tableREGLEMENT_CLIENT.MODE_REGLEMENT_CLTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMODE_REGLEMENT_CLTNull() {
                this[this.tableREGLEMENT_CLIENT.MODE_REGLEMENT_CLTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMONRANT_CLIENTNull() {
                return this.IsNull(this.tableREGLEMENT_CLIENT.MONRANT_CLIENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMONRANT_CLIENTNull() {
                this[this.tableREGLEMENT_CLIENT.MONRANT_CLIENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUM_PIECE_CLIENTNull() {
                return this.IsNull(this.tableREGLEMENT_CLIENT.NUM_PIECE_CLIENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUM_PIECE_CLIENTNull() {
                this[this.tableREGLEMENT_CLIENT.NUM_PIECE_CLIENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBANQUE_CLIENTNull() {
                return this.IsNull(this.tableREGLEMENT_CLIENT.BANQUE_CLIENTColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBANQUE_CLIENTNull() {
                this[this.tableREGLEMENT_CLIENT.BANQUE_CLIENTColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBSERVATIONNull() {
                return this.IsNull(this.tableREGLEMENT_CLIENT.OBSERVATIONColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBSERVATIONNull() {
                this[this.tableREGLEMENT_CLIENT.OBSERVATIONColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACTURERow[] GetFACTURERows() {
                return ((FACTURERow[])(base.GetChildRows(this.Table.ChildRelations["FK_FACTURE_REGLEMENT_CLIENT"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SOCIETERow : System.Data.DataRow {
            
            private SOCIETEDataTable tableSOCIETE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SOCIETERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSOCIETE = ((SOCIETEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_SOCIETE {
                get {
                    return ((decimal)(this[this.tableSOCIETE.CODE_SOCIETEColumn]));
                }
                set {
                    this[this.tableSOCIETE.CODE_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RS_SOCIETE {
                get {
                    return ((string)(this[this.tableSOCIETE.RS_SOCIETEColumn]));
                }
                set {
                    this[this.tableSOCIETE.RS_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION_SOCIETE {
                get {
                    return ((string)(this[this.tableSOCIETE.DESCRIPTION_SOCIETEColumn]));
                }
                set {
                    this[this.tableSOCIETE.DESCRIPTION_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADRESSE_SOCIETE {
                get {
                    return ((string)(this[this.tableSOCIETE.ADRESSE_SOCIETEColumn]));
                }
                set {
                    this[this.tableSOCIETE.ADRESSE_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CP_SOCIETE {
                get {
                    return ((string)(this[this.tableSOCIETE.CP_SOCIETEColumn]));
                }
                set {
                    this[this.tableSOCIETE.CP_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TEL_SOCIETE {
                get {
                    return ((string)(this[this.tableSOCIETE.TEL_SOCIETEColumn]));
                }
                set {
                    this[this.tableSOCIETE.TEL_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FAX_SOCIETE {
                get {
                    return ((string)(this[this.tableSOCIETE.FAX_SOCIETEColumn]));
                }
                set {
                    this[this.tableSOCIETE.FAX_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMAIL_SOCIETE {
                get {
                    return ((string)(this[this.tableSOCIETE.EMAIL_SOCIETEColumn]));
                }
                set {
                    this[this.tableSOCIETE.EMAIL_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SITE_WEB_SOCETE {
                get {
                    return ((string)(this[this.tableSOCIETE.SITE_WEB_SOCETEColumn]));
                }
                set {
                    this[this.tableSOCIETE.SITE_WEB_SOCETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] LOGO_SOCIETE {
                get {
                    try {
                        return ((byte[])(this[this.tableSOCIETE.LOGO_SOCIETEColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'LOGO_SOCIETE\' dans la table \'SOCIETE\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableSOCIETE.LOGO_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_TVA_SOCIETE {
                get {
                    return ((string)(this[this.tableSOCIETE.CODE_TVA_SOCIETEColumn]));
                }
                set {
                    this[this.tableSOCIETE.CODE_TVA_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RIB_SOCIETE {
                get {
                    return ((string)(this[this.tableSOCIETE.RIB_SOCIETEColumn]));
                }
                set {
                    this[this.tableSOCIETE.RIB_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUM_COMMANDE {
                get {
                    return ((string)(this[this.tableSOCIETE.NUM_COMMANDEColumn]));
                }
                set {
                    this[this.tableSOCIETE.NUM_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREFIX1_COMMANDE {
                get {
                    return ((string)(this[this.tableSOCIETE.PREFIX1_COMMANDEColumn]));
                }
                set {
                    this[this.tableSOCIETE.PREFIX1_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREFIX2_COMMANDE {
                get {
                    return ((string)(this[this.tableSOCIETE.PREFIX2_COMMANDEColumn]));
                }
                set {
                    this[this.tableSOCIETE.PREFIX2_COMMANDEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUM_FACTURE {
                get {
                    return ((string)(this[this.tableSOCIETE.NUM_FACTUREColumn]));
                }
                set {
                    this[this.tableSOCIETE.NUM_FACTUREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREFIX1_FACTURE {
                get {
                    return ((string)(this[this.tableSOCIETE.PREFIX1_FACTUREColumn]));
                }
                set {
                    this[this.tableSOCIETE.PREFIX1_FACTUREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREFIXE2_FACTURE {
                get {
                    return ((string)(this[this.tableSOCIETE.PREFIXE2_FACTUREColumn]));
                }
                set {
                    this[this.tableSOCIETE.PREFIXE2_FACTUREColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOGO_SOCIETENull() {
                return this.IsNull(this.tableSOCIETE.LOGO_SOCIETEColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOGO_SOCIETENull() {
                this[this.tableSOCIETE.LOGO_SOCIETEColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERow[] GetEMPLOYERows() {
                return ((EMPLOYERow[])(base.GetChildRows(this.Table.ChildRelations["FK_EMPLOYE_SOCIETE"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAGAZINRow[] GetMAGAZINRows() {
                return ((MAGAZINRow[])(base.GetChildRows(this.Table.ChildRelations["FK_MAGAZIN_SOCIETE"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UTILISATEURRow[] GetUTILISATEURRows() {
                return ((UTILISATEURRow[])(base.GetChildRows(this.Table.ChildRelations["FK_UTILISATEUR_SOCIETE"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class STOCKRow : System.Data.DataRow {
            
            private STOCKDataTable tableSTOCK;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal STOCKRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSTOCK = ((STOCKDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_MAG {
                get {
                    return ((decimal)(this[this.tableSTOCK.CODE_MAGColumn]));
                }
                set {
                    this[this.tableSTOCK.CODE_MAGColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_ARTICLE {
                get {
                    return ((decimal)(this[this.tableSTOCK.CODE_ARTICLEColumn]));
                }
                set {
                    this[this.tableSTOCK.CODE_ARTICLEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QTTE_STOCK {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK.QTTE_STOCKColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'QTTE_STOCK\' dans la table \'STOCK\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK.QTTE_STOCKColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QTTE_STOCK_MIN {
                get {
                    try {
                        return ((string)(this[this.tableSTOCK.QTTE_STOCK_MINColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("La valeur pour la colonne \'QTTE_STOCK_MIN\' dans la table \'STOCK\' est DBNull.", e);
                    }
                }
                set {
                    this[this.tableSTOCK.QTTE_STOCK_MINColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERow ARTICLERow {
                get {
                    return ((ARTICLERow)(this.GetParentRow(this.Table.ParentRelations["FK_STOCK_ARTICLE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_STOCK_ARTICLE"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAGAZINRow MAGAZINRow {
                get {
                    return ((MAGAZINRow)(this.GetParentRow(this.Table.ParentRelations["FK_STOCK_MAGAZIN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_STOCK_MAGAZIN"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQTTE_STOCKNull() {
                return this.IsNull(this.tableSTOCK.QTTE_STOCKColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQTTE_STOCKNull() {
                this[this.tableSTOCK.QTTE_STOCKColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQTTE_STOCK_MINNull() {
                return this.IsNull(this.tableSTOCK.QTTE_STOCK_MINColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQTTE_STOCK_MINNull() {
                this[this.tableSTOCK.QTTE_STOCK_MINColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TACHERow : System.Data.DataRow {
            
            private TACHEDataTable tableTACHE;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TACHERow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTACHE = ((TACHEDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE_TACHE {
                get {
                    return ((string)(this[this.tableTACHE.CODE_TACHEColumn]));
                }
                set {
                    this[this.tableTACHE.CODE_TACHEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LIB_TACHE {
                get {
                    return ((string)(this[this.tableTACHE.LIB_TACHEColumn]));
                }
                set {
                    this[this.tableTACHE.LIB_TACHEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION_TACHE {
                get {
                    return ((string)(this[this.tableTACHE.DESCRIPTION_TACHEColumn]));
                }
                set {
                    this[this.tableTACHE.DESCRIPTION_TACHEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_FONCTION {
                get {
                    return ((decimal)(this[this.tableTACHE.CODE_FONCTIONColumn]));
                }
                set {
                    this[this.tableTACHE.CODE_FONCTIONColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FONCTIONALITE_EMPLOYERow FONCTIONALITE_EMPLOYERow {
                get {
                    return ((FONCTIONALITE_EMPLOYERow)(this.GetParentRow(this.Table.ParentRelations["FK_TACHE_FONCTIONALITE_EMPLOYE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TACHE_FONCTIONALITE_EMPLOYE"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UTILISATEURRow : System.Data.DataRow {
            
            private UTILISATEURDataTable tableUTILISATEUR;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UTILISATEURRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUTILISATEUR = ((UTILISATEURDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_USER {
                get {
                    return ((decimal)(this[this.tableUTILISATEUR.CODE_USERColumn]));
                }
                set {
                    this[this.tableUTILISATEUR.CODE_USERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NOM_USER {
                get {
                    return ((string)(this[this.tableUTILISATEUR.NOM_USERColumn]));
                }
                set {
                    this[this.tableUTILISATEUR.NOM_USERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOGIN_USER {
                get {
                    return ((string)(this[this.tableUTILISATEUR.LOGIN_USERColumn]));
                }
                set {
                    this[this.tableUTILISATEUR.LOGIN_USERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PASSWORD_USER {
                get {
                    return ((string)(this[this.tableUTILISATEUR.PASSWORD_USERColumn]));
                }
                set {
                    this[this.tableUTILISATEUR.PASSWORD_USERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ETAT_USER {
                get {
                    return ((bool)(this[this.tableUTILISATEUR.ETAT_USERColumn]));
                }
                set {
                    this[this.tableUTILISATEUR.ETAT_USERColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CODE_SOCIETE {
                get {
                    return ((decimal)(this[this.tableUTILISATEUR.CODE_SOCIETEColumn]));
                }
                set {
                    this[this.tableUTILISATEUR.CODE_SOCIETEColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SOCIETERow SOCIETERow {
                get {
                    return ((SOCIETERow)(this.GetParentRow(this.Table.ParentRelations["FK_UTILISATEUR_SOCIETE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_UTILISATEUR_SOCIETE"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ARTICLERowChangeEvent : System.EventArgs {
            
            private ARTICLERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERowChangeEvent(ARTICLERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ARTICLERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BON_DE_LIVRAISONRowChangeEvent : System.EventArgs {
            
            private BON_DE_LIVRAISONRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BON_DE_LIVRAISONRowChangeEvent(BON_DE_LIVRAISONRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BON_DE_LIVRAISONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CATEGORIERowChangeEvent : System.EventArgs {
            
            private CATEGORIERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIERowChangeEvent(CATEGORIERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CATEGORIERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CLIENTRowChangeEvent : System.EventArgs {
            
            private CLIENTRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTRowChangeEvent(CLIENTRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CLIENTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COMMANDERowChangeEvent : System.EventArgs {
            
            private COMMANDERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMMANDERowChangeEvent(COMMANDERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMMANDERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EMPLOYERowChangeEvent : System.EventArgs {
            
            private EMPLOYERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERowChangeEvent(EMPLOYERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EMPLOYERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FACTURERowChangeEvent : System.EventArgs {
            
            private FACTURERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACTURERowChangeEvent(FACTURERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FACTURERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FONCTIONALITE_EMPLOYERowChangeEvent : System.EventArgs {
            
            private FONCTIONALITE_EMPLOYERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FONCTIONALITE_EMPLOYERowChangeEvent(FONCTIONALITE_EMPLOYERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FONCTIONALITE_EMPLOYERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FOURNISSEURRowChangeEvent : System.EventArgs {
            
            private FOURNISSEURRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FOURNISSEURRowChangeEvent(FOURNISSEURRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FOURNISSEURRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LG_BON_LIVRAISONRowChangeEvent : System.EventArgs {
            
            private LG_BON_LIVRAISONRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LG_BON_LIVRAISONRowChangeEvent(LG_BON_LIVRAISONRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LG_BON_LIVRAISONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LIGNE_COMMANDERowChangeEvent : System.EventArgs {
            
            private LIGNE_COMMANDERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_COMMANDERowChangeEvent(LIGNE_COMMANDERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_COMMANDERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LIGNE_FACTURERowChangeEvent : System.EventArgs {
            
            private LIGNE_FACTURERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_FACTURERowChangeEvent(LIGNE_FACTURERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIGNE_FACTURERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LIVRAISONRowChangeEvent : System.EventArgs {
            
            private LIVRAISONRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISONRowChangeEvent(LIVRAISONRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LIVRAISON_CLIENTRowChangeEvent : System.EventArgs {
            
            private LIVRAISON_CLIENTRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISON_CLIENTRowChangeEvent(LIVRAISON_CLIENTRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LIVRAISON_CLIENTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MAGAZINRowChangeEvent : System.EventArgs {
            
            private MAGAZINRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAGAZINRowChangeEvent(MAGAZINRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MAGAZINRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class REGLEMENT_CLIENTRowChangeEvent : System.EventArgs {
            
            private REGLEMENT_CLIENTRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGLEMENT_CLIENTRowChangeEvent(REGLEMENT_CLIENTRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public REGLEMENT_CLIENTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SOCIETERowChangeEvent : System.EventArgs {
            
            private SOCIETERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SOCIETERowChangeEvent(SOCIETERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SOCIETERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class STOCKRowChangeEvent : System.EventArgs {
            
            private STOCKRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCKRowChangeEvent(STOCKRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public STOCKRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TACHERowChangeEvent : System.EventArgs {
            
            private TACHERow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TACHERowChangeEvent(TACHERow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TACHERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UTILISATEURRowChangeEvent : System.EventArgs {
            
            private UTILISATEURRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UTILISATEURRowChangeEvent(UTILISATEURRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UTILISATEURRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace CHM_SERVER.GESTION_COMMERCIALEDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ARTICLETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ARTICLETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ARTICLE";
            tableMapping.ColumnMappings.Add("CODE_ARTICLE", "CODE_ARTICLE");
            tableMapping.ColumnMappings.Add("REF_ARTICLE", "REF_ARTICLE");
            tableMapping.ColumnMappings.Add("DESIGNATION", "DESIGNATION");
            tableMapping.ColumnMappings.Add("FAMILLE_ARTICLE", "FAMILLE_ARTICLE");
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION");
            tableMapping.ColumnMappings.Add("CODE_BARRE_ARTICLE", "CODE_BARRE_ARTICLE");
            tableMapping.ColumnMappings.Add("QTE_ARTICLE", "QTE_ARTICLE");
            tableMapping.ColumnMappings.Add("QTE_MIN_ARTICLE", "QTE_MIN_ARTICLE");
            tableMapping.ColumnMappings.Add("PHOTO_ARTICLE", "PHOTO_ARTICLE");
            tableMapping.ColumnMappings.Add("PRIX_HT_ARTICLE", "PRIX_HT_ARTICLE");
            tableMapping.ColumnMappings.Add("TVA_ARTICLE", "TVA_ARTICLE");
            tableMapping.ColumnMappings.Add("ETAT_ARTICLE", "ETAT_ARTICLE");
            tableMapping.ColumnMappings.Add("CODE_CATEG", "CODE_CATEG");
            tableMapping.ColumnMappings.Add("CODE_MAG", "CODE_MAG");
            tableMapping.ColumnMappings.Add("CODE_FOURNISSEUR", "CODE_FOURNISSEUR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[ARTICLE] WHERE (([CODE_ARTICLE] = @Original_CODE_ARTICLE) AND ([QTE_ARTICLE] = @Original_QTE_ARTICLE) AND ((@IsNull_QTE_MIN_ARTICLE = 1 AND [QTE_MIN_ARTICLE] IS NULL) OR ([QTE_MIN_ARTICLE] = @Original_QTE_MIN_ARTICLE)) AND ([PRIX_HT_ARTICLE] = @Original_PRIX_HT_ARTICLE) AND ([TVA_ARTICLE] = @Original_TVA_ARTICLE) AND ([ETAT_ARTICLE] = @Original_ETAT_ARTICLE) AND ([CODE_CATEG] = @Original_CODE_CATEG) AND ([CODE_MAG] = @Original_CODE_MAG) AND ([CODE_FOURNISSEUR] = @Original_CODE_FOURNISSEUR))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QTE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "QTE_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_QTE_MIN_ARTICLE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QTE_MIN_ARTICLE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QTE_MIN_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "QTE_MIN_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRIX_HT_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 18, "PRIX_HT_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TVA_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "TVA_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ETAT_ARTICLE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CATEG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CATEG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FOURNISSEUR", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FOURNISSEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ARTICLE] ([CODE_ARTICLE], [REF_ARTICLE], [DESIGNATION], [FAMILLE_ARTICLE], [DESCRIPTION], [CODE_BARRE_ARTICLE], [QTE_ARTICLE], [QTE_MIN_ARTICLE], [PHOTO_ARTICLE], [PRIX_HT_ARTICLE], [TVA_ARTICLE], [ETAT_ARTICLE], [CODE_CATEG], [CODE_MAG], [CODE_FOURNISSEUR]) VALUES (@CODE_ARTICLE, @REF_ARTICLE, @DESIGNATION, @FAMILLE_ARTICLE, @DESCRIPTION, @CODE_BARRE_ARTICLE, @QTE_ARTICLE, @QTE_MIN_ARTICLE, @PHOTO_ARTICLE, @PRIX_HT_ARTICLE, @TVA_ARTICLE, @ETAT_ARTICLE, @CODE_CATEG, @CODE_MAG, @CODE_FOURNISSEUR);
SELECT CODE_ARTICLE, REF_ARTICLE, DESIGNATION, FAMILLE_ARTICLE, DESCRIPTION, CODE_BARRE_ARTICLE, QTE_ARTICLE, QTE_MIN_ARTICLE, PHOTO_ARTICLE, PRIX_HT_ARTICLE, TVA_ARTICLE, ETAT_ARTICLE, CODE_CATEG, CODE_MAG, CODE_FOURNISSEUR FROM ARTICLE WHERE (CODE_ARTICLE = @CODE_ARTICLE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@REF_ARTICLE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "REF_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESIGNATION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FAMILLE_ARTICLE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FAMILLE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_BARRE_ARTICLE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_BARRE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QTE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "QTE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QTE_MIN_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "QTE_MIN_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PHOTO_ARTICLE", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "PHOTO_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRIX_HT_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 18, "PRIX_HT_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TVA_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "TVA_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_ARTICLE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CATEG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CATEG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FOURNISSEUR", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ARTICLE] SET [CODE_ARTICLE] = @CODE_ARTICLE, [REF_ARTICLE] = @REF_ARTICLE, [DESIGNATION] = @DESIGNATION, [FAMILLE_ARTICLE] = @FAMILLE_ARTICLE, [DESCRIPTION] = @DESCRIPTION, [CODE_BARRE_ARTICLE] = @CODE_BARRE_ARTICLE, [QTE_ARTICLE] = @QTE_ARTICLE, [QTE_MIN_ARTICLE] = @QTE_MIN_ARTICLE, [PHOTO_ARTICLE] = @PHOTO_ARTICLE, [PRIX_HT_ARTICLE] = @PRIX_HT_ARTICLE, [TVA_ARTICLE] = @TVA_ARTICLE, [ETAT_ARTICLE] = @ETAT_ARTICLE, [CODE_CATEG] = @CODE_CATEG, [CODE_MAG] = @CODE_MAG, [CODE_FOURNISSEUR] = @CODE_FOURNISSEUR WHERE (([CODE_ARTICLE] = @Original_CODE_ARTICLE) AND ([QTE_ARTICLE] = @Original_QTE_ARTICLE) AND ((@IsNull_QTE_MIN_ARTICLE = 1 AND [QTE_MIN_ARTICLE] IS NULL) OR ([QTE_MIN_ARTICLE] = @Original_QTE_MIN_ARTICLE)) AND ([PRIX_HT_ARTICLE] = @Original_PRIX_HT_ARTICLE) AND ([TVA_ARTICLE] = @Original_TVA_ARTICLE) AND ([ETAT_ARTICLE] = @Original_ETAT_ARTICLE) AND ([CODE_CATEG] = @Original_CODE_CATEG) AND ([CODE_MAG] = @Original_CODE_MAG) AND ([CODE_FOURNISSEUR] = @Original_CODE_FOURNISSEUR));
SELECT CODE_ARTICLE, REF_ARTICLE, DESIGNATION, FAMILLE_ARTICLE, DESCRIPTION, CODE_BARRE_ARTICLE, QTE_ARTICLE, QTE_MIN_ARTICLE, PHOTO_ARTICLE, PRIX_HT_ARTICLE, TVA_ARTICLE, ETAT_ARTICLE, CODE_CATEG, CODE_MAG, CODE_FOURNISSEUR FROM ARTICLE WHERE (CODE_ARTICLE = @CODE_ARTICLE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@REF_ARTICLE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "REF_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESIGNATION", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESIGNATION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FAMILLE_ARTICLE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FAMILLE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_BARRE_ARTICLE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_BARRE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QTE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "QTE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QTE_MIN_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "QTE_MIN_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PHOTO_ARTICLE", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "PHOTO_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRIX_HT_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 18, "PRIX_HT_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TVA_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "TVA_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_ARTICLE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CATEG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CATEG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FOURNISSEUR", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QTE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "QTE_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_QTE_MIN_ARTICLE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "QTE_MIN_ARTICLE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_QTE_MIN_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "QTE_MIN_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRIX_HT_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 18, "PRIX_HT_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TVA_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "TVA_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ETAT_ARTICLE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_ARTICLE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CATEG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CATEG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FOURNISSEUR", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FOURNISSEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_ARTICLE, REF_ARTICLE, DESIGNATION, FAMILLE_ARTICLE, DESCRIPTION, CODE" +
                "_BARRE_ARTICLE, QTE_ARTICLE, QTE_MIN_ARTICLE, PHOTO_ARTICLE, PRIX_HT_ARTICLE, TV" +
                "A_ARTICLE, ETAT_ARTICLE, CODE_CATEG, CODE_MAG, CODE_FOURNISSEUR FROM dbo.ARTICLE" +
                "";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.ARTICLEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.ARTICLEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.ARTICLEDataTable dataTable = new GESTION_COMMERCIALEDataSet.ARTICLEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.ARTICLEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ARTICLE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CODE_ARTICLE, decimal Original_QTE_ARTICLE, System.Nullable<decimal> Original_QTE_MIN_ARTICLE, decimal Original_PRIX_HT_ARTICLE, decimal Original_TVA_ARTICLE, bool Original_ETAT_ARTICLE, decimal Original_CODE_CATEG, decimal Original_CODE_MAG, decimal Original_CODE_FOURNISSEUR) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CODE_ARTICLE));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_QTE_ARTICLE));
            if ((Original_QTE_MIN_ARTICLE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_QTE_MIN_ARTICLE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_PRIX_HT_ARTICLE));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_TVA_ARTICLE));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_ETAT_ARTICLE));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_CODE_CATEG));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_CODE_MAG));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_CODE_FOURNISSEUR));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CODE_ARTICLE, string REF_ARTICLE, string DESIGNATION, string FAMILLE_ARTICLE, string DESCRIPTION, string CODE_BARRE_ARTICLE, decimal QTE_ARTICLE, System.Nullable<decimal> QTE_MIN_ARTICLE, byte[] PHOTO_ARTICLE, decimal PRIX_HT_ARTICLE, decimal TVA_ARTICLE, bool ETAT_ARTICLE, decimal CODE_CATEG, decimal CODE_MAG, decimal CODE_FOURNISSEUR) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CODE_ARTICLE));
            if ((REF_ARTICLE == null)) {
                throw new System.ArgumentNullException("REF_ARTICLE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(REF_ARTICLE));
            }
            if ((DESIGNATION == null)) {
                throw new System.ArgumentNullException("DESIGNATION");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DESIGNATION));
            }
            if ((FAMILLE_ARTICLE == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(FAMILLE_ARTICLE));
            }
            if ((DESCRIPTION == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DESCRIPTION));
            }
            if ((CODE_BARRE_ARTICLE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CODE_BARRE_ARTICLE));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(QTE_ARTICLE));
            if ((QTE_MIN_ARTICLE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(QTE_MIN_ARTICLE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((PHOTO_ARTICLE == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((byte[])(PHOTO_ARTICLE));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(PRIX_HT_ARTICLE));
            this.Adapter.InsertCommand.Parameters[10].Value = ((decimal)(TVA_ARTICLE));
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(ETAT_ARTICLE));
            this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(CODE_CATEG));
            this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(CODE_MAG));
            this.Adapter.InsertCommand.Parameters[14].Value = ((decimal)(CODE_FOURNISSEUR));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal CODE_ARTICLE, 
                    string REF_ARTICLE, 
                    string DESIGNATION, 
                    string FAMILLE_ARTICLE, 
                    string DESCRIPTION, 
                    string CODE_BARRE_ARTICLE, 
                    decimal QTE_ARTICLE, 
                    System.Nullable<decimal> QTE_MIN_ARTICLE, 
                    byte[] PHOTO_ARTICLE, 
                    decimal PRIX_HT_ARTICLE, 
                    decimal TVA_ARTICLE, 
                    bool ETAT_ARTICLE, 
                    decimal CODE_CATEG, 
                    decimal CODE_MAG, 
                    decimal CODE_FOURNISSEUR, 
                    decimal Original_CODE_ARTICLE, 
                    decimal Original_QTE_ARTICLE, 
                    System.Nullable<decimal> Original_QTE_MIN_ARTICLE, 
                    decimal Original_PRIX_HT_ARTICLE, 
                    decimal Original_TVA_ARTICLE, 
                    bool Original_ETAT_ARTICLE, 
                    decimal Original_CODE_CATEG, 
                    decimal Original_CODE_MAG, 
                    decimal Original_CODE_FOURNISSEUR) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CODE_ARTICLE));
            if ((REF_ARTICLE == null)) {
                throw new System.ArgumentNullException("REF_ARTICLE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(REF_ARTICLE));
            }
            if ((DESIGNATION == null)) {
                throw new System.ArgumentNullException("DESIGNATION");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DESIGNATION));
            }
            if ((FAMILLE_ARTICLE == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(FAMILLE_ARTICLE));
            }
            if ((DESCRIPTION == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DESCRIPTION));
            }
            if ((CODE_BARRE_ARTICLE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CODE_BARRE_ARTICLE));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(QTE_ARTICLE));
            if ((QTE_MIN_ARTICLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(QTE_MIN_ARTICLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((PHOTO_ARTICLE == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((byte[])(PHOTO_ARTICLE));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(PRIX_HT_ARTICLE));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(TVA_ARTICLE));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(ETAT_ARTICLE));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(CODE_CATEG));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(CODE_MAG));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(CODE_FOURNISSEUR));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(Original_CODE_ARTICLE));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((decimal)(Original_QTE_ARTICLE));
            if ((Original_QTE_MIN_ARTICLE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_QTE_MIN_ARTICLE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_PRIX_HT_ARTICLE));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_TVA_ARTICLE));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((bool)(Original_ETAT_ARTICLE));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Original_CODE_CATEG));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Original_CODE_MAG));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(Original_CODE_FOURNISSEUR));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BON_DE_LIVRAISONTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BON_DE_LIVRAISONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BON_DE_LIVRAISON";
            tableMapping.ColumnMappings.Add("CODE_B_LIV", "CODE_B_LIV");
            tableMapping.ColumnMappings.Add("DATE_B_LIV", "DATE_B_LIV");
            tableMapping.ColumnMappings.Add("CODE_CLIENT", "CODE_CLIENT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[BON_DE_LIVRAISON] WHERE (([CODE_B_LIV] = @Original_CODE_B_LIV)" +
                " AND ([DATE_B_LIV] = @Original_DATE_B_LIV) AND ([CODE_CLIENT] = @Original_CODE_C" +
                "LIENT))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_B_LIV", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_B_LIV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_B_LIV", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_B_LIV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[BON_DE_LIVRAISON] ([CODE_B_LIV], [DATE_B_LIV], [CODE_CLIENT]) " +
                "VALUES (@CODE_B_LIV, @DATE_B_LIV, @CODE_CLIENT);\r\nSELECT CODE_B_LIV, DATE_B_LIV," +
                " CODE_CLIENT FROM BON_DE_LIVRAISON WHERE (CODE_B_LIV = @CODE_B_LIV)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_B_LIV", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_B_LIV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_B_LIV", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_B_LIV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[BON_DE_LIVRAISON] SET [CODE_B_LIV] = @CODE_B_LIV, [DATE_B_LIV] = @DATE_B_LIV, [CODE_CLIENT] = @CODE_CLIENT WHERE (([CODE_B_LIV] = @Original_CODE_B_LIV) AND ([DATE_B_LIV] = @Original_DATE_B_LIV) AND ([CODE_CLIENT] = @Original_CODE_CLIENT));
SELECT CODE_B_LIV, DATE_B_LIV, CODE_CLIENT FROM BON_DE_LIVRAISON WHERE (CODE_B_LIV = @CODE_B_LIV)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_B_LIV", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_B_LIV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_B_LIV", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_B_LIV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_B_LIV", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_B_LIV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_B_LIV", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_B_LIV", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_B_LIV, DATE_B_LIV, CODE_CLIENT FROM dbo.BON_DE_LIVRAISON";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.BON_DE_LIVRAISONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.BON_DE_LIVRAISONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.BON_DE_LIVRAISONDataTable dataTable = new GESTION_COMMERCIALEDataSet.BON_DE_LIVRAISONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.BON_DE_LIVRAISONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "BON_DE_LIVRAISON");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CODE_B_LIV, string Original_DATE_B_LIV, decimal Original_CODE_CLIENT) {
            if ((Original_CODE_B_LIV == null)) {
                throw new System.ArgumentNullException("Original_CODE_B_LIV");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CODE_B_LIV));
            }
            if ((Original_DATE_B_LIV == null)) {
                throw new System.ArgumentNullException("Original_DATE_B_LIV");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_DATE_B_LIV));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_CODE_CLIENT));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CODE_B_LIV, string DATE_B_LIV, decimal CODE_CLIENT) {
            if ((CODE_B_LIV == null)) {
                throw new System.ArgumentNullException("CODE_B_LIV");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CODE_B_LIV));
            }
            if ((DATE_B_LIV == null)) {
                throw new System.ArgumentNullException("DATE_B_LIV");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DATE_B_LIV));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(CODE_CLIENT));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CODE_B_LIV, string DATE_B_LIV, decimal CODE_CLIENT, string Original_CODE_B_LIV, string Original_DATE_B_LIV, decimal Original_CODE_CLIENT) {
            if ((CODE_B_LIV == null)) {
                throw new System.ArgumentNullException("CODE_B_LIV");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CODE_B_LIV));
            }
            if ((DATE_B_LIV == null)) {
                throw new System.ArgumentNullException("DATE_B_LIV");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DATE_B_LIV));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(CODE_CLIENT));
            if ((Original_CODE_B_LIV == null)) {
                throw new System.ArgumentNullException("Original_CODE_B_LIV");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_CODE_B_LIV));
            }
            if ((Original_DATE_B_LIV == null)) {
                throw new System.ArgumentNullException("Original_DATE_B_LIV");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_DATE_B_LIV));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_CODE_CLIENT));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CATEGORIETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CATEGORIETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CATEGORIE";
            tableMapping.ColumnMappings.Add("CODE_CATEG", "CODE_CATEG");
            tableMapping.ColumnMappings.Add("LIB_CATEG", "LIB_CATEG");
            tableMapping.ColumnMappings.Add("DESCRIPTION_CATEG", "DESCRIPTION_CATEG");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CATEGORIE] WHERE (([CODE_CATEG] = @Original_CODE_CATEG) AND ([" +
                "LIB_CATEG] = @Original_LIB_CATEG) AND ((@IsNull_DESCRIPTION_CATEG = 1 AND [DESCR" +
                "IPTION_CATEG] IS NULL) OR ([DESCRIPTION_CATEG] = @Original_DESCRIPTION_CATEG)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CATEG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CATEG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LIB_CATEG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LIB_CATEG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DESCRIPTION_CATEG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_CATEG", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_CATEG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_CATEG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CATEGORIE] ([CODE_CATEG], [LIB_CATEG], [DESCRIPTION_CATEG]) VA" +
                "LUES (@CODE_CATEG, @LIB_CATEG, @DESCRIPTION_CATEG);\r\nSELECT CODE_CATEG, LIB_CATE" +
                "G, DESCRIPTION_CATEG FROM CATEGORIE WHERE (CODE_CATEG = @CODE_CATEG)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CATEG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CATEG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LIB_CATEG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LIB_CATEG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_CATEG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_CATEG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CATEGORIE] SET [CODE_CATEG] = @CODE_CATEG, [LIB_CATEG] = @LIB_CATEG, [DESCRIPTION_CATEG] = @DESCRIPTION_CATEG WHERE (([CODE_CATEG] = @Original_CODE_CATEG) AND ([LIB_CATEG] = @Original_LIB_CATEG) AND ((@IsNull_DESCRIPTION_CATEG = 1 AND [DESCRIPTION_CATEG] IS NULL) OR ([DESCRIPTION_CATEG] = @Original_DESCRIPTION_CATEG)));
SELECT CODE_CATEG, LIB_CATEG, DESCRIPTION_CATEG FROM CATEGORIE WHERE (CODE_CATEG = @CODE_CATEG)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CATEG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CATEG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LIB_CATEG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LIB_CATEG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_CATEG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_CATEG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CATEG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CATEG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LIB_CATEG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LIB_CATEG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DESCRIPTION_CATEG", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_CATEG", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DESCRIPTION_CATEG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_CATEG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_CATEG, LIB_CATEG, DESCRIPTION_CATEG FROM dbo.CATEGORIE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.CATEGORIEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.CATEGORIEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.CATEGORIEDataTable dataTable = new GESTION_COMMERCIALEDataSet.CATEGORIEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.CATEGORIEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CATEGORIE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CODE_CATEG, string Original_LIB_CATEG, string Original_DESCRIPTION_CATEG) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CODE_CATEG));
            if ((Original_LIB_CATEG == null)) {
                throw new System.ArgumentNullException("Original_LIB_CATEG");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_LIB_CATEG));
            }
            if ((Original_DESCRIPTION_CATEG == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_DESCRIPTION_CATEG));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CODE_CATEG, string LIB_CATEG, string DESCRIPTION_CATEG) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CODE_CATEG));
            if ((LIB_CATEG == null)) {
                throw new System.ArgumentNullException("LIB_CATEG");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LIB_CATEG));
            }
            if ((DESCRIPTION_CATEG == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DESCRIPTION_CATEG));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal CODE_CATEG, string LIB_CATEG, string DESCRIPTION_CATEG, decimal Original_CODE_CATEG, string Original_LIB_CATEG, string Original_DESCRIPTION_CATEG) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CODE_CATEG));
            if ((LIB_CATEG == null)) {
                throw new System.ArgumentNullException("LIB_CATEG");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LIB_CATEG));
            }
            if ((DESCRIPTION_CATEG == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DESCRIPTION_CATEG));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(Original_CODE_CATEG));
            if ((Original_LIB_CATEG == null)) {
                throw new System.ArgumentNullException("Original_LIB_CATEG");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_LIB_CATEG));
            }
            if ((Original_DESCRIPTION_CATEG == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_DESCRIPTION_CATEG));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CLIENTTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CLIENTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CLIENT";
            tableMapping.ColumnMappings.Add("CODE_CLIENT", "CODE_CLIENT");
            tableMapping.ColumnMappings.Add("RS_CLIENT", "RS_CLIENT");
            tableMapping.ColumnMappings.Add("ADRESSE_CLIENT", "ADRESSE_CLIENT");
            tableMapping.ColumnMappings.Add("CP_CLIENT", "CP_CLIENT");
            tableMapping.ColumnMappings.Add("TEL_CLIENT", "TEL_CLIENT");
            tableMapping.ColumnMappings.Add("FAX_CLIENT", "FAX_CLIENT");
            tableMapping.ColumnMappings.Add("EMAIL_CLIENT", "EMAIL_CLIENT");
            tableMapping.ColumnMappings.Add("EXO_CLIENT", "EXO_CLIENT");
            tableMapping.ColumnMappings.Add("ATTEST_EXO_CLIENT", "ATTEST_EXO_CLIENT");
            tableMapping.ColumnMappings.Add("CODE_DOUANE_CLIENT", "CODE_DOUANE_CLIENT");
            tableMapping.ColumnMappings.Add("CODE_TVA_CLIENT", "CODE_TVA_CLIENT");
            tableMapping.ColumnMappings.Add("ETAT_CLIENT", "ETAT_CLIENT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[CLIENT] WHERE (([CODE_CLIENT] = @Original_CODE_CLIENT) AND ((@IsNull_EXO_CLIENT = 1 AND [EXO_CLIENT] IS NULL) OR ([EXO_CLIENT] = @Original_EXO_CLIENT)) AND ([CODE_DOUANE_CLIENT] = @Original_CODE_DOUANE_CLIENT) AND ([CODE_TVA_CLIENT] = @Original_CODE_TVA_CLIENT) AND ([ETAT_CLIENT] = @Original_ETAT_CLIENT))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EXO_CLIENT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EXO_CLIENT", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EXO_CLIENT", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "EXO_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_DOUANE_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_DOUANE_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_TVA_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TVA_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ETAT_CLIENT", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CLIENT] ([CODE_CLIENT], [RS_CLIENT], [ADRESSE_CLIENT], [CP_CLIENT], [TEL_CLIENT], [FAX_CLIENT], [EMAIL_CLIENT], [EXO_CLIENT], [ATTEST_EXO_CLIENT], [CODE_DOUANE_CLIENT], [CODE_TVA_CLIENT], [ETAT_CLIENT]) VALUES (@CODE_CLIENT, @RS_CLIENT, @ADRESSE_CLIENT, @CP_CLIENT, @TEL_CLIENT, @FAX_CLIENT, @EMAIL_CLIENT, @EXO_CLIENT, @ATTEST_EXO_CLIENT, @CODE_DOUANE_CLIENT, @CODE_TVA_CLIENT, @ETAT_CLIENT);
SELECT CODE_CLIENT, RS_CLIENT, ADRESSE_CLIENT, CP_CLIENT, TEL_CLIENT, FAX_CLIENT, EMAIL_CLIENT, EXO_CLIENT, ATTEST_EXO_CLIENT, CODE_DOUANE_CLIENT, CODE_TVA_CLIENT, ETAT_CLIENT FROM CLIENT WHERE (CODE_CLIENT = @CODE_CLIENT)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RS_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RS_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CP_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CP_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FAX_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FAX_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EXO_CLIENT", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "EXO_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ATTEST_EXO_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATTEST_EXO_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_DOUANE_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_DOUANE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_TVA_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TVA_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_CLIENT", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CLIENT] SET [CODE_CLIENT] = @CODE_CLIENT, [RS_CLIENT] = @RS_CLIENT, [ADRESSE_CLIENT] = @ADRESSE_CLIENT, [CP_CLIENT] = @CP_CLIENT, [TEL_CLIENT] = @TEL_CLIENT, [FAX_CLIENT] = @FAX_CLIENT, [EMAIL_CLIENT] = @EMAIL_CLIENT, [EXO_CLIENT] = @EXO_CLIENT, [ATTEST_EXO_CLIENT] = @ATTEST_EXO_CLIENT, [CODE_DOUANE_CLIENT] = @CODE_DOUANE_CLIENT, [CODE_TVA_CLIENT] = @CODE_TVA_CLIENT, [ETAT_CLIENT] = @ETAT_CLIENT WHERE (([CODE_CLIENT] = @Original_CODE_CLIENT) AND ((@IsNull_EXO_CLIENT = 1 AND [EXO_CLIENT] IS NULL) OR ([EXO_CLIENT] = @Original_EXO_CLIENT)) AND ([CODE_DOUANE_CLIENT] = @Original_CODE_DOUANE_CLIENT) AND ([CODE_TVA_CLIENT] = @Original_CODE_TVA_CLIENT) AND ([ETAT_CLIENT] = @Original_ETAT_CLIENT));
SELECT CODE_CLIENT, RS_CLIENT, ADRESSE_CLIENT, CP_CLIENT, TEL_CLIENT, FAX_CLIENT, EMAIL_CLIENT, EXO_CLIENT, ATTEST_EXO_CLIENT, CODE_DOUANE_CLIENT, CODE_TVA_CLIENT, ETAT_CLIENT FROM CLIENT WHERE (CODE_CLIENT = @CODE_CLIENT)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RS_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RS_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CP_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CP_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FAX_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FAX_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EXO_CLIENT", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "EXO_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ATTEST_EXO_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ATTEST_EXO_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_DOUANE_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_DOUANE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_TVA_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TVA_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_CLIENT", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_EXO_CLIENT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EXO_CLIENT", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EXO_CLIENT", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "EXO_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_DOUANE_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_DOUANE_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_TVA_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TVA_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ETAT_CLIENT", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_CLIENT, RS_CLIENT, ADRESSE_CLIENT, CP_CLIENT, TEL_CLIENT, FAX_CLIENT," +
                " EMAIL_CLIENT, EXO_CLIENT, ATTEST_EXO_CLIENT, CODE_DOUANE_CLIENT, CODE_TVA_CLIEN" +
                "T, ETAT_CLIENT FROM dbo.CLIENT";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.CLIENTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.CLIENTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.CLIENTDataTable dataTable = new GESTION_COMMERCIALEDataSet.CLIENTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.CLIENTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CLIENT");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CODE_CLIENT, System.Nullable<bool> Original_EXO_CLIENT, string Original_CODE_DOUANE_CLIENT, string Original_CODE_TVA_CLIENT, bool Original_ETAT_CLIENT) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CODE_CLIENT));
            if ((Original_EXO_CLIENT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_EXO_CLIENT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
            }
            if ((Original_CODE_DOUANE_CLIENT == null)) {
                throw new System.ArgumentNullException("Original_CODE_DOUANE_CLIENT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_CODE_DOUANE_CLIENT));
            }
            if ((Original_CODE_TVA_CLIENT == null)) {
                throw new System.ArgumentNullException("Original_CODE_TVA_CLIENT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_CODE_TVA_CLIENT));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((bool)(Original_ETAT_CLIENT));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CODE_CLIENT, string RS_CLIENT, string ADRESSE_CLIENT, string CP_CLIENT, string TEL_CLIENT, string FAX_CLIENT, string EMAIL_CLIENT, System.Nullable<bool> EXO_CLIENT, string ATTEST_EXO_CLIENT, string CODE_DOUANE_CLIENT, string CODE_TVA_CLIENT, bool ETAT_CLIENT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CODE_CLIENT));
            if ((RS_CLIENT == null)) {
                throw new System.ArgumentNullException("RS_CLIENT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(RS_CLIENT));
            }
            if ((ADRESSE_CLIENT == null)) {
                throw new System.ArgumentNullException("ADRESSE_CLIENT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ADRESSE_CLIENT));
            }
            if ((CP_CLIENT == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CP_CLIENT));
            }
            if ((TEL_CLIENT == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(TEL_CLIENT));
            }
            if ((FAX_CLIENT == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(FAX_CLIENT));
            }
            if ((EMAIL_CLIENT == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(EMAIL_CLIENT));
            }
            if ((EXO_CLIENT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((bool)(EXO_CLIENT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((ATTEST_EXO_CLIENT == null)) {
                throw new System.ArgumentNullException("ATTEST_EXO_CLIENT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ATTEST_EXO_CLIENT));
            }
            if ((CODE_DOUANE_CLIENT == null)) {
                throw new System.ArgumentNullException("CODE_DOUANE_CLIENT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(CODE_DOUANE_CLIENT));
            }
            if ((CODE_TVA_CLIENT == null)) {
                throw new System.ArgumentNullException("CODE_TVA_CLIENT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(CODE_TVA_CLIENT));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(ETAT_CLIENT));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal CODE_CLIENT, 
                    string RS_CLIENT, 
                    string ADRESSE_CLIENT, 
                    string CP_CLIENT, 
                    string TEL_CLIENT, 
                    string FAX_CLIENT, 
                    string EMAIL_CLIENT, 
                    System.Nullable<bool> EXO_CLIENT, 
                    string ATTEST_EXO_CLIENT, 
                    string CODE_DOUANE_CLIENT, 
                    string CODE_TVA_CLIENT, 
                    bool ETAT_CLIENT, 
                    decimal Original_CODE_CLIENT, 
                    System.Nullable<bool> Original_EXO_CLIENT, 
                    string Original_CODE_DOUANE_CLIENT, 
                    string Original_CODE_TVA_CLIENT, 
                    bool Original_ETAT_CLIENT) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CODE_CLIENT));
            if ((RS_CLIENT == null)) {
                throw new System.ArgumentNullException("RS_CLIENT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(RS_CLIENT));
            }
            if ((ADRESSE_CLIENT == null)) {
                throw new System.ArgumentNullException("ADRESSE_CLIENT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ADRESSE_CLIENT));
            }
            if ((CP_CLIENT == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CP_CLIENT));
            }
            if ((TEL_CLIENT == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(TEL_CLIENT));
            }
            if ((FAX_CLIENT == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(FAX_CLIENT));
            }
            if ((EMAIL_CLIENT == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(EMAIL_CLIENT));
            }
            if ((EXO_CLIENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(EXO_CLIENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((ATTEST_EXO_CLIENT == null)) {
                throw new System.ArgumentNullException("ATTEST_EXO_CLIENT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(ATTEST_EXO_CLIENT));
            }
            if ((CODE_DOUANE_CLIENT == null)) {
                throw new System.ArgumentNullException("CODE_DOUANE_CLIENT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(CODE_DOUANE_CLIENT));
            }
            if ((CODE_TVA_CLIENT == null)) {
                throw new System.ArgumentNullException("CODE_TVA_CLIENT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(CODE_TVA_CLIENT));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(ETAT_CLIENT));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_CODE_CLIENT));
            if ((Original_EXO_CLIENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((bool)(Original_EXO_CLIENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            if ((Original_CODE_DOUANE_CLIENT == null)) {
                throw new System.ArgumentNullException("Original_CODE_DOUANE_CLIENT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_CODE_DOUANE_CLIENT));
            }
            if ((Original_CODE_TVA_CLIENT == null)) {
                throw new System.ArgumentNullException("Original_CODE_TVA_CLIENT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_CODE_TVA_CLIENT));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((bool)(Original_ETAT_CLIENT));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COMMANDETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COMMANDETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COMMANDE";
            tableMapping.ColumnMappings.Add("CODE_COMMANDE", "CODE_COMMANDE");
            tableMapping.ColumnMappings.Add("CODE_CLIENT", "CODE_CLIENT");
            tableMapping.ColumnMappings.Add("DATE_COMMANDE", "DATE_COMMANDE");
            tableMapping.ColumnMappings.Add("PRIORITE_COMMANDE", "PRIORITE_COMMANDE");
            tableMapping.ColumnMappings.Add("DATE_EXPIRATION_COMMANDE", "DATE_EXPIRATION_COMMANDE");
            tableMapping.ColumnMappings.Add("CODE_EMPLOYE", "CODE_EMPLOYE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[COMMANDE] WHERE (([CODE_COMMANDE] = @Original_CODE_COMMANDE) AND ([CODE_CLIENT] = @Original_CODE_CLIENT) AND ([DATE_COMMANDE] = @Original_DATE_COMMANDE) AND ([PRIORITE_COMMANDE] = @Original_PRIORITE_COMMANDE) AND ((@IsNull_DATE_EXPIRATION_COMMANDE = 1 AND [DATE_EXPIRATION_COMMANDE] IS NULL) OR ([DATE_EXPIRATION_COMMANDE] = @Original_DATE_EXPIRATION_COMMANDE)) AND ([CODE_EMPLOYE] = @Original_CODE_EMPLOYE))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_COMMANDE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_COMMANDE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_COMMANDE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRIORITE_COMMANDE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIORITE_COMMANDE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DATE_EXPIRATION_COMMANDE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_EXPIRATION_COMMANDE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_EXPIRATION_COMMANDE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_EXPIRATION_COMMANDE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[COMMANDE] ([CODE_COMMANDE], [CODE_CLIENT], [DATE_COMMANDE], [PRIORITE_COMMANDE], [DATE_EXPIRATION_COMMANDE], [CODE_EMPLOYE]) VALUES (@CODE_COMMANDE, @CODE_CLIENT, @DATE_COMMANDE, @PRIORITE_COMMANDE, @DATE_EXPIRATION_COMMANDE, @CODE_EMPLOYE);
SELECT CODE_COMMANDE, CODE_CLIENT, DATE_COMMANDE, PRIORITE_COMMANDE, DATE_EXPIRATION_COMMANDE, CODE_EMPLOYE FROM COMMANDE WHERE (CODE_COMMANDE = @CODE_COMMANDE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_COMMANDE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRIORITE_COMMANDE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIORITE_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_EXPIRATION_COMMANDE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_EXPIRATION_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[COMMANDE] SET [CODE_COMMANDE] = @CODE_COMMANDE, [CODE_CLIENT] = @CODE_CLIENT, [DATE_COMMANDE] = @DATE_COMMANDE, [PRIORITE_COMMANDE] = @PRIORITE_COMMANDE, [DATE_EXPIRATION_COMMANDE] = @DATE_EXPIRATION_COMMANDE, [CODE_EMPLOYE] = @CODE_EMPLOYE WHERE (([CODE_COMMANDE] = @Original_CODE_COMMANDE) AND ([CODE_CLIENT] = @Original_CODE_CLIENT) AND ([DATE_COMMANDE] = @Original_DATE_COMMANDE) AND ([PRIORITE_COMMANDE] = @Original_PRIORITE_COMMANDE) AND ((@IsNull_DATE_EXPIRATION_COMMANDE = 1 AND [DATE_EXPIRATION_COMMANDE] IS NULL) OR ([DATE_EXPIRATION_COMMANDE] = @Original_DATE_EXPIRATION_COMMANDE)) AND ([CODE_EMPLOYE] = @Original_CODE_EMPLOYE));
SELECT CODE_COMMANDE, CODE_CLIENT, DATE_COMMANDE, PRIORITE_COMMANDE, DATE_EXPIRATION_COMMANDE, CODE_EMPLOYE FROM COMMANDE WHERE (CODE_COMMANDE = @CODE_COMMANDE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_COMMANDE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRIORITE_COMMANDE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIORITE_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_EXPIRATION_COMMANDE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_EXPIRATION_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_COMMANDE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_COMMANDE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_COMMANDE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PRIORITE_COMMANDE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "PRIORITE_COMMANDE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_DATE_EXPIRATION_COMMANDE", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_EXPIRATION_COMMANDE", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_EXPIRATION_COMMANDE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_EXPIRATION_COMMANDE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_COMMANDE, CODE_CLIENT, DATE_COMMANDE, PRIORITE_COMMANDE, DATE_EXPIRAT" +
                "ION_COMMANDE, CODE_EMPLOYE FROM dbo.COMMANDE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.COMMANDEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.COMMANDEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.COMMANDEDataTable dataTable = new GESTION_COMMERCIALEDataSet.COMMANDEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.COMMANDEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "COMMANDE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CODE_COMMANDE, decimal Original_CODE_CLIENT, System.DateTime Original_DATE_COMMANDE, bool Original_PRIORITE_COMMANDE, System.Nullable<System.DateTime> Original_DATE_EXPIRATION_COMMANDE, decimal Original_CODE_EMPLOYE) {
            if ((Original_CODE_COMMANDE == null)) {
                throw new System.ArgumentNullException("Original_CODE_COMMANDE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CODE_COMMANDE));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_CODE_CLIENT));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_DATE_COMMANDE));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_PRIORITE_COMMANDE));
            if ((Original_DATE_EXPIRATION_COMMANDE.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_DATE_EXPIRATION_COMMANDE.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_CODE_EMPLOYE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CODE_COMMANDE, decimal CODE_CLIENT, System.DateTime DATE_COMMANDE, bool PRIORITE_COMMANDE, System.Nullable<System.DateTime> DATE_EXPIRATION_COMMANDE, decimal CODE_EMPLOYE) {
            if ((CODE_COMMANDE == null)) {
                throw new System.ArgumentNullException("CODE_COMMANDE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CODE_COMMANDE));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(CODE_CLIENT));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(DATE_COMMANDE));
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(PRIORITE_COMMANDE));
            if ((DATE_EXPIRATION_COMMANDE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(DATE_EXPIRATION_COMMANDE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(CODE_EMPLOYE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CODE_COMMANDE, decimal CODE_CLIENT, System.DateTime DATE_COMMANDE, bool PRIORITE_COMMANDE, System.Nullable<System.DateTime> DATE_EXPIRATION_COMMANDE, decimal CODE_EMPLOYE, string Original_CODE_COMMANDE, decimal Original_CODE_CLIENT, System.DateTime Original_DATE_COMMANDE, bool Original_PRIORITE_COMMANDE, System.Nullable<System.DateTime> Original_DATE_EXPIRATION_COMMANDE, decimal Original_CODE_EMPLOYE) {
            if ((CODE_COMMANDE == null)) {
                throw new System.ArgumentNullException("CODE_COMMANDE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CODE_COMMANDE));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((decimal)(CODE_CLIENT));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(DATE_COMMANDE));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(PRIORITE_COMMANDE));
            if ((DATE_EXPIRATION_COMMANDE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(DATE_EXPIRATION_COMMANDE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(CODE_EMPLOYE));
            if ((Original_CODE_COMMANDE == null)) {
                throw new System.ArgumentNullException("Original_CODE_COMMANDE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_CODE_COMMANDE));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(Original_CODE_CLIENT));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_DATE_COMMANDE));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_PRIORITE_COMMANDE));
            if ((Original_DATE_EXPIRATION_COMMANDE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_DATE_EXPIRATION_COMMANDE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(Original_CODE_EMPLOYE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EMPLOYETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EMPLOYETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EMPLOYE";
            tableMapping.ColumnMappings.Add("CODE_EMPLOYE", "CODE_EMPLOYE");
            tableMapping.ColumnMappings.Add("NOM_EMPLOYE", "NOM_EMPLOYE");
            tableMapping.ColumnMappings.Add("PRENOM_EMPLOYE", "PRENOM_EMPLOYE");
            tableMapping.ColumnMappings.Add("DATE_NAIS_EMPLOYE", "DATE_NAIS_EMPLOYE");
            tableMapping.ColumnMappings.Add("ADRESSE_EMPLOYE", "ADRESSE_EMPLOYE");
            tableMapping.ColumnMappings.Add("TEL_EMPLOYE", "TEL_EMPLOYE");
            tableMapping.ColumnMappings.Add("EMAIL_EMPLOYE", "EMAIL_EMPLOYE");
            tableMapping.ColumnMappings.Add("DATE_EMBAUCHE_EMPLOYE", "DATE_EMBAUCHE_EMPLOYE");
            tableMapping.ColumnMappings.Add("LOGIN_USER", "LOGIN_USER");
            tableMapping.ColumnMappings.Add("PASSWORD_USER", "PASSWORD_USER");
            tableMapping.ColumnMappings.Add("ETAT_USER", "ETAT_USER");
            tableMapping.ColumnMappings.Add("CODE_SOCIETE", "CODE_SOCIETE");
            tableMapping.ColumnMappings.Add("CODE_MAG", "CODE_MAG");
            tableMapping.ColumnMappings.Add("CODE_FONCTION", "CODE_FONCTION");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[EMPLOYE] WHERE (([CODE_EMPLOYE] = @Original_CODE_EMPLOYE) AND ([DATE_NAIS_EMPLOYE] = @Original_DATE_NAIS_EMPLOYE) AND ([DATE_EMBAUCHE_EMPLOYE] = @Original_DATE_EMBAUCHE_EMPLOYE) AND ([ETAT_USER] = @Original_ETAT_USER) AND ([CODE_SOCIETE] = @Original_CODE_SOCIETE) AND ([CODE_MAG] = @Original_CODE_MAG) AND ([CODE_FONCTION] = @Original_CODE_FONCTION))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_NAIS_EMPLOYE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_NAIS_EMPLOYE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_EMBAUCHE_EMPLOYE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_EMBAUCHE_EMPLOYE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ETAT_USER", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_USER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[EMPLOYE] ([CODE_EMPLOYE], [NOM_EMPLOYE], [PRENOM_EMPLOYE], [DATE_NAIS_EMPLOYE], [ADRESSE_EMPLOYE], [TEL_EMPLOYE], [EMAIL_EMPLOYE], [DATE_EMBAUCHE_EMPLOYE], [LOGIN_USER], [PASSWORD_USER], [ETAT_USER], [CODE_SOCIETE], [CODE_MAG], [CODE_FONCTION]) VALUES (@CODE_EMPLOYE, @NOM_EMPLOYE, @PRENOM_EMPLOYE, @DATE_NAIS_EMPLOYE, @ADRESSE_EMPLOYE, @TEL_EMPLOYE, @EMAIL_EMPLOYE, @DATE_EMBAUCHE_EMPLOYE, @LOGIN_USER, @PASSWORD_USER, @ETAT_USER, @CODE_SOCIETE, @CODE_MAG, @CODE_FONCTION);
SELECT CODE_EMPLOYE, NOM_EMPLOYE, PRENOM_EMPLOYE, DATE_NAIS_EMPLOYE, ADRESSE_EMPLOYE, TEL_EMPLOYE, EMAIL_EMPLOYE, DATE_EMBAUCHE_EMPLOYE, LOGIN_USER, PASSWORD_USER, ETAT_USER, CODE_SOCIETE, CODE_MAG, CODE_FONCTION FROM EMPLOYE WHERE (CODE_EMPLOYE = @CODE_EMPLOYE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_EMPLOYE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM_EMPLOYE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_NAIS_EMPLOYE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_NAIS_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_EMPLOYE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL_EMPLOYE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL_EMPLOYE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_EMBAUCHE_EMPLOYE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_EMBAUCHE_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOGIN_USER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LOGIN_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PASSWORD_USER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PASSWORD_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_USER", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EMPLOYE] SET [CODE_EMPLOYE] = @CODE_EMPLOYE, [NOM_EMPLOYE] = @NOM_EMPLOYE, [PRENOM_EMPLOYE] = @PRENOM_EMPLOYE, [DATE_NAIS_EMPLOYE] = @DATE_NAIS_EMPLOYE, [ADRESSE_EMPLOYE] = @ADRESSE_EMPLOYE, [TEL_EMPLOYE] = @TEL_EMPLOYE, [EMAIL_EMPLOYE] = @EMAIL_EMPLOYE, [DATE_EMBAUCHE_EMPLOYE] = @DATE_EMBAUCHE_EMPLOYE, [LOGIN_USER] = @LOGIN_USER, [PASSWORD_USER] = @PASSWORD_USER, [ETAT_USER] = @ETAT_USER, [CODE_SOCIETE] = @CODE_SOCIETE, [CODE_MAG] = @CODE_MAG, [CODE_FONCTION] = @CODE_FONCTION WHERE (([CODE_EMPLOYE] = @Original_CODE_EMPLOYE) AND ([DATE_NAIS_EMPLOYE] = @Original_DATE_NAIS_EMPLOYE) AND ([DATE_EMBAUCHE_EMPLOYE] = @Original_DATE_EMBAUCHE_EMPLOYE) AND ([ETAT_USER] = @Original_ETAT_USER) AND ([CODE_SOCIETE] = @Original_CODE_SOCIETE) AND ([CODE_MAG] = @Original_CODE_MAG) AND ([CODE_FONCTION] = @Original_CODE_FONCTION));
SELECT CODE_EMPLOYE, NOM_EMPLOYE, PRENOM_EMPLOYE, DATE_NAIS_EMPLOYE, ADRESSE_EMPLOYE, TEL_EMPLOYE, EMAIL_EMPLOYE, DATE_EMBAUCHE_EMPLOYE, LOGIN_USER, PASSWORD_USER, ETAT_USER, CODE_SOCIETE, CODE_MAG, CODE_FONCTION FROM EMPLOYE WHERE (CODE_EMPLOYE = @CODE_EMPLOYE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_EMPLOYE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRENOM_EMPLOYE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PRENOM_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_NAIS_EMPLOYE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_NAIS_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_EMPLOYE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL_EMPLOYE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL_EMPLOYE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_EMBAUCHE_EMPLOYE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_EMBAUCHE_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOGIN_USER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LOGIN_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PASSWORD_USER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PASSWORD_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_USER", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_NAIS_EMPLOYE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_NAIS_EMPLOYE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_EMBAUCHE_EMPLOYE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_EMBAUCHE_EMPLOYE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ETAT_USER", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_USER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_EMPLOYE, NOM_EMPLOYE, PRENOM_EMPLOYE, DATE_NAIS_EMPLOYE, ADRESSE_EMPL" +
                "OYE, TEL_EMPLOYE, EMAIL_EMPLOYE, DATE_EMBAUCHE_EMPLOYE, LOGIN_USER, PASSWORD_USE" +
                "R, ETAT_USER, CODE_SOCIETE, CODE_MAG, CODE_FONCTION FROM dbo.EMPLOYE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.EMPLOYEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.EMPLOYEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.EMPLOYEDataTable dataTable = new GESTION_COMMERCIALEDataSet.EMPLOYEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.EMPLOYEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EMPLOYE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CODE_EMPLOYE, System.DateTime Original_DATE_NAIS_EMPLOYE, System.DateTime Original_DATE_EMBAUCHE_EMPLOYE, bool Original_ETAT_USER, decimal Original_CODE_SOCIETE, decimal Original_CODE_MAG, decimal Original_CODE_FONCTION) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CODE_EMPLOYE));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_DATE_NAIS_EMPLOYE));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_DATE_EMBAUCHE_EMPLOYE));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_ETAT_USER));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_CODE_SOCIETE));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_CODE_MAG));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_CODE_FONCTION));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CODE_EMPLOYE, string NOM_EMPLOYE, string PRENOM_EMPLOYE, System.DateTime DATE_NAIS_EMPLOYE, string ADRESSE_EMPLOYE, string TEL_EMPLOYE, string EMAIL_EMPLOYE, System.DateTime DATE_EMBAUCHE_EMPLOYE, string LOGIN_USER, string PASSWORD_USER, bool ETAT_USER, decimal CODE_SOCIETE, decimal CODE_MAG, decimal CODE_FONCTION) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CODE_EMPLOYE));
            if ((NOM_EMPLOYE == null)) {
                throw new System.ArgumentNullException("NOM_EMPLOYE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NOM_EMPLOYE));
            }
            if ((PRENOM_EMPLOYE == null)) {
                throw new System.ArgumentNullException("PRENOM_EMPLOYE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PRENOM_EMPLOYE));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DATE_NAIS_EMPLOYE));
            if ((ADRESSE_EMPLOYE == null)) {
                throw new System.ArgumentNullException("ADRESSE_EMPLOYE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(ADRESSE_EMPLOYE));
            }
            if ((TEL_EMPLOYE == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TEL_EMPLOYE));
            }
            if ((EMAIL_EMPLOYE == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(EMAIL_EMPLOYE));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(DATE_EMBAUCHE_EMPLOYE));
            if ((LOGIN_USER == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(LOGIN_USER));
            }
            if ((PASSWORD_USER == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(PASSWORD_USER));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(ETAT_USER));
            this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(CODE_SOCIETE));
            this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(CODE_MAG));
            this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(CODE_FONCTION));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal CODE_EMPLOYE, 
                    string NOM_EMPLOYE, 
                    string PRENOM_EMPLOYE, 
                    System.DateTime DATE_NAIS_EMPLOYE, 
                    string ADRESSE_EMPLOYE, 
                    string TEL_EMPLOYE, 
                    string EMAIL_EMPLOYE, 
                    System.DateTime DATE_EMBAUCHE_EMPLOYE, 
                    string LOGIN_USER, 
                    string PASSWORD_USER, 
                    bool ETAT_USER, 
                    decimal CODE_SOCIETE, 
                    decimal CODE_MAG, 
                    decimal CODE_FONCTION, 
                    decimal Original_CODE_EMPLOYE, 
                    System.DateTime Original_DATE_NAIS_EMPLOYE, 
                    System.DateTime Original_DATE_EMBAUCHE_EMPLOYE, 
                    bool Original_ETAT_USER, 
                    decimal Original_CODE_SOCIETE, 
                    decimal Original_CODE_MAG, 
                    decimal Original_CODE_FONCTION) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CODE_EMPLOYE));
            if ((NOM_EMPLOYE == null)) {
                throw new System.ArgumentNullException("NOM_EMPLOYE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NOM_EMPLOYE));
            }
            if ((PRENOM_EMPLOYE == null)) {
                throw new System.ArgumentNullException("PRENOM_EMPLOYE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PRENOM_EMPLOYE));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DATE_NAIS_EMPLOYE));
            if ((ADRESSE_EMPLOYE == null)) {
                throw new System.ArgumentNullException("ADRESSE_EMPLOYE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(ADRESSE_EMPLOYE));
            }
            if ((TEL_EMPLOYE == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TEL_EMPLOYE));
            }
            if ((EMAIL_EMPLOYE == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(EMAIL_EMPLOYE));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(DATE_EMBAUCHE_EMPLOYE));
            if ((LOGIN_USER == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(LOGIN_USER));
            }
            if ((PASSWORD_USER == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(PASSWORD_USER));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(ETAT_USER));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(CODE_SOCIETE));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(CODE_MAG));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(CODE_FONCTION));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_CODE_EMPLOYE));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(Original_DATE_NAIS_EMPLOYE));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_DATE_EMBAUCHE_EMPLOYE));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((bool)(Original_ETAT_USER));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_CODE_SOCIETE));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_CODE_MAG));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_CODE_FONCTION));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FACTURETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FACTURETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FACTURE";
            tableMapping.ColumnMappings.Add("CODE_FACTURE", "CODE_FACTURE");
            tableMapping.ColumnMappings.Add("DATE_FACTURE", "DATE_FACTURE");
            tableMapping.ColumnMappings.Add("CODE_CLIENT", "CODE_CLIENT");
            tableMapping.ColumnMappings.Add("MONTANT_HT_FACTURE", "MONTANT_HT_FACTURE");
            tableMapping.ColumnMappings.Add("MONTANT_TVA", "MONTANT_TVA");
            tableMapping.ColumnMappings.Add("MONTANT_TTC", "MONTANT_TTC");
            tableMapping.ColumnMappings.Add("TAUX_REMISE", "TAUX_REMISE");
            tableMapping.ColumnMappings.Add("MONTANT_BASE", "MONTANT_BASE");
            tableMapping.ColumnMappings.Add("TIMBRE_FACTURE", "TIMBRE_FACTURE");
            tableMapping.ColumnMappings.Add("MONTANT_TOTAL_FACTURE", "MONTANT_TOTAL_FACTURE");
            tableMapping.ColumnMappings.Add("MONTANT_LETTRE", "MONTANT_LETTRE");
            tableMapping.ColumnMappings.Add("ANNULATION_FACTURE", "ANNULATION_FACTURE");
            tableMapping.ColumnMappings.Add("REGLER", "REGLER");
            tableMapping.ColumnMappings.Add("CREDIT", "CREDIT");
            tableMapping.ColumnMappings.Add("MAGASIN", "MAGASIN");
            tableMapping.ColumnMappings.Add("CODE_EMPLOYE", "CODE_EMPLOYE");
            tableMapping.ColumnMappings.Add("CODE_REGLEMENT_CLIENT", "CODE_REGLEMENT_CLIENT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[FACTURE] WHERE (([CODE_FACTURE] = @Original_CODE_FACTURE) AND ([DATE_FACTURE] = @Original_DATE_FACTURE) AND ([CODE_CLIENT] = @Original_CODE_CLIENT) AND ([MONTANT_HT_FACTURE] = @Original_MONTANT_HT_FACTURE) AND ([MONTANT_TVA] = @Original_MONTANT_TVA) AND ([MONTANT_TTC] = @Original_MONTANT_TTC) AND ([TAUX_REMISE] = @Original_TAUX_REMISE) AND ([MONTANT_BASE] = @Original_MONTANT_BASE) AND ([TIMBRE_FACTURE] = @Original_TIMBRE_FACTURE) AND ([MONTANT_TOTAL_FACTURE] = @Original_MONTANT_TOTAL_FACTURE) AND ([ANNULATION_FACTURE] = @Original_ANNULATION_FACTURE) AND ((@IsNull_CREDIT = 1 AND [CREDIT] IS NULL) OR ([CREDIT] = @Original_CREDIT)) AND ([CODE_EMPLOYE] = @Original_CODE_EMPLOYE) AND ([CODE_REGLEMENT_CLIENT] = @Original_CODE_REGLEMENT_CLIENT))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_FACTURE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONTANT_HT_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_HT_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONTANT_TVA", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TVA", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONTANT_TTC", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TTC", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TAUX_REMISE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 4, 2, "TAUX_REMISE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONTANT_BASE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_BASE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TIMBRE_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "TIMBRE_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONTANT_TOTAL_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TOTAL_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ANNULATION_FACTURE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ANNULATION_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CREDIT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CREDIT", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CREDIT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "CREDIT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_REGLEMENT_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_REGLEMENT_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[FACTURE] ([CODE_FACTURE], [DATE_FACTURE], [CODE_CLIENT], [MONTANT_HT_FACTURE], [MONTANT_TVA], [MONTANT_TTC], [TAUX_REMISE], [MONTANT_BASE], [TIMBRE_FACTURE], [MONTANT_TOTAL_FACTURE], [MONTANT_LETTRE], [ANNULATION_FACTURE], [REGLER], [CREDIT], [MAGASIN], [CODE_EMPLOYE], [CODE_REGLEMENT_CLIENT]) VALUES (@CODE_FACTURE, @DATE_FACTURE, @CODE_CLIENT, @MONTANT_HT_FACTURE, @MONTANT_TVA, @MONTANT_TTC, @TAUX_REMISE, @MONTANT_BASE, @TIMBRE_FACTURE, @MONTANT_TOTAL_FACTURE, @MONTANT_LETTRE, @ANNULATION_FACTURE, @REGLER, @CREDIT, @MAGASIN, @CODE_EMPLOYE, @CODE_REGLEMENT_CLIENT);
SELECT CODE_FACTURE, DATE_FACTURE, CODE_CLIENT, MONTANT_HT_FACTURE, MONTANT_TVA, MONTANT_TTC, TAUX_REMISE, MONTANT_BASE, TIMBRE_FACTURE, MONTANT_TOTAL_FACTURE, MONTANT_LETTRE, ANNULATION_FACTURE, REGLER, CREDIT, MAGASIN, CODE_EMPLOYE, CODE_REGLEMENT_CLIENT FROM FACTURE WHERE (CODE_FACTURE = @CODE_FACTURE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_FACTURE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_HT_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_HT_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_TVA", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TVA", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_TTC", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TTC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TAUX_REMISE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 4, 2, "TAUX_REMISE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_BASE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_BASE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TIMBRE_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "TIMBRE_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_TOTAL_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TOTAL_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_LETTRE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MONTANT_LETTRE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNULATION_FACTURE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ANNULATION_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@REGLER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "REGLER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CREDIT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "CREDIT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MAGASIN", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MAGASIN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_REGLEMENT_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_REGLEMENT_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[FACTURE] SET [CODE_FACTURE] = @CODE_FACTURE, [DATE_FACTURE] = @DATE" +
                "_FACTURE, [CODE_CLIENT] = @CODE_CLIENT, [MONTANT_HT_FACTURE] = @MONTANT_HT_FACTU" +
                "RE, [MONTANT_TVA] = @MONTANT_TVA, [MONTANT_TTC] = @MONTANT_TTC, [TAUX_REMISE] = " +
                "@TAUX_REMISE, [MONTANT_BASE] = @MONTANT_BASE, [TIMBRE_FACTURE] = @TIMBRE_FACTURE" +
                ", [MONTANT_TOTAL_FACTURE] = @MONTANT_TOTAL_FACTURE, [MONTANT_LETTRE] = @MONTANT_" +
                "LETTRE, [ANNULATION_FACTURE] = @ANNULATION_FACTURE, [REGLER] = @REGLER, [CREDIT]" +
                " = @CREDIT, [MAGASIN] = @MAGASIN, [CODE_EMPLOYE] = @CODE_EMPLOYE, [CODE_REGLEMEN" +
                "T_CLIENT] = @CODE_REGLEMENT_CLIENT WHERE (([CODE_FACTURE] = @Original_CODE_FACTU" +
                "RE) AND ([DATE_FACTURE] = @Original_DATE_FACTURE) AND ([CODE_CLIENT] = @Original" +
                "_CODE_CLIENT) AND ([MONTANT_HT_FACTURE] = @Original_MONTANT_HT_FACTURE) AND ([MO" +
                "NTANT_TVA] = @Original_MONTANT_TVA) AND ([MONTANT_TTC] = @Original_MONTANT_TTC) " +
                "AND ([TAUX_REMISE] = @Original_TAUX_REMISE) AND ([MONTANT_BASE] = @Original_MONT" +
                "ANT_BASE) AND ([TIMBRE_FACTURE] = @Original_TIMBRE_FACTURE) AND ([MONTANT_TOTAL_" +
                "FACTURE] = @Original_MONTANT_TOTAL_FACTURE) AND ([ANNULATION_FACTURE] = @Origina" +
                "l_ANNULATION_FACTURE) AND ((@IsNull_CREDIT = 1 AND [CREDIT] IS NULL) OR ([CREDIT" +
                "] = @Original_CREDIT)) AND ([CODE_EMPLOYE] = @Original_CODE_EMPLOYE) AND ([CODE_" +
                "REGLEMENT_CLIENT] = @Original_CODE_REGLEMENT_CLIENT));\r\nSELECT CODE_FACTURE, DAT" +
                "E_FACTURE, CODE_CLIENT, MONTANT_HT_FACTURE, MONTANT_TVA, MONTANT_TTC, TAUX_REMIS" +
                "E, MONTANT_BASE, TIMBRE_FACTURE, MONTANT_TOTAL_FACTURE, MONTANT_LETTRE, ANNULATI" +
                "ON_FACTURE, REGLER, CREDIT, MAGASIN, CODE_EMPLOYE, CODE_REGLEMENT_CLIENT FROM FA" +
                "CTURE WHERE (CODE_FACTURE = @CODE_FACTURE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_FACTURE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_HT_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_HT_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_TVA", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TVA", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_TTC", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TTC", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TAUX_REMISE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 4, 2, "TAUX_REMISE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_BASE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_BASE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TIMBRE_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "TIMBRE_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_TOTAL_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TOTAL_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONTANT_LETTRE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MONTANT_LETTRE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ANNULATION_FACTURE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ANNULATION_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@REGLER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "REGLER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CREDIT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "CREDIT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MAGASIN", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MAGASIN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_REGLEMENT_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_REGLEMENT_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DATE_FACTURE", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONTANT_HT_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_HT_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONTANT_TVA", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TVA", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONTANT_TTC", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TTC", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TAUX_REMISE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 4, 2, "TAUX_REMISE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONTANT_BASE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_BASE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TIMBRE_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "TIMBRE_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONTANT_TOTAL_FACTURE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONTANT_TOTAL_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ANNULATION_FACTURE", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ANNULATION_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CREDIT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CREDIT", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CREDIT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "CREDIT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_REGLEMENT_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_REGLEMENT_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT CODE_FACTURE, DATE_FACTURE, CODE_CLIENT, MONTANT_HT_FACTURE, MONTANT_TVA, MONTANT_TTC, TAUX_REMISE, MONTANT_BASE, TIMBRE_FACTURE, MONTANT_TOTAL_FACTURE, MONTANT_LETTRE, ANNULATION_FACTURE, REGLER, CREDIT, MAGASIN, CODE_EMPLOYE, CODE_REGLEMENT_CLIENT FROM dbo.FACTURE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.FACTUREDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.FACTUREDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.FACTUREDataTable dataTable = new GESTION_COMMERCIALEDataSet.FACTUREDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.FACTUREDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FACTURE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CODE_FACTURE, System.DateTime Original_DATE_FACTURE, decimal Original_CODE_CLIENT, decimal Original_MONTANT_HT_FACTURE, decimal Original_MONTANT_TVA, decimal Original_MONTANT_TTC, decimal Original_TAUX_REMISE, decimal Original_MONTANT_BASE, decimal Original_TIMBRE_FACTURE, decimal Original_MONTANT_TOTAL_FACTURE, bool Original_ANNULATION_FACTURE, System.Nullable<decimal> Original_CREDIT, decimal Original_CODE_EMPLOYE, string Original_CODE_REGLEMENT_CLIENT) {
            if ((Original_CODE_FACTURE == null)) {
                throw new System.ArgumentNullException("Original_CODE_FACTURE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CODE_FACTURE));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_DATE_FACTURE));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_CODE_CLIENT));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_MONTANT_HT_FACTURE));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_MONTANT_TVA));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_MONTANT_TTC));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_TAUX_REMISE));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((decimal)(Original_MONTANT_BASE));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((decimal)(Original_TIMBRE_FACTURE));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((decimal)(Original_MONTANT_TOTAL_FACTURE));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_ANNULATION_FACTURE));
            if ((Original_CREDIT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((decimal)(Original_CREDIT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[13].Value = ((decimal)(Original_CODE_EMPLOYE));
            if ((Original_CODE_REGLEMENT_CLIENT == null)) {
                throw new System.ArgumentNullException("Original_CODE_REGLEMENT_CLIENT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_CODE_REGLEMENT_CLIENT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string CODE_FACTURE, 
                    System.DateTime DATE_FACTURE, 
                    decimal CODE_CLIENT, 
                    decimal MONTANT_HT_FACTURE, 
                    decimal MONTANT_TVA, 
                    decimal MONTANT_TTC, 
                    decimal TAUX_REMISE, 
                    decimal MONTANT_BASE, 
                    decimal TIMBRE_FACTURE, 
                    decimal MONTANT_TOTAL_FACTURE, 
                    string MONTANT_LETTRE, 
                    bool ANNULATION_FACTURE, 
                    string REGLER, 
                    System.Nullable<decimal> CREDIT, 
                    string MAGASIN, 
                    decimal CODE_EMPLOYE, 
                    string CODE_REGLEMENT_CLIENT) {
            if ((CODE_FACTURE == null)) {
                throw new System.ArgumentNullException("CODE_FACTURE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CODE_FACTURE));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(DATE_FACTURE));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(CODE_CLIENT));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(MONTANT_HT_FACTURE));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(MONTANT_TVA));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(MONTANT_TTC));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(TAUX_REMISE));
            this.Adapter.InsertCommand.Parameters[7].Value = ((decimal)(MONTANT_BASE));
            this.Adapter.InsertCommand.Parameters[8].Value = ((decimal)(TIMBRE_FACTURE));
            this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(MONTANT_TOTAL_FACTURE));
            if ((MONTANT_LETTRE == null)) {
                throw new System.ArgumentNullException("MONTANT_LETTRE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(MONTANT_LETTRE));
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(ANNULATION_FACTURE));
            if ((REGLER == null)) {
                throw new System.ArgumentNullException("REGLER");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(REGLER));
            }
            if ((CREDIT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(CREDIT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((MAGASIN == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(MAGASIN));
            }
            this.Adapter.InsertCommand.Parameters[15].Value = ((decimal)(CODE_EMPLOYE));
            if ((CODE_REGLEMENT_CLIENT == null)) {
                throw new System.ArgumentNullException("CODE_REGLEMENT_CLIENT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(CODE_REGLEMENT_CLIENT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string CODE_FACTURE, 
                    System.DateTime DATE_FACTURE, 
                    decimal CODE_CLIENT, 
                    decimal MONTANT_HT_FACTURE, 
                    decimal MONTANT_TVA, 
                    decimal MONTANT_TTC, 
                    decimal TAUX_REMISE, 
                    decimal MONTANT_BASE, 
                    decimal TIMBRE_FACTURE, 
                    decimal MONTANT_TOTAL_FACTURE, 
                    string MONTANT_LETTRE, 
                    bool ANNULATION_FACTURE, 
                    string REGLER, 
                    System.Nullable<decimal> CREDIT, 
                    string MAGASIN, 
                    decimal CODE_EMPLOYE, 
                    string CODE_REGLEMENT_CLIENT, 
                    string Original_CODE_FACTURE, 
                    System.DateTime Original_DATE_FACTURE, 
                    decimal Original_CODE_CLIENT, 
                    decimal Original_MONTANT_HT_FACTURE, 
                    decimal Original_MONTANT_TVA, 
                    decimal Original_MONTANT_TTC, 
                    decimal Original_TAUX_REMISE, 
                    decimal Original_MONTANT_BASE, 
                    decimal Original_TIMBRE_FACTURE, 
                    decimal Original_MONTANT_TOTAL_FACTURE, 
                    bool Original_ANNULATION_FACTURE, 
                    System.Nullable<decimal> Original_CREDIT, 
                    decimal Original_CODE_EMPLOYE, 
                    string Original_CODE_REGLEMENT_CLIENT) {
            if ((CODE_FACTURE == null)) {
                throw new System.ArgumentNullException("CODE_FACTURE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CODE_FACTURE));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(DATE_FACTURE));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(CODE_CLIENT));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(MONTANT_HT_FACTURE));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(MONTANT_TVA));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(MONTANT_TTC));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(TAUX_REMISE));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((decimal)(MONTANT_BASE));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(TIMBRE_FACTURE));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(MONTANT_TOTAL_FACTURE));
            if ((MONTANT_LETTRE == null)) {
                throw new System.ArgumentNullException("MONTANT_LETTRE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(MONTANT_LETTRE));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(ANNULATION_FACTURE));
            if ((REGLER == null)) {
                throw new System.ArgumentNullException("REGLER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(REGLER));
            }
            if ((CREDIT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(CREDIT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((MAGASIN == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(MAGASIN));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((decimal)(CODE_EMPLOYE));
            if ((CODE_REGLEMENT_CLIENT == null)) {
                throw new System.ArgumentNullException("CODE_REGLEMENT_CLIENT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(CODE_REGLEMENT_CLIENT));
            }
            if ((Original_CODE_FACTURE == null)) {
                throw new System.ArgumentNullException("Original_CODE_FACTURE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_CODE_FACTURE));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(Original_DATE_FACTURE));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_CODE_CLIENT));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_MONTANT_HT_FACTURE));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((decimal)(Original_MONTANT_TVA));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((decimal)(Original_MONTANT_TTC));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((decimal)(Original_TAUX_REMISE));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(Original_MONTANT_BASE));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((decimal)(Original_TIMBRE_FACTURE));
            this.Adapter.UpdateCommand.Parameters[26].Value = ((decimal)(Original_MONTANT_TOTAL_FACTURE));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((bool)(Original_ANNULATION_FACTURE));
            if ((Original_CREDIT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((decimal)(Original_CREDIT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[30].Value = ((decimal)(Original_CODE_EMPLOYE));
            if ((Original_CODE_REGLEMENT_CLIENT == null)) {
                throw new System.ArgumentNullException("Original_CODE_REGLEMENT_CLIENT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_CODE_REGLEMENT_CLIENT));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FONCTIONALITE_EMPLOYETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FONCTIONALITE_EMPLOYETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FONCTIONALITE_EMPLOYE";
            tableMapping.ColumnMappings.Add("CODE_FONCTION", "CODE_FONCTION");
            tableMapping.ColumnMappings.Add("LIB_FONCTION", "LIB_FONCTION");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FONCTIONALITE_EMPLOYE] WHERE (([CODE_FONCTION] = @Original_COD" +
                "E_FONCTION) AND ([LIB_FONCTION] = @Original_LIB_FONCTION))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LIB_FONCTION", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LIB_FONCTION", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FONCTIONALITE_EMPLOYE] ([CODE_FONCTION], [LIB_FONCTION]) VALUE" +
                "S (@CODE_FONCTION, @LIB_FONCTION);\r\nSELECT CODE_FONCTION, LIB_FONCTION FROM FONC" +
                "TIONALITE_EMPLOYE WHERE (CODE_FONCTION = @CODE_FONCTION)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LIB_FONCTION", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LIB_FONCTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[FONCTIONALITE_EMPLOYE] SET [CODE_FONCTION] = @CODE_FONCTION, [LIB_FONCTION] = @LIB_FONCTION WHERE (([CODE_FONCTION] = @Original_CODE_FONCTION) AND ([LIB_FONCTION] = @Original_LIB_FONCTION));
SELECT CODE_FONCTION, LIB_FONCTION FROM FONCTIONALITE_EMPLOYE WHERE (CODE_FONCTION = @CODE_FONCTION)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LIB_FONCTION", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LIB_FONCTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LIB_FONCTION", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LIB_FONCTION", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_FONCTION, LIB_FONCTION FROM dbo.FONCTIONALITE_EMPLOYE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.FONCTIONALITE_EMPLOYEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.FONCTIONALITE_EMPLOYEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.FONCTIONALITE_EMPLOYEDataTable dataTable = new GESTION_COMMERCIALEDataSet.FONCTIONALITE_EMPLOYEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.FONCTIONALITE_EMPLOYEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FONCTIONALITE_EMPLOYE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CODE_FONCTION, string Original_LIB_FONCTION) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CODE_FONCTION));
            if ((Original_LIB_FONCTION == null)) {
                throw new System.ArgumentNullException("Original_LIB_FONCTION");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_LIB_FONCTION));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CODE_FONCTION, string LIB_FONCTION) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CODE_FONCTION));
            if ((LIB_FONCTION == null)) {
                throw new System.ArgumentNullException("LIB_FONCTION");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LIB_FONCTION));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal CODE_FONCTION, string LIB_FONCTION, decimal Original_CODE_FONCTION, string Original_LIB_FONCTION) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CODE_FONCTION));
            if ((LIB_FONCTION == null)) {
                throw new System.ArgumentNullException("LIB_FONCTION");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LIB_FONCTION));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Original_CODE_FONCTION));
            if ((Original_LIB_FONCTION == null)) {
                throw new System.ArgumentNullException("Original_LIB_FONCTION");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_LIB_FONCTION));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FOURNISSEURTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FOURNISSEURTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FOURNISSEUR";
            tableMapping.ColumnMappings.Add("CODE_FOURNISSEUR", "CODE_FOURNISSEUR");
            tableMapping.ColumnMappings.Add("RS_FOURNISEEUR", "RS_FOURNISEEUR");
            tableMapping.ColumnMappings.Add("ADRESSE_FOURNISSEUR", "ADRESSE_FOURNISSEUR");
            tableMapping.ColumnMappings.Add("TEL_FOURNISSEUR", "TEL_FOURNISSEUR");
            tableMapping.ColumnMappings.Add("FAX_FOURNISSEUR", "FAX_FOURNISSEUR");
            tableMapping.ColumnMappings.Add("EMAIL_FOURNISSEUR", "EMAIL_FOURNISSEUR");
            tableMapping.ColumnMappings.Add("SITE_WEB_FOURNISSEUR", "SITE_WEB_FOURNISSEUR");
            tableMapping.ColumnMappings.Add("RIB_FOURNISSEUR", "RIB_FOURNISSEUR");
            tableMapping.ColumnMappings.Add("CODE_TVA_FOURNISSEUR", "CODE_TVA_FOURNISSEUR");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FOURNISSEUR] WHERE (([CODE_FOURNISSEUR] = @Original_CODE_FOURN" +
                "ISSEUR) AND ([RIB_FOURNISSEUR] = @Original_RIB_FOURNISSEUR) AND ([CODE_TVA_FOURN" +
                "ISSEUR] = @Original_CODE_TVA_FOURNISSEUR))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FOURNISSEUR", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FOURNISSEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RIB_FOURNISSEUR", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RIB_FOURNISSEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_TVA_FOURNISSEUR", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TVA_FOURNISSEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[FOURNISSEUR] ([CODE_FOURNISSEUR], [RS_FOURNISEEUR], [ADRESSE_FOURNISSEUR], [TEL_FOURNISSEUR], [FAX_FOURNISSEUR], [EMAIL_FOURNISSEUR], [SITE_WEB_FOURNISSEUR], [RIB_FOURNISSEUR], [CODE_TVA_FOURNISSEUR]) VALUES (@CODE_FOURNISSEUR, @RS_FOURNISEEUR, @ADRESSE_FOURNISSEUR, @TEL_FOURNISSEUR, @FAX_FOURNISSEUR, @EMAIL_FOURNISSEUR, @SITE_WEB_FOURNISSEUR, @RIB_FOURNISSEUR, @CODE_TVA_FOURNISSEUR);
SELECT CODE_FOURNISSEUR, RS_FOURNISEEUR, ADRESSE_FOURNISSEUR, TEL_FOURNISSEUR, FAX_FOURNISSEUR, EMAIL_FOURNISSEUR, SITE_WEB_FOURNISSEUR, RIB_FOURNISSEUR, CODE_TVA_FOURNISSEUR FROM FOURNISSEUR WHERE (CODE_FOURNISSEUR = @CODE_FOURNISSEUR)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FOURNISSEUR", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RS_FOURNISEEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RS_FOURNISEEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_FOURNISSEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL_FOURNISSEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FAX_FOURNISSEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FAX_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL_FOURNISSEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SITE_WEB_FOURNISSEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SITE_WEB_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RIB_FOURNISSEUR", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RIB_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_TVA_FOURNISSEUR", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TVA_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[FOURNISSEUR] SET [CODE_FOURNISSEUR] = @CODE_FOURNISSEUR, [RS_FOURNISEEUR] = @RS_FOURNISEEUR, [ADRESSE_FOURNISSEUR] = @ADRESSE_FOURNISSEUR, [TEL_FOURNISSEUR] = @TEL_FOURNISSEUR, [FAX_FOURNISSEUR] = @FAX_FOURNISSEUR, [EMAIL_FOURNISSEUR] = @EMAIL_FOURNISSEUR, [SITE_WEB_FOURNISSEUR] = @SITE_WEB_FOURNISSEUR, [RIB_FOURNISSEUR] = @RIB_FOURNISSEUR, [CODE_TVA_FOURNISSEUR] = @CODE_TVA_FOURNISSEUR WHERE (([CODE_FOURNISSEUR] = @Original_CODE_FOURNISSEUR) AND ([RIB_FOURNISSEUR] = @Original_RIB_FOURNISSEUR) AND ([CODE_TVA_FOURNISSEUR] = @Original_CODE_TVA_FOURNISSEUR));
SELECT CODE_FOURNISSEUR, RS_FOURNISEEUR, ADRESSE_FOURNISSEUR, TEL_FOURNISSEUR, FAX_FOURNISSEUR, EMAIL_FOURNISSEUR, SITE_WEB_FOURNISSEUR, RIB_FOURNISSEUR, CODE_TVA_FOURNISSEUR FROM FOURNISSEUR WHERE (CODE_FOURNISSEUR = @CODE_FOURNISSEUR)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FOURNISSEUR", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RS_FOURNISEEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RS_FOURNISEEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_FOURNISSEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL_FOURNISSEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FAX_FOURNISSEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FAX_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL_FOURNISSEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SITE_WEB_FOURNISSEUR", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SITE_WEB_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RIB_FOURNISSEUR", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RIB_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_TVA_FOURNISSEUR", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TVA_FOURNISSEUR", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FOURNISSEUR", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FOURNISSEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RIB_FOURNISSEUR", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RIB_FOURNISSEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_TVA_FOURNISSEUR", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TVA_FOURNISSEUR", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_FOURNISSEUR, RS_FOURNISEEUR, ADRESSE_FOURNISSEUR, TEL_FOURNISSEUR, FA" +
                "X_FOURNISSEUR, EMAIL_FOURNISSEUR, SITE_WEB_FOURNISSEUR, RIB_FOURNISSEUR, CODE_TV" +
                "A_FOURNISSEUR FROM dbo.FOURNISSEUR";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.FOURNISSEURDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.FOURNISSEURDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.FOURNISSEURDataTable dataTable = new GESTION_COMMERCIALEDataSet.FOURNISSEURDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.FOURNISSEURDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FOURNISSEUR");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CODE_FOURNISSEUR, string Original_RIB_FOURNISSEUR, string Original_CODE_TVA_FOURNISSEUR) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CODE_FOURNISSEUR));
            if ((Original_RIB_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("Original_RIB_FOURNISSEUR");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_RIB_FOURNISSEUR));
            }
            if ((Original_CODE_TVA_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("Original_CODE_TVA_FOURNISSEUR");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CODE_TVA_FOURNISSEUR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CODE_FOURNISSEUR, string RS_FOURNISEEUR, string ADRESSE_FOURNISSEUR, string TEL_FOURNISSEUR, string FAX_FOURNISSEUR, string EMAIL_FOURNISSEUR, string SITE_WEB_FOURNISSEUR, string RIB_FOURNISSEUR, string CODE_TVA_FOURNISSEUR) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CODE_FOURNISSEUR));
            if ((RS_FOURNISEEUR == null)) {
                throw new System.ArgumentNullException("RS_FOURNISEEUR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(RS_FOURNISEEUR));
            }
            if ((ADRESSE_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("ADRESSE_FOURNISSEUR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ADRESSE_FOURNISSEUR));
            }
            if ((TEL_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("TEL_FOURNISSEUR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TEL_FOURNISSEUR));
            }
            if ((FAX_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("FAX_FOURNISSEUR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(FAX_FOURNISSEUR));
            }
            if ((EMAIL_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("EMAIL_FOURNISSEUR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(EMAIL_FOURNISSEUR));
            }
            if ((SITE_WEB_FOURNISSEUR == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(SITE_WEB_FOURNISSEUR));
            }
            if ((RIB_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("RIB_FOURNISSEUR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(RIB_FOURNISSEUR));
            }
            if ((CODE_TVA_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("CODE_TVA_FOURNISSEUR");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(CODE_TVA_FOURNISSEUR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal CODE_FOURNISSEUR, string RS_FOURNISEEUR, string ADRESSE_FOURNISSEUR, string TEL_FOURNISSEUR, string FAX_FOURNISSEUR, string EMAIL_FOURNISSEUR, string SITE_WEB_FOURNISSEUR, string RIB_FOURNISSEUR, string CODE_TVA_FOURNISSEUR, decimal Original_CODE_FOURNISSEUR, string Original_RIB_FOURNISSEUR, string Original_CODE_TVA_FOURNISSEUR) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CODE_FOURNISSEUR));
            if ((RS_FOURNISEEUR == null)) {
                throw new System.ArgumentNullException("RS_FOURNISEEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(RS_FOURNISEEUR));
            }
            if ((ADRESSE_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("ADRESSE_FOURNISSEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ADRESSE_FOURNISSEUR));
            }
            if ((TEL_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("TEL_FOURNISSEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TEL_FOURNISSEUR));
            }
            if ((FAX_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("FAX_FOURNISSEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(FAX_FOURNISSEUR));
            }
            if ((EMAIL_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("EMAIL_FOURNISSEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(EMAIL_FOURNISSEUR));
            }
            if ((SITE_WEB_FOURNISSEUR == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(SITE_WEB_FOURNISSEUR));
            }
            if ((RIB_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("RIB_FOURNISSEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(RIB_FOURNISSEUR));
            }
            if ((CODE_TVA_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("CODE_TVA_FOURNISSEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(CODE_TVA_FOURNISSEUR));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_CODE_FOURNISSEUR));
            if ((Original_RIB_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("Original_RIB_FOURNISSEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_RIB_FOURNISSEUR));
            }
            if ((Original_CODE_TVA_FOURNISSEUR == null)) {
                throw new System.ArgumentNullException("Original_CODE_TVA_FOURNISSEUR");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_CODE_TVA_FOURNISSEUR));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LG_BON_LIVRAISONTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LG_BON_LIVRAISONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LG_BON_LIVRAISON";
            tableMapping.ColumnMappings.Add("CODE_B_LIV", "CODE_B_LIV");
            tableMapping.ColumnMappings.Add("CODE_ARTICLE", "CODE_ARTICLE");
            tableMapping.ColumnMappings.Add("QTE_LIGNE_B_LIV", "QTE_LIGNE_B_LIV");
            tableMapping.ColumnMappings.Add("PRIX_HT_B_LIV", "PRIX_HT_B_LIV");
            tableMapping.ColumnMappings.Add("TVA_B_LIV", "TVA_B_LIV");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LG_BON_LIVRAISON] ([CODE_B_LIV], [CODE_ARTICLE], [QTE_LIGNE_B_" +
                "LIV], [PRIX_HT_B_LIV], [TVA_B_LIV]) VALUES (@CODE_B_LIV, @CODE_ARTICLE, @QTE_LIG" +
                "NE_B_LIV, @PRIX_HT_B_LIV, @TVA_B_LIV)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_B_LIV", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_B_LIV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QTE_LIGNE_B_LIV", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "QTE_LIGNE_B_LIV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRIX_HT_B_LIV", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "PRIX_HT_B_LIV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TVA_B_LIV", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "TVA_B_LIV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_B_LIV, CODE_ARTICLE, QTE_LIGNE_B_LIV, PRIX_HT_B_LIV, TVA_B_LIV FROM d" +
                "bo.LG_BON_LIVRAISON";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.LG_BON_LIVRAISONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.LG_BON_LIVRAISONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.LG_BON_LIVRAISONDataTable dataTable = new GESTION_COMMERCIALEDataSet.LG_BON_LIVRAISONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.LG_BON_LIVRAISONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LG_BON_LIVRAISON");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CODE_B_LIV, decimal CODE_ARTICLE, decimal QTE_LIGNE_B_LIV, decimal PRIX_HT_B_LIV, decimal TVA_B_LIV) {
            if ((CODE_B_LIV == null)) {
                throw new System.ArgumentNullException("CODE_B_LIV");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CODE_B_LIV));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(CODE_ARTICLE));
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(QTE_LIGNE_B_LIV));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(PRIX_HT_B_LIV));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(TVA_B_LIV));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LIGNE_COMMANDETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LIGNE_COMMANDETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LIGNE_COMMANDE";
            tableMapping.ColumnMappings.Add("CODE_ARTICLE", "CODE_ARTICLE");
            tableMapping.ColumnMappings.Add("CODE_COMMANDE", "CODE_COMMANDE");
            tableMapping.ColumnMappings.Add("QTE_LIGNE_COMMANDE", "QTE_LIGNE_COMMANDE");
            tableMapping.ColumnMappings.Add("PRIX_HT_COMMANDE", "PRIX_HT_COMMANDE");
            tableMapping.ColumnMappings.Add("TVA_COMMANDE", "TVA_COMMANDE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LIGNE_COMMANDE] ([CODE_ARTICLE], [CODE_COMMANDE], [QTE_LIGNE_C" +
                "OMMANDE], [PRIX_HT_COMMANDE], [TVA_COMMANDE]) VALUES (@CODE_ARTICLE, @CODE_COMMA" +
                "NDE, @QTE_LIGNE_COMMANDE, @PRIX_HT_COMMANDE, @TVA_COMMANDE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QTE_LIGNE_COMMANDE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "QTE_LIGNE_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRIX_HT_COMMANDE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "PRIX_HT_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TVA_COMMANDE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "TVA_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_ARTICLE, CODE_COMMANDE, QTE_LIGNE_COMMANDE, PRIX_HT_COMMANDE, TVA_COM" +
                "MANDE FROM dbo.LIGNE_COMMANDE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.LIGNE_COMMANDEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.LIGNE_COMMANDEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.LIGNE_COMMANDEDataTable dataTable = new GESTION_COMMERCIALEDataSet.LIGNE_COMMANDEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.LIGNE_COMMANDEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LIGNE_COMMANDE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CODE_ARTICLE, string CODE_COMMANDE, decimal QTE_LIGNE_COMMANDE, decimal PRIX_HT_COMMANDE, decimal TVA_COMMANDE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CODE_ARTICLE));
            if ((CODE_COMMANDE == null)) {
                throw new System.ArgumentNullException("CODE_COMMANDE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CODE_COMMANDE));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(QTE_LIGNE_COMMANDE));
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(PRIX_HT_COMMANDE));
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(TVA_COMMANDE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LIGNE_FACTURETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LIGNE_FACTURETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LIGNE_FACTURE";
            tableMapping.ColumnMappings.Add("CODE_FACTURE", "CODE_FACTURE");
            tableMapping.ColumnMappings.Add("CODE_COMMANDE", "CODE_COMMANDE");
            tableMapping.ColumnMappings.Add("CODE_ARTICLE", "CODE_ARTICLE");
            tableMapping.ColumnMappings.Add("QTE", "QTE");
            tableMapping.ColumnMappings.Add("TVA_ARTICLE", "TVA_ARTICLE");
            tableMapping.ColumnMappings.Add("PRIX_HT_ARTICLE", "PRIX_HT_ARTICLE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LIGNE_FACTURE] ([CODE_FACTURE], [CODE_COMMANDE], [CODE_ARTICLE" +
                "], [QTE], [TVA_ARTICLE], [PRIX_HT_ARTICLE]) VALUES (@CODE_FACTURE, @CODE_COMMAND" +
                "E, @CODE_ARTICLE, @QTE, @TVA_ARTICLE, @PRIX_HT_ARTICLE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QTE", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "QTE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TVA_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 2, "TVA_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PRIX_HT_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "PRIX_HT_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_FACTURE, CODE_COMMANDE, CODE_ARTICLE, QTE, TVA_ARTICLE, PRIX_HT_ARTIC" +
                "LE FROM dbo.LIGNE_FACTURE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.LIGNE_FACTUREDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.LIGNE_FACTUREDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.LIGNE_FACTUREDataTable dataTable = new GESTION_COMMERCIALEDataSet.LIGNE_FACTUREDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.LIGNE_FACTUREDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LIGNE_FACTURE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CODE_FACTURE, string CODE_COMMANDE, decimal CODE_ARTICLE, string QTE, decimal TVA_ARTICLE, decimal PRIX_HT_ARTICLE) {
            if ((CODE_FACTURE == null)) {
                throw new System.ArgumentNullException("CODE_FACTURE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CODE_FACTURE));
            }
            if ((CODE_COMMANDE == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CODE_COMMANDE));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(CODE_ARTICLE));
            if ((QTE == null)) {
                throw new System.ArgumentNullException("QTE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(QTE));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(TVA_ARTICLE));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(PRIX_HT_ARTICLE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LIVRAISONTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LIVRAISONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LIVRAISON";
            tableMapping.ColumnMappings.Add("CODE_B_LIV", "CODE_B_LIV");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LIVRAISON] ([CODE_B_LIV]) VALUES (@CODE_B_LIV)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_B_LIV", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_B_LIV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_B_LIV FROM dbo.LIVRAISON";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.LIVRAISONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.LIVRAISONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.LIVRAISONDataTable dataTable = new GESTION_COMMERCIALEDataSet.LIVRAISONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.LIVRAISONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LIVRAISON");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CODE_B_LIV) {
            if ((CODE_B_LIV == null)) {
                throw new System.ArgumentNullException("CODE_B_LIV");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CODE_B_LIV));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LIVRAISON_CLIENTTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LIVRAISON_CLIENTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LIVRAISON_CLIENT";
            tableMapping.ColumnMappings.Add("CODE_B_LIV", "CODE_B_LIV");
            tableMapping.ColumnMappings.Add("CODE_COMMANDE", "CODE_COMMANDE");
            tableMapping.ColumnMappings.Add("CODE_EMPLOYE", "CODE_EMPLOYE");
            tableMapping.ColumnMappings.Add("DATE_LIV", "DATE_LIV");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LIVRAISON_CLIENT] ([CODE_B_LIV], [CODE_COMMANDE], [CODE_EMPLOY" +
                "E], [DATE_LIV]) VALUES (@CODE_B_LIV, @CODE_COMMANDE, @CODE_EMPLOYE, @DATE_LIV)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_B_LIV", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_B_LIV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_EMPLOYE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_EMPLOYE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DATE_LIV", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DATE_LIV", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_B_LIV, CODE_COMMANDE, CODE_EMPLOYE, DATE_LIV FROM dbo.LIVRAISON_CLIEN" +
                "T";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.LIVRAISON_CLIENTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.LIVRAISON_CLIENTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.LIVRAISON_CLIENTDataTable dataTable = new GESTION_COMMERCIALEDataSet.LIVRAISON_CLIENTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.LIVRAISON_CLIENTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LIVRAISON_CLIENT");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CODE_B_LIV, string CODE_COMMANDE, decimal CODE_EMPLOYE, string DATE_LIV) {
            if ((CODE_B_LIV == null)) {
                throw new System.ArgumentNullException("CODE_B_LIV");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CODE_B_LIV));
            }
            if ((CODE_COMMANDE == null)) {
                throw new System.ArgumentNullException("CODE_COMMANDE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CODE_COMMANDE));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(CODE_EMPLOYE));
            if ((DATE_LIV == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DATE_LIV));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MAGAZINTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MAGAZINTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MAGAZIN";
            tableMapping.ColumnMappings.Add("CODE_MAG", "CODE_MAG");
            tableMapping.ColumnMappings.Add("NOM_MAG", "NOM_MAG");
            tableMapping.ColumnMappings.Add("ADRESSE_MAG", "ADRESSE_MAG");
            tableMapping.ColumnMappings.Add("TEL_MAG", "TEL_MAG");
            tableMapping.ColumnMappings.Add("CODE_SOCIETE", "CODE_SOCIETE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MAGAZIN] WHERE (([CODE_MAG] = @Original_CODE_MAG) AND ([NOM_MA" +
                "G] = @Original_NOM_MAG) AND ([ADRESSE_MAG] = @Original_ADRESSE_MAG) AND ([TEL_MA" +
                "G] = @Original_TEL_MAG) AND ([CODE_SOCIETE] = @Original_CODE_SOCIETE))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NOM_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ADRESSE_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TEL_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[MAGAZIN] ([CODE_MAG], [NOM_MAG], [ADRESSE_MAG], [TEL_MAG], [CODE_SOCIETE]) VALUES (@CODE_MAG, @NOM_MAG, @ADRESSE_MAG, @TEL_MAG, @CODE_SOCIETE);
SELECT CODE_MAG, NOM_MAG, ADRESSE_MAG, TEL_MAG, CODE_SOCIETE FROM MAGAZIN WHERE (CODE_MAG = @CODE_MAG)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MAGAZIN] SET [CODE_MAG] = @CODE_MAG, [NOM_MAG] = @NOM_MAG, [ADRESSE_MAG] = @ADRESSE_MAG, [TEL_MAG] = @TEL_MAG, [CODE_SOCIETE] = @CODE_SOCIETE WHERE (([CODE_MAG] = @Original_CODE_MAG) AND ([NOM_MAG] = @Original_NOM_MAG) AND ([ADRESSE_MAG] = @Original_ADRESSE_MAG) AND ([TEL_MAG] = @Original_TEL_MAG) AND ([CODE_SOCIETE] = @Original_CODE_SOCIETE));
SELECT CODE_MAG, NOM_MAG, ADRESSE_MAG, TEL_MAG, CODE_SOCIETE FROM MAGAZIN WHERE (CODE_MAG = @CODE_MAG)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NOM_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ADRESSE_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TEL_MAG", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_MAG", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_MAG, NOM_MAG, ADRESSE_MAG, TEL_MAG, CODE_SOCIETE FROM dbo.MAGAZIN";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.MAGAZINDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.MAGAZINDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.MAGAZINDataTable dataTable = new GESTION_COMMERCIALEDataSet.MAGAZINDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.MAGAZINDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MAGAZIN");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CODE_MAG, string Original_NOM_MAG, string Original_ADRESSE_MAG, string Original_TEL_MAG, decimal Original_CODE_SOCIETE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CODE_MAG));
            if ((Original_NOM_MAG == null)) {
                throw new System.ArgumentNullException("Original_NOM_MAG");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_NOM_MAG));
            }
            if ((Original_ADRESSE_MAG == null)) {
                throw new System.ArgumentNullException("Original_ADRESSE_MAG");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ADRESSE_MAG));
            }
            if ((Original_TEL_MAG == null)) {
                throw new System.ArgumentNullException("Original_TEL_MAG");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_TEL_MAG));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_CODE_SOCIETE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CODE_MAG, string NOM_MAG, string ADRESSE_MAG, string TEL_MAG, decimal CODE_SOCIETE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CODE_MAG));
            if ((NOM_MAG == null)) {
                throw new System.ArgumentNullException("NOM_MAG");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NOM_MAG));
            }
            if ((ADRESSE_MAG == null)) {
                throw new System.ArgumentNullException("ADRESSE_MAG");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ADRESSE_MAG));
            }
            if ((TEL_MAG == null)) {
                throw new System.ArgumentNullException("TEL_MAG");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(TEL_MAG));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(CODE_SOCIETE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal CODE_MAG, string NOM_MAG, string ADRESSE_MAG, string TEL_MAG, decimal CODE_SOCIETE, decimal Original_CODE_MAG, string Original_NOM_MAG, string Original_ADRESSE_MAG, string Original_TEL_MAG, decimal Original_CODE_SOCIETE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CODE_MAG));
            if ((NOM_MAG == null)) {
                throw new System.ArgumentNullException("NOM_MAG");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NOM_MAG));
            }
            if ((ADRESSE_MAG == null)) {
                throw new System.ArgumentNullException("ADRESSE_MAG");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ADRESSE_MAG));
            }
            if ((TEL_MAG == null)) {
                throw new System.ArgumentNullException("TEL_MAG");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(TEL_MAG));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(CODE_SOCIETE));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_CODE_MAG));
            if ((Original_NOM_MAG == null)) {
                throw new System.ArgumentNullException("Original_NOM_MAG");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_NOM_MAG));
            }
            if ((Original_ADRESSE_MAG == null)) {
                throw new System.ArgumentNullException("Original_ADRESSE_MAG");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_ADRESSE_MAG));
            }
            if ((Original_TEL_MAG == null)) {
                throw new System.ArgumentNullException("Original_TEL_MAG");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_TEL_MAG));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(Original_CODE_SOCIETE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class REGLEMENT_CLIENTTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public REGLEMENT_CLIENTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "REGLEMENT_CLIENT";
            tableMapping.ColumnMappings.Add("CODE_REGLEMENT_CLIENT", "CODE_REGLEMENT_CLIENT");
            tableMapping.ColumnMappings.Add("CODE_FACTURE", "CODE_FACTURE");
            tableMapping.ColumnMappings.Add("MODE_REGLEMENT_CLT", "MODE_REGLEMENT_CLT");
            tableMapping.ColumnMappings.Add("MONRANT_CLIENT", "MONRANT_CLIENT");
            tableMapping.ColumnMappings.Add("NUM_PIECE_CLIENT", "NUM_PIECE_CLIENT");
            tableMapping.ColumnMappings.Add("BANQUE_CLIENT", "BANQUE_CLIENT");
            tableMapping.ColumnMappings.Add("OBSERVATION", "OBSERVATION");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[REGLEMENT_CLIENT] WHERE (([CODE_REGLEMENT_CLIENT] = @Original_CODE_REGLEMENT_CLIENT) AND ([CODE_FACTURE] = @Original_CODE_FACTURE) AND ((@IsNull_MONRANT_CLIENT = 1 AND [MONRANT_CLIENT] IS NULL) OR ([MONRANT_CLIENT] = @Original_MONRANT_CLIENT)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_REGLEMENT_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_REGLEMENT_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MONRANT_CLIENT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MONRANT_CLIENT", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONRANT_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONRANT_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[REGLEMENT_CLIENT] ([CODE_REGLEMENT_CLIENT], [CODE_FACTURE], [MODE_REGLEMENT_CLT], [MONRANT_CLIENT], [NUM_PIECE_CLIENT], [BANQUE_CLIENT], [OBSERVATION]) VALUES (@CODE_REGLEMENT_CLIENT, @CODE_FACTURE, @MODE_REGLEMENT_CLT, @MONRANT_CLIENT, @NUM_PIECE_CLIENT, @BANQUE_CLIENT, @OBSERVATION);
SELECT CODE_REGLEMENT_CLIENT, CODE_FACTURE, MODE_REGLEMENT_CLT, MONRANT_CLIENT, NUM_PIECE_CLIENT, BANQUE_CLIENT, OBSERVATION FROM REGLEMENT_CLIENT WHERE (CODE_REGLEMENT_CLIENT = @CODE_REGLEMENT_CLIENT)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_REGLEMENT_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_REGLEMENT_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MODE_REGLEMENT_CLT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MODE_REGLEMENT_CLT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONRANT_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONRANT_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUM_PIECE_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUM_PIECE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BANQUE_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BANQUE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OBSERVATION", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "OBSERVATION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[REGLEMENT_CLIENT] SET [CODE_REGLEMENT_CLIENT] = @CODE_REGLEMENT_CLIENT, [CODE_FACTURE] = @CODE_FACTURE, [MODE_REGLEMENT_CLT] = @MODE_REGLEMENT_CLT, [MONRANT_CLIENT] = @MONRANT_CLIENT, [NUM_PIECE_CLIENT] = @NUM_PIECE_CLIENT, [BANQUE_CLIENT] = @BANQUE_CLIENT, [OBSERVATION] = @OBSERVATION WHERE (([CODE_REGLEMENT_CLIENT] = @Original_CODE_REGLEMENT_CLIENT) AND ([CODE_FACTURE] = @Original_CODE_FACTURE) AND ((@IsNull_MONRANT_CLIENT = 1 AND [MONRANT_CLIENT] IS NULL) OR ([MONRANT_CLIENT] = @Original_MONRANT_CLIENT)));
SELECT CODE_REGLEMENT_CLIENT, CODE_FACTURE, MODE_REGLEMENT_CLT, MONRANT_CLIENT, NUM_PIECE_CLIENT, BANQUE_CLIENT, OBSERVATION FROM REGLEMENT_CLIENT WHERE (CODE_REGLEMENT_CLIENT = @CODE_REGLEMENT_CLIENT)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_REGLEMENT_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_REGLEMENT_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MODE_REGLEMENT_CLT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MODE_REGLEMENT_CLT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MONRANT_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONRANT_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUM_PIECE_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUM_PIECE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BANQUE_CLIENT", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BANQUE_CLIENT", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OBSERVATION", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "OBSERVATION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_REGLEMENT_CLIENT", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_REGLEMENT_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_FACTURE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MONRANT_CLIENT", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MONRANT_CLIENT", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MONRANT_CLIENT", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 3, "MONRANT_CLIENT", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_REGLEMENT_CLIENT, CODE_FACTURE, MODE_REGLEMENT_CLT, MONRANT_CLIENT, N" +
                "UM_PIECE_CLIENT, BANQUE_CLIENT, OBSERVATION FROM dbo.REGLEMENT_CLIENT";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.REGLEMENT_CLIENTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.REGLEMENT_CLIENTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.REGLEMENT_CLIENTDataTable dataTable = new GESTION_COMMERCIALEDataSet.REGLEMENT_CLIENTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.REGLEMENT_CLIENTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "REGLEMENT_CLIENT");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CODE_REGLEMENT_CLIENT, string Original_CODE_FACTURE, System.Nullable<decimal> Original_MONRANT_CLIENT) {
            if ((Original_CODE_REGLEMENT_CLIENT == null)) {
                throw new System.ArgumentNullException("Original_CODE_REGLEMENT_CLIENT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CODE_REGLEMENT_CLIENT));
            }
            if ((Original_CODE_FACTURE == null)) {
                throw new System.ArgumentNullException("Original_CODE_FACTURE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CODE_FACTURE));
            }
            if ((Original_MONRANT_CLIENT.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_MONRANT_CLIENT.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CODE_REGLEMENT_CLIENT, string CODE_FACTURE, string MODE_REGLEMENT_CLT, System.Nullable<decimal> MONRANT_CLIENT, string NUM_PIECE_CLIENT, string BANQUE_CLIENT, string OBSERVATION) {
            if ((CODE_REGLEMENT_CLIENT == null)) {
                throw new System.ArgumentNullException("CODE_REGLEMENT_CLIENT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CODE_REGLEMENT_CLIENT));
            }
            if ((CODE_FACTURE == null)) {
                throw new System.ArgumentNullException("CODE_FACTURE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CODE_FACTURE));
            }
            if ((MODE_REGLEMENT_CLT == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(MODE_REGLEMENT_CLT));
            }
            if ((MONRANT_CLIENT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(MONRANT_CLIENT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((NUM_PIECE_CLIENT == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(NUM_PIECE_CLIENT));
            }
            if ((BANQUE_CLIENT == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(BANQUE_CLIENT));
            }
            if ((OBSERVATION == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(OBSERVATION));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CODE_REGLEMENT_CLIENT, string CODE_FACTURE, string MODE_REGLEMENT_CLT, System.Nullable<decimal> MONRANT_CLIENT, string NUM_PIECE_CLIENT, string BANQUE_CLIENT, string OBSERVATION, string Original_CODE_REGLEMENT_CLIENT, string Original_CODE_FACTURE, System.Nullable<decimal> Original_MONRANT_CLIENT) {
            if ((CODE_REGLEMENT_CLIENT == null)) {
                throw new System.ArgumentNullException("CODE_REGLEMENT_CLIENT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CODE_REGLEMENT_CLIENT));
            }
            if ((CODE_FACTURE == null)) {
                throw new System.ArgumentNullException("CODE_FACTURE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CODE_FACTURE));
            }
            if ((MODE_REGLEMENT_CLT == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(MODE_REGLEMENT_CLT));
            }
            if ((MONRANT_CLIENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(MONRANT_CLIENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            if ((NUM_PIECE_CLIENT == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(NUM_PIECE_CLIENT));
            }
            if ((BANQUE_CLIENT == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(BANQUE_CLIENT));
            }
            if ((OBSERVATION == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(OBSERVATION));
            }
            if ((Original_CODE_REGLEMENT_CLIENT == null)) {
                throw new System.ArgumentNullException("Original_CODE_REGLEMENT_CLIENT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_CODE_REGLEMENT_CLIENT));
            }
            if ((Original_CODE_FACTURE == null)) {
                throw new System.ArgumentNullException("Original_CODE_FACTURE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_CODE_FACTURE));
            }
            if ((Original_MONRANT_CLIENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((decimal)(Original_MONRANT_CLIENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SOCIETETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SOCIETETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SOCIETE";
            tableMapping.ColumnMappings.Add("CODE_SOCIETE", "CODE_SOCIETE");
            tableMapping.ColumnMappings.Add("RS_SOCIETE", "RS_SOCIETE");
            tableMapping.ColumnMappings.Add("DESCRIPTION_SOCIETE", "DESCRIPTION_SOCIETE");
            tableMapping.ColumnMappings.Add("ADRESSE_SOCIETE", "ADRESSE_SOCIETE");
            tableMapping.ColumnMappings.Add("CP_SOCIETE", "CP_SOCIETE");
            tableMapping.ColumnMappings.Add("TEL_SOCIETE", "TEL_SOCIETE");
            tableMapping.ColumnMappings.Add("FAX_SOCIETE", "FAX_SOCIETE");
            tableMapping.ColumnMappings.Add("EMAIL_SOCIETE", "EMAIL_SOCIETE");
            tableMapping.ColumnMappings.Add("SITE_WEB_SOCETE", "SITE_WEB_SOCETE");
            tableMapping.ColumnMappings.Add("LOGO_SOCIETE", "LOGO_SOCIETE");
            tableMapping.ColumnMappings.Add("CODE_TVA_SOCIETE", "CODE_TVA_SOCIETE");
            tableMapping.ColumnMappings.Add("RIB_SOCIETE", "RIB_SOCIETE");
            tableMapping.ColumnMappings.Add("NUM_COMMANDE", "NUM_COMMANDE");
            tableMapping.ColumnMappings.Add("PREFIX1_COMMANDE", "PREFIX1_COMMANDE");
            tableMapping.ColumnMappings.Add("PREFIX2_COMMANDE", "PREFIX2_COMMANDE");
            tableMapping.ColumnMappings.Add("NUM_FACTURE", "NUM_FACTURE");
            tableMapping.ColumnMappings.Add("PREFIX1_FACTURE", "PREFIX1_FACTURE");
            tableMapping.ColumnMappings.Add("PREFIXE2_FACTURE", "PREFIXE2_FACTURE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SOCIETE] WHERE (([CODE_SOCIETE] = @Original_CODE_SOCIETE))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[SOCIETE] ([CODE_SOCIETE], [RS_SOCIETE], [DESCRIPTION_SOCIETE], [ADRESSE_SOCIETE], [CP_SOCIETE], [TEL_SOCIETE], [FAX_SOCIETE], [EMAIL_SOCIETE], [SITE_WEB_SOCETE], [LOGO_SOCIETE], [CODE_TVA_SOCIETE], [RIB_SOCIETE], [NUM_COMMANDE], [PREFIX1_COMMANDE], [PREFIX2_COMMANDE], [NUM_FACTURE], [PREFIX1_FACTURE], [PREFIXE2_FACTURE]) VALUES (@CODE_SOCIETE, @RS_SOCIETE, @DESCRIPTION_SOCIETE, @ADRESSE_SOCIETE, @CP_SOCIETE, @TEL_SOCIETE, @FAX_SOCIETE, @EMAIL_SOCIETE, @SITE_WEB_SOCETE, @LOGO_SOCIETE, @CODE_TVA_SOCIETE, @RIB_SOCIETE, @NUM_COMMANDE, @PREFIX1_COMMANDE, @PREFIX2_COMMANDE, @NUM_FACTURE, @PREFIX1_FACTURE, @PREFIXE2_FACTURE);
SELECT CODE_SOCIETE, RS_SOCIETE, DESCRIPTION_SOCIETE, ADRESSE_SOCIETE, CP_SOCIETE, TEL_SOCIETE, FAX_SOCIETE, EMAIL_SOCIETE, SITE_WEB_SOCETE, LOGO_SOCIETE, CODE_TVA_SOCIETE, RIB_SOCIETE, NUM_COMMANDE, PREFIX1_COMMANDE, PREFIX2_COMMANDE, NUM_FACTURE, PREFIX1_FACTURE, PREFIXE2_FACTURE FROM SOCIETE WHERE (CODE_SOCIETE = @CODE_SOCIETE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RS_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RS_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CP_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CP_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FAX_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FAX_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SITE_WEB_SOCETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SITE_WEB_SOCETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOGO_SOCIETE", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "LOGO_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_TVA_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TVA_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RIB_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RIB_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUM_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUM_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PREFIX1_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PREFIX1_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PREFIX2_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PREFIX2_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUM_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUM_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PREFIX1_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PREFIX1_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PREFIXE2_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PREFIXE2_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SOCIETE] SET [CODE_SOCIETE] = @CODE_SOCIETE, [RS_SOCIETE] = @RS_SOCIETE, [DESCRIPTION_SOCIETE] = @DESCRIPTION_SOCIETE, [ADRESSE_SOCIETE] = @ADRESSE_SOCIETE, [CP_SOCIETE] = @CP_SOCIETE, [TEL_SOCIETE] = @TEL_SOCIETE, [FAX_SOCIETE] = @FAX_SOCIETE, [EMAIL_SOCIETE] = @EMAIL_SOCIETE, [SITE_WEB_SOCETE] = @SITE_WEB_SOCETE, [LOGO_SOCIETE] = @LOGO_SOCIETE, [CODE_TVA_SOCIETE] = @CODE_TVA_SOCIETE, [RIB_SOCIETE] = @RIB_SOCIETE, [NUM_COMMANDE] = @NUM_COMMANDE, [PREFIX1_COMMANDE] = @PREFIX1_COMMANDE, [PREFIX2_COMMANDE] = @PREFIX2_COMMANDE, [NUM_FACTURE] = @NUM_FACTURE, [PREFIX1_FACTURE] = @PREFIX1_FACTURE, [PREFIXE2_FACTURE] = @PREFIXE2_FACTURE WHERE (([CODE_SOCIETE] = @Original_CODE_SOCIETE));
SELECT CODE_SOCIETE, RS_SOCIETE, DESCRIPTION_SOCIETE, ADRESSE_SOCIETE, CP_SOCIETE, TEL_SOCIETE, FAX_SOCIETE, EMAIL_SOCIETE, SITE_WEB_SOCETE, LOGO_SOCIETE, CODE_TVA_SOCIETE, RIB_SOCIETE, NUM_COMMANDE, PREFIX1_COMMANDE, PREFIX2_COMMANDE, NUM_FACTURE, PREFIX1_FACTURE, PREFIXE2_FACTURE FROM SOCIETE WHERE (CODE_SOCIETE = @CODE_SOCIETE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RS_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RS_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ADRESSE_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ADRESSE_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CP_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CP_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TEL_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TEL_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FAX_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FAX_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EMAIL_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "EMAIL_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SITE_WEB_SOCETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SITE_WEB_SOCETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOGO_SOCIETE", System.Data.SqlDbType.Image, 0, System.Data.ParameterDirection.Input, 0, 0, "LOGO_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_TVA_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TVA_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RIB_SOCIETE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RIB_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUM_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUM_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PREFIX1_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PREFIX1_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PREFIX2_COMMANDE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PREFIX2_COMMANDE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NUM_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NUM_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PREFIX1_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PREFIX1_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PREFIXE2_FACTURE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PREFIXE2_FACTURE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT CODE_SOCIETE, RS_SOCIETE, DESCRIPTION_SOCIETE, ADRESSE_SOCIETE, CP_SOCIETE, TEL_SOCIETE, FAX_SOCIETE, EMAIL_SOCIETE, SITE_WEB_SOCETE, LOGO_SOCIETE, CODE_TVA_SOCIETE, RIB_SOCIETE, NUM_COMMANDE, PREFIX1_COMMANDE, PREFIX2_COMMANDE, NUM_FACTURE, PREFIX1_FACTURE, PREFIXE2_FACTURE FROM dbo.SOCIETE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.SOCIETEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.SOCIETEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.SOCIETEDataTable dataTable = new GESTION_COMMERCIALEDataSet.SOCIETEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.SOCIETEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SOCIETE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CODE_SOCIETE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CODE_SOCIETE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    decimal CODE_SOCIETE, 
                    string RS_SOCIETE, 
                    string DESCRIPTION_SOCIETE, 
                    string ADRESSE_SOCIETE, 
                    string CP_SOCIETE, 
                    string TEL_SOCIETE, 
                    string FAX_SOCIETE, 
                    string EMAIL_SOCIETE, 
                    string SITE_WEB_SOCETE, 
                    byte[] LOGO_SOCIETE, 
                    string CODE_TVA_SOCIETE, 
                    string RIB_SOCIETE, 
                    string NUM_COMMANDE, 
                    string PREFIX1_COMMANDE, 
                    string PREFIX2_COMMANDE, 
                    string NUM_FACTURE, 
                    string PREFIX1_FACTURE, 
                    string PREFIXE2_FACTURE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CODE_SOCIETE));
            if ((RS_SOCIETE == null)) {
                throw new System.ArgumentNullException("RS_SOCIETE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(RS_SOCIETE));
            }
            if ((DESCRIPTION_SOCIETE == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_SOCIETE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DESCRIPTION_SOCIETE));
            }
            if ((ADRESSE_SOCIETE == null)) {
                throw new System.ArgumentNullException("ADRESSE_SOCIETE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(ADRESSE_SOCIETE));
            }
            if ((CP_SOCIETE == null)) {
                throw new System.ArgumentNullException("CP_SOCIETE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CP_SOCIETE));
            }
            if ((TEL_SOCIETE == null)) {
                throw new System.ArgumentNullException("TEL_SOCIETE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TEL_SOCIETE));
            }
            if ((FAX_SOCIETE == null)) {
                throw new System.ArgumentNullException("FAX_SOCIETE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(FAX_SOCIETE));
            }
            if ((EMAIL_SOCIETE == null)) {
                throw new System.ArgumentNullException("EMAIL_SOCIETE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(EMAIL_SOCIETE));
            }
            if ((SITE_WEB_SOCETE == null)) {
                throw new System.ArgumentNullException("SITE_WEB_SOCETE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(SITE_WEB_SOCETE));
            }
            if ((LOGO_SOCIETE == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((byte[])(LOGO_SOCIETE));
            }
            if ((CODE_TVA_SOCIETE == null)) {
                throw new System.ArgumentNullException("CODE_TVA_SOCIETE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(CODE_TVA_SOCIETE));
            }
            if ((RIB_SOCIETE == null)) {
                throw new System.ArgumentNullException("RIB_SOCIETE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(RIB_SOCIETE));
            }
            if ((NUM_COMMANDE == null)) {
                throw new System.ArgumentNullException("NUM_COMMANDE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(NUM_COMMANDE));
            }
            if ((PREFIX1_COMMANDE == null)) {
                throw new System.ArgumentNullException("PREFIX1_COMMANDE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(PREFIX1_COMMANDE));
            }
            if ((PREFIX2_COMMANDE == null)) {
                throw new System.ArgumentNullException("PREFIX2_COMMANDE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(PREFIX2_COMMANDE));
            }
            if ((NUM_FACTURE == null)) {
                throw new System.ArgumentNullException("NUM_FACTURE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(NUM_FACTURE));
            }
            if ((PREFIX1_FACTURE == null)) {
                throw new System.ArgumentNullException("PREFIX1_FACTURE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(PREFIX1_FACTURE));
            }
            if ((PREFIXE2_FACTURE == null)) {
                throw new System.ArgumentNullException("PREFIXE2_FACTURE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(PREFIXE2_FACTURE));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal CODE_SOCIETE, 
                    string RS_SOCIETE, 
                    string DESCRIPTION_SOCIETE, 
                    string ADRESSE_SOCIETE, 
                    string CP_SOCIETE, 
                    string TEL_SOCIETE, 
                    string FAX_SOCIETE, 
                    string EMAIL_SOCIETE, 
                    string SITE_WEB_SOCETE, 
                    byte[] LOGO_SOCIETE, 
                    string CODE_TVA_SOCIETE, 
                    string RIB_SOCIETE, 
                    string NUM_COMMANDE, 
                    string PREFIX1_COMMANDE, 
                    string PREFIX2_COMMANDE, 
                    string NUM_FACTURE, 
                    string PREFIX1_FACTURE, 
                    string PREFIXE2_FACTURE, 
                    decimal Original_CODE_SOCIETE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CODE_SOCIETE));
            if ((RS_SOCIETE == null)) {
                throw new System.ArgumentNullException("RS_SOCIETE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(RS_SOCIETE));
            }
            if ((DESCRIPTION_SOCIETE == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_SOCIETE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DESCRIPTION_SOCIETE));
            }
            if ((ADRESSE_SOCIETE == null)) {
                throw new System.ArgumentNullException("ADRESSE_SOCIETE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(ADRESSE_SOCIETE));
            }
            if ((CP_SOCIETE == null)) {
                throw new System.ArgumentNullException("CP_SOCIETE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CP_SOCIETE));
            }
            if ((TEL_SOCIETE == null)) {
                throw new System.ArgumentNullException("TEL_SOCIETE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TEL_SOCIETE));
            }
            if ((FAX_SOCIETE == null)) {
                throw new System.ArgumentNullException("FAX_SOCIETE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(FAX_SOCIETE));
            }
            if ((EMAIL_SOCIETE == null)) {
                throw new System.ArgumentNullException("EMAIL_SOCIETE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(EMAIL_SOCIETE));
            }
            if ((SITE_WEB_SOCETE == null)) {
                throw new System.ArgumentNullException("SITE_WEB_SOCETE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(SITE_WEB_SOCETE));
            }
            if ((LOGO_SOCIETE == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((byte[])(LOGO_SOCIETE));
            }
            if ((CODE_TVA_SOCIETE == null)) {
                throw new System.ArgumentNullException("CODE_TVA_SOCIETE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(CODE_TVA_SOCIETE));
            }
            if ((RIB_SOCIETE == null)) {
                throw new System.ArgumentNullException("RIB_SOCIETE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(RIB_SOCIETE));
            }
            if ((NUM_COMMANDE == null)) {
                throw new System.ArgumentNullException("NUM_COMMANDE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(NUM_COMMANDE));
            }
            if ((PREFIX1_COMMANDE == null)) {
                throw new System.ArgumentNullException("PREFIX1_COMMANDE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(PREFIX1_COMMANDE));
            }
            if ((PREFIX2_COMMANDE == null)) {
                throw new System.ArgumentNullException("PREFIX2_COMMANDE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(PREFIX2_COMMANDE));
            }
            if ((NUM_FACTURE == null)) {
                throw new System.ArgumentNullException("NUM_FACTURE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(NUM_FACTURE));
            }
            if ((PREFIX1_FACTURE == null)) {
                throw new System.ArgumentNullException("PREFIX1_FACTURE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(PREFIX1_FACTURE));
            }
            if ((PREFIXE2_FACTURE == null)) {
                throw new System.ArgumentNullException("PREFIXE2_FACTURE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(PREFIXE2_FACTURE));
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((decimal)(Original_CODE_SOCIETE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class STOCKTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public STOCKTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "STOCK";
            tableMapping.ColumnMappings.Add("CODE_MAG", "CODE_MAG");
            tableMapping.ColumnMappings.Add("CODE_ARTICLE", "CODE_ARTICLE");
            tableMapping.ColumnMappings.Add("QTTE_STOCK", "QTTE_STOCK");
            tableMapping.ColumnMappings.Add("QTTE_STOCK_MIN", "QTTE_STOCK_MIN");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[STOCK] ([CODE_MAG], [CODE_ARTICLE], [QTTE_STOCK], [QTTE_STOCK_" +
                "MIN]) VALUES (@CODE_MAG, @CODE_ARTICLE, @QTTE_STOCK, @QTTE_STOCK_MIN)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_MAG", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_MAG", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_ARTICLE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_ARTICLE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QTTE_STOCK", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "QTTE_STOCK", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@QTTE_STOCK_MIN", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "QTTE_STOCK_MIN", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_MAG, CODE_ARTICLE, QTTE_STOCK, QTTE_STOCK_MIN FROM dbo.STOCK";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.STOCKDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.STOCKDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.STOCKDataTable dataTable = new GESTION_COMMERCIALEDataSet.STOCKDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.STOCKDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "STOCK");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CODE_MAG, decimal CODE_ARTICLE, string QTTE_STOCK, string QTTE_STOCK_MIN) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CODE_MAG));
            this.Adapter.InsertCommand.Parameters[1].Value = ((decimal)(CODE_ARTICLE));
            if ((QTTE_STOCK == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(QTTE_STOCK));
            }
            if ((QTTE_STOCK_MIN == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(QTTE_STOCK_MIN));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TACHETableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TACHETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TACHE";
            tableMapping.ColumnMappings.Add("CODE_TACHE", "CODE_TACHE");
            tableMapping.ColumnMappings.Add("LIB_TACHE", "LIB_TACHE");
            tableMapping.ColumnMappings.Add("DESCRIPTION_TACHE", "DESCRIPTION_TACHE");
            tableMapping.ColumnMappings.Add("CODE_FONCTION", "CODE_FONCTION");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TACHE] WHERE (([CODE_TACHE] = @Original_CODE_TACHE) AND ([CODE" +
                "_FONCTION] = @Original_CODE_FONCTION))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_TACHE", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TACHE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TACHE] ([CODE_TACHE], [LIB_TACHE], [DESCRIPTION_TACHE], [CODE_FONCTION]) VALUES (@CODE_TACHE, @LIB_TACHE, @DESCRIPTION_TACHE, @CODE_FONCTION);
SELECT CODE_TACHE, LIB_TACHE, DESCRIPTION_TACHE, CODE_FONCTION FROM TACHE WHERE (CODE_TACHE = @CODE_TACHE)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_TACHE", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TACHE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LIB_TACHE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LIB_TACHE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_TACHE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_TACHE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TACHE] SET [CODE_TACHE] = @CODE_TACHE, [LIB_TACHE] = @LIB_TACHE, [DESCRIPTION_TACHE] = @DESCRIPTION_TACHE, [CODE_FONCTION] = @CODE_FONCTION WHERE (([CODE_TACHE] = @Original_CODE_TACHE) AND ([CODE_FONCTION] = @Original_CODE_FONCTION));
SELECT CODE_TACHE, LIB_TACHE, DESCRIPTION_TACHE, CODE_FONCTION FROM TACHE WHERE (CODE_TACHE = @CODE_TACHE)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_TACHE", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TACHE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LIB_TACHE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LIB_TACHE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DESCRIPTION_TACHE", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION_TACHE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_TACHE", System.Data.SqlDbType.NChar, 0, System.Data.ParameterDirection.Input, 0, 0, "CODE_TACHE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_FONCTION", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_FONCTION", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_TACHE, LIB_TACHE, DESCRIPTION_TACHE, CODE_FONCTION FROM dbo.TACHE";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.TACHEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.TACHEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.TACHEDataTable dataTable = new GESTION_COMMERCIALEDataSet.TACHEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.TACHEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TACHE");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CODE_TACHE, decimal Original_CODE_FONCTION) {
            if ((Original_CODE_TACHE == null)) {
                throw new System.ArgumentNullException("Original_CODE_TACHE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CODE_TACHE));
            }
            this.Adapter.DeleteCommand.Parameters[1].Value = ((decimal)(Original_CODE_FONCTION));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CODE_TACHE, string LIB_TACHE, string DESCRIPTION_TACHE, decimal CODE_FONCTION) {
            if ((CODE_TACHE == null)) {
                throw new System.ArgumentNullException("CODE_TACHE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CODE_TACHE));
            }
            if ((LIB_TACHE == null)) {
                throw new System.ArgumentNullException("LIB_TACHE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LIB_TACHE));
            }
            if ((DESCRIPTION_TACHE == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_TACHE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DESCRIPTION_TACHE));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((decimal)(CODE_FONCTION));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CODE_TACHE, string LIB_TACHE, string DESCRIPTION_TACHE, decimal CODE_FONCTION, string Original_CODE_TACHE, decimal Original_CODE_FONCTION) {
            if ((CODE_TACHE == null)) {
                throw new System.ArgumentNullException("CODE_TACHE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CODE_TACHE));
            }
            if ((LIB_TACHE == null)) {
                throw new System.ArgumentNullException("LIB_TACHE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LIB_TACHE));
            }
            if ((DESCRIPTION_TACHE == null)) {
                throw new System.ArgumentNullException("DESCRIPTION_TACHE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DESCRIPTION_TACHE));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((decimal)(CODE_FONCTION));
            if ((Original_CODE_TACHE == null)) {
                throw new System.ArgumentNullException("Original_CODE_TACHE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_CODE_TACHE));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(Original_CODE_FONCTION));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UTILISATEURTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UTILISATEURTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UTILISATEUR";
            tableMapping.ColumnMappings.Add("CODE_USER", "CODE_USER");
            tableMapping.ColumnMappings.Add("NOM_USER", "NOM_USER");
            tableMapping.ColumnMappings.Add("LOGIN_USER", "LOGIN_USER");
            tableMapping.ColumnMappings.Add("PASSWORD_USER", "PASSWORD_USER");
            tableMapping.ColumnMappings.Add("ETAT_USER", "ETAT_USER");
            tableMapping.ColumnMappings.Add("CODE_SOCIETE", "CODE_SOCIETE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[UTILISATEUR] WHERE (([CODE_USER] = @Original_CODE_USER) AND ([" +
                "ETAT_USER] = @Original_ETAT_USER) AND ([CODE_SOCIETE] = @Original_CODE_SOCIETE))" +
                "";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_USER", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_USER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ETAT_USER", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_USER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[UTILISATEUR] ([CODE_USER], [NOM_USER], [LOGIN_USER], [PASSWORD_USER], [ETAT_USER], [CODE_SOCIETE]) VALUES (@CODE_USER, @NOM_USER, @LOGIN_USER, @PASSWORD_USER, @ETAT_USER, @CODE_SOCIETE);
SELECT CODE_USER, NOM_USER, LOGIN_USER, PASSWORD_USER, ETAT_USER, CODE_SOCIETE FROM UTILISATEUR WHERE (CODE_USER = @CODE_USER)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_USER", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_USER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOGIN_USER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LOGIN_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PASSWORD_USER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PASSWORD_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_USER", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[UTILISATEUR] SET [CODE_USER] = @CODE_USER, [NOM_USER] = @NOM_USER, [LOGIN_USER] = @LOGIN_USER, [PASSWORD_USER] = @PASSWORD_USER, [ETAT_USER] = @ETAT_USER, [CODE_SOCIETE] = @CODE_SOCIETE WHERE (([CODE_USER] = @Original_CODE_USER) AND ([ETAT_USER] = @Original_ETAT_USER) AND ([CODE_SOCIETE] = @Original_CODE_SOCIETE));
SELECT CODE_USER, NOM_USER, LOGIN_USER, PASSWORD_USER, ETAT_USER, CODE_SOCIETE FROM UTILISATEUR WHERE (CODE_USER = @CODE_USER)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_USER", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NOM_USER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "NOM_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LOGIN_USER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LOGIN_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PASSWORD_USER", System.Data.SqlDbType.NVarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "PASSWORD_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ETAT_USER", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_USER", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_USER", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_USER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ETAT_USER", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "ETAT_USER", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CODE_SOCIETE", System.Data.SqlDbType.Decimal, 0, System.Data.ParameterDirection.Input, 18, 0, "CODE_SOCIETE", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CHM_SERVER.Properties.Settings.Default.GESTION_COMMERCIALEConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_USER, NOM_USER, LOGIN_USER, PASSWORD_USER, ETAT_USER, CODE_SOCIETE FR" +
                "OM dbo.UTILISATEUR";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GESTION_COMMERCIALEDataSet.UTILISATEURDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GESTION_COMMERCIALEDataSet.UTILISATEURDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GESTION_COMMERCIALEDataSet.UTILISATEURDataTable dataTable = new GESTION_COMMERCIALEDataSet.UTILISATEURDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet.UTILISATEURDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GESTION_COMMERCIALEDataSet dataSet) {
            return this.Adapter.Update(dataSet, "UTILISATEUR");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_CODE_USER, bool Original_ETAT_USER, decimal Original_CODE_SOCIETE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_CODE_USER));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((bool)(Original_ETAT_USER));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((decimal)(Original_CODE_SOCIETE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(decimal CODE_USER, string NOM_USER, string LOGIN_USER, string PASSWORD_USER, bool ETAT_USER, decimal CODE_SOCIETE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(CODE_USER));
            if ((NOM_USER == null)) {
                throw new System.ArgumentNullException("NOM_USER");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NOM_USER));
            }
            if ((LOGIN_USER == null)) {
                throw new System.ArgumentNullException("LOGIN_USER");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(LOGIN_USER));
            }
            if ((PASSWORD_USER == null)) {
                throw new System.ArgumentNullException("PASSWORD_USER");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(PASSWORD_USER));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(ETAT_USER));
            this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(CODE_SOCIETE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(decimal CODE_USER, string NOM_USER, string LOGIN_USER, string PASSWORD_USER, bool ETAT_USER, decimal CODE_SOCIETE, decimal Original_CODE_USER, bool Original_ETAT_USER, decimal Original_CODE_SOCIETE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(CODE_USER));
            if ((NOM_USER == null)) {
                throw new System.ArgumentNullException("NOM_USER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NOM_USER));
            }
            if ((LOGIN_USER == null)) {
                throw new System.ArgumentNullException("LOGIN_USER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(LOGIN_USER));
            }
            if ((PASSWORD_USER == null)) {
                throw new System.ArgumentNullException("PASSWORD_USER");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(PASSWORD_USER));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(ETAT_USER));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(CODE_SOCIETE));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Original_CODE_USER));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((bool)(Original_ETAT_USER));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_CODE_SOCIETE));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591